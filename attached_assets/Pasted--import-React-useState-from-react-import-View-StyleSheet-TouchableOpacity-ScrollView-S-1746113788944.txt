
import React, { useState } from 'react';
import { View, StyleSheet, TouchableOpacity, ScrollView, SafeAreaView, ActivityIndicator, TextInput, Animated, KeyboardAvoidingView, Platform } from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { ThemedText } from '@/components/ThemedText';
import { Ionicons } from '@expo/vector-icons';
import { colors, fonts, shadows } from './constants/Styles';
import { useSharedValue, useAnimatedStyle, withSpring } from 'react-native-reanimated';
import * as Haptics from 'expo-haptics';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFFFFF',
  },
  scrollView: {
    flex: 1,
  },
  header: {
    paddingHorizontal: 16,
    paddingVertical: 24,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#FFFFFF',
    borderBottomWidth: 1,
    borderBottomColor: colors.border,
  },
  backButton: {
    marginRight: 16,
  },
  title: {
    fontSize: 32,
    fontFamily: fonts.bold,
    color: '#333333',
  },
  planSummary: {
    padding: 24,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    margin: 24,
    gap: 16,
    borderWidth: 1,
    borderColor: 'rgba(0,0,0,0.08)',
    ...shadows.card
  },
  providerName: {
    fontSize: 24,
    fontFamily: fonts.bold,
    marginBottom: 8,
    color: '#1A1A1A',
    fontWeight: '600',
  },
  price: {
    fontSize: 32,
    color: '#4B76E5',
    fontFamily: fonts.bold,
    marginBottom: 16,
  },
  coverageList: {
    gap: 12,
  },
  coverageItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  coverageText: {
    fontSize: 16,
    color: '#1A1A1A',
  },
  form: {
    paddingHorizontal: 16,
    paddingVertical: 24,
    gap: 24,
  },
  inputGroup: {
    gap: 8,
  },
  label: {
    fontSize: 16,
    color: '#333333',
    fontFamily: fonts.regular,
  },
  input: {
    borderWidth: 1,
    borderColor: colors.border,
    borderRadius: 12,
    padding: 16,
    fontSize: 16,
    fontFamily: fonts.regular,
    backgroundColor: '#FFFFFF',
    color: '#333333',
  },
  footer: {
    paddingHorizontal: 16,
    paddingVertical: 24,
    borderTopWidth: 1,
    borderTopColor: colors.border,
    backgroundColor: '#FFFFFF',
  },
  payButton: {
    backgroundColor: '#4B76E5',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    ...shadows.card
  },
  payButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontFamily: fonts.bold,
    fontWeight: '600',
    textAlign: 'center'
  },
  payButtonDisabled: {
    backgroundColor: '#A0B8F3',
  },
  errorText: {
    color: '#FF3B30',
    textAlign: 'center',
    marginTop: 8,
    marginBottom: 16,
  },
});

export default function CheckoutScreen() {
  const params = useLocalSearchParams();
  const selectedPlan = JSON.parse(params.plan as string);

  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    phone: '',
    dateOfBirth: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const buttonScale = useSharedValue(1);

  const buttonStyle = useAnimatedStyle(() => ({
    transform: [{ scale: withSpring(buttonScale.value) }]
  }));

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const isFormValid = () => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const phoneRegex = /^\+?[\d\s-]{10,}$/;
    const dateRegex = /^(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01])\/\d{4}$/;

    return (
      formData.fullName.length > 2 &&
      emailRegex.test(formData.email) &&
      phoneRegex.test(formData.phone) &&
      dateRegex.test(formData.dateOfBirth)
    );
  };

  const handlePayment = async () => {
    buttonScale.value = 0.95;
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    setIsLoading(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 2000));
      router.push({
        pathname: '/payment-success',
        params: { planId: selectedPlan.id },
        animationEffect: {
          type: 'scale_fade',
          duration: 500
        }
      });
    } catch (err) {
      setError('Payment failed. Please try again.');
    } finally {
      setIsLoading(false);
      buttonScale.value = 1;
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'} 
        style={{ flex: 1 }}>
        <ScrollView style={styles.scrollView}>
          <View style={styles.header}>
            <TouchableOpacity onPress={() => router.back()} style={styles.backButton}>
              <Ionicons name="arrow-back" size={24} color={colors.text.primary} />
            </TouchableOpacity>
            <ThemedText style={styles.title}>Checkout</ThemedText>
          </View>

          <View style={styles.planSummary}>
            <ThemedText style={styles.providerName}>{selectedPlan.provider}</ThemedText>
            <ThemedText style={styles.price}>${selectedPlan.price}</ThemedText>
            <View style={styles.coverageList}>
              {Object.entries(selectedPlan.coverage).map(([key, value]) => (
                <View key={key} style={styles.coverageItem}>
                  <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                  <ThemedText style={styles.coverageText}>
                    {`${key.replace(/([A-Z])/g, ' $1').trim()}: ${typeof value === 'number' ? `$${value.toLocaleString()}` : value.toString()}`}
                  </ThemedText>
                </View>
              ))}
            </View>
          </View>

          <View style={styles.form}>
            <View style={styles.inputGroup}>
              <ThemedText style={styles.label}>Full Name</ThemedText>
              <TextInput
                style={styles.input}
                value={formData.fullName}
                onChangeText={(value) => handleInputChange('fullName', value)}
                placeholder="Enter your full name"
                placeholderTextColor="#A0A0A0"
                returnKeyType="next"
                autoFocus={true}
              />
            </View>

            <View style={styles.inputGroup}>
              <ThemedText style={styles.label}>Email</ThemedText>
              <TextInput
                style={styles.input}
                value={formData.email}
                onChangeText={(value) => handleInputChange('email', value)}
                placeholder="Enter your email"
                placeholderTextColor="#A0A0A0"
                keyboardType="email-address"
                autoCapitalize="none"
                returnKeyType="next"
              />
            </View>

            <View style={styles.inputGroup}>
              <ThemedText style={styles.label}>Phone Number</ThemedText>
              <TextInput
                style={styles.input}
                value={formData.phone}
                onChangeText={(value) => handleInputChange('phone', value)}
                placeholder="Enter your phone number"
                placeholderTextColor="#A0A0A0"
                keyboardType="phone-pad"
                returnKeyType="next"
              />
            </View>

            <View style={styles.inputGroup}>
              <ThemedText style={styles.label}>Date of Birth</ThemedText>
              <TextInput
                style={styles.input}
                value={formData.dateOfBirth}
                onChangeText={(value) => handleInputChange('dateOfBirth', value)}
                placeholder="MM/DD/YYYY"
                placeholderTextColor="#A0A0A0"
                returnKeyType="done"
              />
            </View>
          </View>

          {error ? <ThemedText style={styles.errorText}>{error}</ThemedText> : null}
        </ScrollView>

        <View style={styles.footer}>
          <TouchableOpacity
            onPress={handlePayment}
            activeOpacity={0.8}
            disabled={!isFormValid() || isLoading}
            accessibilityLabel="Pay Now"
            accessibilityRole="button"
          >
            <Animated.View style={[
              styles.payButton,
              !isFormValid() && styles.payButtonDisabled,
              buttonStyle
            ]}>
              {isLoading ? (
                <ActivityIndicator color="#fff" />
              ) : (
                <ThemedText style={styles.payButtonText}>Pay ${selectedPlan.price}</ThemedText>
              )}
            </Animated.View>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}
