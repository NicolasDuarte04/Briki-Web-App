We are ready to fully rebuild and unify the authentication system (UI + backend) for Briki. Based on your diagnosis and everything we’ve tested, here’s the complete prompt for what to fix and how to structure the new flow:

---

## CORE GOAL:
Create a **single, unified, responsive authentication component** with tab-based Login and Sign Up. The UI must be consistent in style, spacing, and functionality. Everything must use **email-based authentication only** — no legacy username support.

---

## PRIORITY AREAS:

### 1. UI CONSISTENCY
- Use a **shared AuthCard layout** with two tabs: "Log In" and "Sign Up"
- Ensure both tabs render with identical **width, padding, and elevation**
- Add **real-time field validation feedback**, with:
  - Green checkmarks for valid fields
  - Red messages below invalid ones
  - Clean success states
- Include **subtle animations** between tabs
- Match styling with the Briki landing page typography, buttons, and blue gradient

### 2. AUTHENTICATION LOGIC
- Fully **remove support for usernames** on both client and server
- Use only **email + password** (or Google OAuth)
- Ensure backend uses Drizzle ORM correctly — **no more db.query.raw**
- **Fix createUser and login logic** so:
  - Email is checked for duplicates
  - Password meets frontend strength rules
  - Server matches frontend validation (length, uppercase, number, lowercase)
- Confirm password logic must match across all routes

### 3. GOOGLE AUTH
- Ensure existing logic works with:
  - `https://brikiapp.com/api/auth/callback/google`
  - `http://localhost:5000/api/auth/callback/google`
- Show clear messaging if a user tries to use email login for a Google account
- Avoid storing Google profile JSON in the wrong column (use proper mapping)

### 4. ERROR MESSAGING & FEEDBACK
- Improve error handling:
  - “Email already in use”
  - “Invalid email or password”
  - “This account was created with Google”
- Use **FormMessage** and **toast** components properly
- Avoid vague messages like "Registration failed" or "Invalid credentials"

### 5. SESSION HANDLING
- Ensure consistent JWT token usage
- Auth state must persist properly across page reloads
- Avoid excessive logging in production

### 6. FORGOT PASSWORD
- Fully implement a basic forgot password flow:
  - Input field for email
  - Server-side endpoint to send a reset email (mock implementation OK for now)
  - Success/failure confirmation toast

---

## TECHNICAL CHECKPOINTS
- Ensure **auth schema** matches the actual database (no extra fields like firstName, lastName, etc.)
- Fix all mismatches in `shared/schema.ts` vs database columns
- Confirm compatibility between **user accounts** and **company users** in Copilot (avoid role confusion or auth namespace overlap)

---

## FINAL DELIVERABLE
- Fully working signup, login, and Google login
- Same visual size and styling for both tabs
- Clean, responsive layout on mobile and desktop
- Clear, helpful validation and error messages
- Tested and deployed version with screenshots showing:
  - Successful sign-up
  - Successful login
  - Google login
  - Error cases

Let me know if we need to drop any legacy code or do a clean migration for part of the auth logic. The goal is a clean, modern, high-conversion authentication system that’s 100% reliable.