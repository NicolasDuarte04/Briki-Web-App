Absolutely. Here’s a powerful, structured prompt to give your agent that tackles all three urgent areas: real data integration, context memory fixes, and OpenAI fallback issues — while preserving your modular workflow:

⸻

🧠 Briki AI – Phase 1 Stability Fix Prompt

Please help us fully stabilize the Briki AI Assistant by implementing the following three critical fixes. Do not edit the live app directly — instead, provide the updated code blocks through chat so we can review and integrate them manually.

⸻

✅ Fix 1: Real Insurance Plan Integration

Goal: Ensure the assistant stops relying on mock responses and pulls actual plans.

Actions:
	1.	Diagnose and fix any 500 backend errors related to /data-loader.ts, insurance-plans.ts, or getPlans() in openai-service.ts.
	2.	Ensure that generateAssistantResponse() receives real plans from the server’s /data/[category]/*.json structure.
	3.	Validate that createEnrichedContext() and createSystemPrompt() correctly embed plan summaries in the prompt sent to OpenAI.

⸻

✅ Fix 2: Context + Memory Persistence

Goal: Ensure the assistant remembers previous messages and recommendations across 3+ message turns.

Actions:
	1.	Review how conversationHistory is built in NewBrikiAssistant.tsx — update the message filtering logic to include prior assistant responses and previous plan recommendations.
	2.	Modify the system prompt logic to include previously suggested plans (i.e., inject them into conversationHistory or systemMessage.content).
	3.	Ensure that extractContextFromMessage() accumulates user details across multiple turns, instead of resetting with each message.

⸻

✅ Fix 3: OpenAI Fallback Behavior

Goal: Ensure fallback to getMockResponse() only happens when absolutely necessary (i.e., OpenAI is unreachable).

Actions:
	1.	Add a clear condition in openai-service.ts:

if (!process.env.OPENAI_API_KEY || OpenAI service is unreachable) {
  return getMockResponse();
}


	2.	Add a warning log when fallback is triggered so we can monitor if/when OpenAI is failing.
	3.	Ensure that if useRealAI is true, fallback only occurs if an actual error is thrown from OpenAI.

⸻

✅ Additional Context for the Fix
	•	The current system forgets the plan history after just 1–2 messages, breaking comparisons.
	•	Users asking “¿Cuál es el mejor plan?” or “¿Cuál me conviene más?” don’t receive contextual answers, even when plans were shown seconds earlier.
	•	Real insurance plans load on server start (✅), but they are not flowing through to the assistant correctly (❌).
	•	You’ve already created a clean architecture (NewBrikiAssistant.tsx, context-utils.ts, WelcomeCard.tsx) — preserve this structure.

⸻

Please return:
	•	Updated code for generateAssistantResponse(), createSystemPrompt(), and conversationHistory logic
	•	Any required utility changes (e.g., context-utils.ts)
	•	A brief explanation of how each fix was applied and tested

Let me know when you’re ready to proceed, and I’ll review and integrate each piece step by step.

⸻

Would you like me to deliver this prompt to the agent, or will you paste it yourself?