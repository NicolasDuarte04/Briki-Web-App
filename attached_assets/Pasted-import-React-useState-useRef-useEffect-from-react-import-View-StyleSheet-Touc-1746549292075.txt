import React, { useState, useRef, useEffect } from 'react';
import { 
  View, 
  StyleSheet, 
  TouchableOpacity, 
  Platform,
  ScrollView,
  KeyboardAvoidingView,
  ActivityIndicator,
  Animated,
  SafeAreaView,
  Modal,
  FlatList,
  TextInput as RNTextInput
} from 'react-native';
import { TextInput } from 'react-native-paper';
import { useRouter } from 'expo-router';
import { format } from 'date-fns';
import { ThemedText } from '../components/ThemedText';
import { Ionicons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';
import { StatusBar } from 'expo-status-bar';
import { LinearGradient } from 'expo-linear-gradient';
import countries from '@/data/countries';

const COVERAGE_OPTIONS = [
  { id: 'medical', label: 'Medical Coverage' },
  { id: 'cancellation', label: 'Trip Cancellation' },
  { id: 'baggage', label: 'Baggage Loss' },
  { id: 'delay', label: 'Trip Delay' },
];

// Country Picker Modal Component
function CountryPickerModal({ 
  visible, 
  onClose, 
  onSelectCountry, 
  currentSelection,
  title = 'Select Country'
}) {
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredCountries, setFilteredCountries] = useState(countries);

  useEffect(() => {
    if (visible) {
      setSearchQuery('');
      setFilteredCountries(countries);
    }
  }, [visible]);

  useEffect(() => {
    if (searchQuery.trim() === '') {
      setFilteredCountries(countries);
    } else {
      const query = searchQuery.toLowerCase();
      const filtered = countries.filter(
        country => country.name.toLowerCase().includes(query) || 
                  country.code.toLowerCase().includes(query)
      );
      setFilteredCountries(filtered);
    }
  }, [searchQuery]);

  return (
    <Modal
      visible={visible}
      animationType="slide"
      transparent={true}
      onRequestClose={onClose}
    >
      <SafeAreaView style={styles.modalContainer}>
        <View style={styles.modalContent}>
          <View style={styles.modalHeader}>
            <TouchableOpacity style={styles.modalCloseButton} onPress={onClose}>
              <Ionicons name="close" size={24} color="#1A1A1A" />
            </TouchableOpacity>
            <ThemedText style={styles.modalTitle}>{title}</ThemedText>
            <View style={{ width: 44 }} /> {/* Balance space */}
          </View>

          <View style={styles.searchContainer}>
            <Ionicons name="search" size={20} color="#666666" style={styles.searchIcon} />
            <RNTextInput
              style={styles.searchInput}
              placeholder="Search countries..."
              placeholderTextColor="#999999"
              value={searchQuery}
              onChangeText={setSearchQuery}
              autoCapitalize="none"
              autoCorrect={false}
              clearButtonMode="while-editing"
            />
            {searchQuery.length > 0 && (
              <TouchableOpacity onPress={() => setSearchQuery('')} style={styles.clearButton}>
                <Ionicons name="close-circle" size={18} color="#999999" />
              </TouchableOpacity>
            )}
          </View>

          {filteredCountries.length > 0 ? (
            <FlatList
              data={filteredCountries}
              keyExtractor={(item) => item.code}
              renderItem={({ item }) => (
                <TouchableOpacity
                  style={[
                    styles.countryItem,
                    currentSelection === item.code && styles.selectedCountryItem
                  ]}
                  onPress={() => {
                    onSelectCountry(item);
                    onClose();
                  }}
                >
                  <View style={styles.countryCode}>
                    <ThemedText style={styles.countryCodeText}>
                      {item.code}
                    </ThemedText>
                  </View>
                  <ThemedText style={styles.countryName}>{item.name}</ThemedText>
                  {currentSelection === item.code && (
                    <Ionicons name="checkmark" size={22} color="#4B76E5" />
                  )}
                </TouchableOpacity>
              )}
              showsVerticalScrollIndicator={false}
              contentContainerStyle={styles.countryList}
              initialNumToRender={20}
              maxToRenderPerBatch={20}
              windowSize={10}
            />
          ) : (
            <View style={styles.noResultsContainer}>
              <Ionicons name="search-outline" size={48} color="#CCCCCC" />
              <ThemedText style={styles.noResultsText}>No countries found</ThemedText>
              <ThemedText style={styles.noResultsSubText}>Try a different search term</ThemedText>
            </View>
          )}
        </View>
      </SafeAreaView>
    </Modal>
  );
}

// Country Selector Component
function CountrySelector({ 
  label, 
  value, 
  onChange, 
  placeholder = 'Select Country',
  modalTitle
}) {
  const [modalVisible, setModalVisible] = useState(false);
  const selectedCountry = countries.find(country => country.code === value);

  return (
    <View style={styles.countryContainer}>
      <ThemedText style={styles.inputLabel}>{label}</ThemedText>

      <TouchableOpacity 
        style={styles.countrySelector}
        onPress={() => setModalVisible(true)}
        activeOpacity={0.7}
      >
        {selectedCountry ? (
          <ThemedText style={styles.selectedCountryText}>
            {selectedCountry.name}
          </ThemedText>
        ) : (
          <ThemedText style={styles.placeholderText}>{placeholder}</ThemedText>
        )}
        <Ionicons name="chevron-down" size={20} color="#4B76E5" />
      </TouchableOpacity>

      <CountryPickerModal
        visible={modalVisible}
        onClose={() => setModalVisible(false)}
        onSelectCountry={(country) => onChange(country.code)}
        currentSelection={value}
        title={modalTitle || label}
      />
    </View>
  );
}

export default function TripInfoScreen() {
  const router = useRouter();
  const [originCountry, setOriginCountry] = useState('');
  const [destinationCountry, setDestinationCountry] = useState('');
  const [departureDate, setDepartureDate] = useState(new Date());
  const [returnDate, setReturnDate] = useState(
    new Date(new Date().setDate(new Date().getDate() + 7))
  );
  const [travelers, setTravelers] = useState(1);
  const [primaryAge, setPrimaryAge] = useState('');
  const [ageError, setAgeError] = useState('');
  const [hasMedicalConditions, setHasMedicalConditions] = useState(false);
  const [coveragePriorities, setCoveragePriorities] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState({
    departure: false,
    return: false
  });

  // Animation
  const buttonScale = useRef(new Animated.Value(1)).current;
  const scrollViewRef = useRef(null);

  const handleDateChange = (type, date) => {
    if (!date) return;

    if (type === 'departure') {
      setDepartureDate(date);
      // If return date is before the new departure date, adjust it
      if (returnDate < date) {
        // Set return date to departure date + 1 day
        const newReturnDate = new Date(date);
        newReturnDate.setDate(date.getDate() + 1);
        setReturnDate(newReturnDate);
      }
    } else {
      setReturnDate(date);
    }
    setShowDatePicker({ departure: false, return: false });
  };

  const validateAge = (text) => {
    const numeric = text.replace(/[^0-9]/g, '');
    const numValue = parseInt(numeric, 10);

    if (numeric === '') {
      setAgeError('');
      return numeric;
    }

    if (isNaN(numValue)) {
      setAgeError('Please enter a valid age');
      return primaryAge;
    }

    if (numValue > 120) {
      setAgeError('Age cannot exceed 120');
      return primaryAge;
    }

    if (numValue < 1) {
      setAgeError('Age must be at least 1');
      return primaryAge;
    }

    setAgeError('');
    return numeric;
  };

  const isFormValid = () => {
    return originCountry && 
           destinationCountry && 
           departureDate && 
           returnDate && 
           (!primaryAge || !ageError); // Allow empty age but not invalid age
  };

  useEffect(() => {
    // Button animation when form validity changes
    Animated.spring(buttonScale, {
      toValue: isFormValid() ? 1 : 0.97,
      useNativeDriver: true,
      friction: 8,
    }).start();
  }, [originCountry, destinationCountry, departureDate, returnDate, primaryAge, ageError]);

  const onContinue = async () => {
    if (!isFormValid()) return;

    Animated.sequence([
      Animated.timing(buttonScale, {
        toValue: 0.95,
        duration: 100,
        useNativeDriver: true,
      }),
      Animated.timing(buttonScale, {
        toValue: 1,
        duration: 100,
        useNativeDriver: true,
      }),
    ]).start();

    setIsLoading(true);
    try {
      router.push({
        pathname: '/available-plans',
        params: {
          fromCountry: originCountry,
          toCountry: destinationCountry,
          departureDate: departureDate.toISOString(),
          returnDate: returnDate.toISOString(),
          travelers: travelers.toString(),
          primaryAge,
          hasMedicalConditions: hasMedicalConditions ? '1' : '0',
          coveragePriorities: coveragePriorities.join(',')
        }
      });
    } finally {
      setIsLoading(false);
    }
  };

  const renderDatePicker = (type) => {
    const date = type === 'departure' ? departureDate : returnDate;
    const show = type === 'departure' ? showDatePicker.departure : showDatePicker.return;

    return (
      <View style={styles.datePickerContainer}>
        <ThemedText style={styles.inputLabel}>
          {type === 'departure' ? 'Departure Date' : 'Return Date'}
        </ThemedText>
        <TouchableOpacity 
          style={styles.dateInputContainer}
          onPress={() => {
            // Close other date picker if open
            setShowDatePicker({
              departure: type === 'departure' ? !showDatePicker.departure : false,
              return: type === 'return' ? !showDatePicker.return : false
            });

            // Scroll to make date picker visible if opened
            if (type === 'return' && !showDatePicker.return) {
              setTimeout(() => {
                scrollViewRef.current?.scrollToEnd({ animated: true });
              }, 100);
            }
          }}
          activeOpacity={0.7}>
          <View style={styles.dateContent}>
            <ThemedText style={styles.dateText}>
              {format(date, 'MMM dd, yyyy')}
            </ThemedText>
            <Ionicons 
              name="calendar-outline" 
              size={22} 
              color="#4B76E5" 
              style={styles.calendarIcon} 
            />
          </View>
        </TouchableOpacity>

        {Platform.OS !== 'web' && show && (
          <View style={styles.nativeDatePickerContainer}>
            <DateTimePicker
              value={date}
              mode="date"
              display={Platform.OS === 'ios' ? "inline" : "default"}
              onChange={(event, selectedDate) => {
                handleDateChange(type, selectedDate);
              }}
              minimumDate={
                type === 'return' 
                  ? new Date(departureDate.getTime() + 86400000) // departure + 1 day
                  : new Date()
              }
            />
          </View>
        )}

        {Platform.OS === 'web' && show && (
          <input
            type="date"
            value={format(date, 'yyyy-MM-dd')}
            min={
              type === 'return' 
                ? format(new Date(departureDate.getTime() + 86400000), 'yyyy-MM-dd')
                : format(new Date(), 'yyyy-MM-dd')
            }
            onChange={(e) => {
              const newDate = new Date(e.target.value);
              handleDateChange(type, newDate);
            }}
            style={styles.webDateInput}
          />
        )}
      </View>
    );
  };

  const toggleCoveragePriority = (id) => {
    setCoveragePriorities(prev => 
      prev.includes(id)
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  return (
    <SafeAreaView style={styles.safeArea}>
      <StatusBar style="dark" />
      <ScrollView 
        ref={scrollViewRef}
        style={styles.container} 
        contentContainerStyle={styles.scrollContentContainer}
      >
        <KeyboardAvoidingView 
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardAvoidingView}
        >
          <View style={styles.content}>
            <View style={styles.headerContainer}>
              <TouchableOpacity 
                style={styles.backButton}
                onPress={() => router.back()}
              >
                <Ionicons name="chevron-back" size={24} color="#4B76E5" />
              </TouchableOpacity>
              <ThemedText style={styles.header}>Trip Details</ThemedText>
            </View>

            <View style={styles.form}>
              <View style={styles.section}>
                <ThemedText style={styles.sectionLabel}>Origin & Destination</ThemedText>

                <CountrySelector
                  label="Country of Origin"
                  value={originCountry}
                  onChange={setOriginCountry}
                  placeholder="Select your country"
                  modalTitle="Select Origin Country"
                />

                <CountrySelector
                  label="Destination"
                  value={destinationCountry}
                  onChange={setDestinationCountry}
                  placeholder="Select destination country"
                  modalTitle="Select Destination Country"
                />
              </View>

              <View style={styles.section}>
                <ThemedText style={styles.sectionLabel}>Travel Dates</ThemedText>
                {renderDatePicker('departure')}
                {renderDatePicker('return')}
              </View>

              <View style={styles.section}>
                <ThemedText style={styles.sectionLabel}>Travelers</ThemedText>
                <ThemedText style={styles.travelerCountLabel}>Number of Travelers</ThemedText>
                <View style={styles.counterContainer}>
                  <TouchableOpacity
                    style={[styles.counterButton, travelers <= 1 && styles.counterButtonDisabled]}
                    onPress={() => setTravelers(Math.max(1, travelers - 1))}
                    disabled={travelers <= 1}
                    activeOpacity={0.7}>
                    <Ionicons name="remove" size={20} color="#FFFFFF" />
                  </TouchableOpacity>
                  <ThemedText style={styles.counterText}>{travelers}</ThemedText>
                  <TouchableOpacity
                    style={styles.counterButton}
                    onPress={() => setTravelers(travelers + 1)}
                    activeOpacity={0.7}>
                    <Ionicons name="add" size={20} color="#FFFFFF" />
                  </TouchableOpacity>
                </View>
              </View>

              <View style={styles.section}>
                <ThemedText style={styles.sectionLabel}>Primary Traveler Details</ThemedText>
                <View style={styles.inputContainer}>
                  <ThemedText style={styles.inputLabel}>Age</ThemedText>
                  <TextInput
                    mode="outlined"
                    value={primaryAge}
                    onChangeText={text => {
                      const validatedAge = validateAge(text);
                      setPrimaryAge(validatedAge);
                    }}
                    keyboardType="number-pad"
                    style={styles.textInput}
                    placeholder="Enter primary traveler's age"
                    placeholderTextColor="#A0A0A0"
                    outlineColor={ageError ? "#FF3B30" : "#CCCCCC"}
                    activeOutlineColor={ageError ? "#FF3B30" : "#4B76E5"}
                    contentStyle={styles.inputContent}
                    error={!!ageError}
                  />
                  {ageError ? (
                    <ThemedText style={styles.errorText}>{ageError}</ThemedText>
                  ) : null}
                </View>

                <View style={styles.toggleContainer}>
                  <View>
                    <ThemedText style={styles.toggleLabel}>Pre-existing Medical Conditions</ThemedText>
                    <ThemedText style={styles.toggleDescription}>
                      This affects coverage eligibility
                    </ThemedText>
                  </View>
                  <TouchableOpacity
                    style={[
                      styles.switchTrack,
                      hasMedicalConditions && styles.switchTrackActive
                    ]}
                    activeOpacity={0.8}
                    onPress={() => setHasMedicalConditions(!hasMedicalConditions)}
                  >
                    <Animated.View 
                      style={[
                        styles.switchThumb,
                        hasMedicalConditions && styles.switchThumbActive
                      ]} 
                    />
                  </TouchableOpacity>
                </View>
              </View>

              <View style={[styles.section, styles.lastSection]}>
                <ThemedText style={styles.sectionLabel}>Coverage Priorities</ThemedText>
                <ThemedText style={styles.coverageDescription}>
                  Select what matters most for your coverage
                </ThemedText>
                {COVERAGE_OPTIONS.map(option => (
                  <TouchableOpacity
                    key={option.id}
                    style={styles.checkboxContainer}
                    onPress={() => toggleCoveragePriority(option.id)}
                    activeOpacity={0.7}
                  >
                    <View style={[
                      styles.checkbox,
                      coveragePriorities.includes(option.id) && styles.checkboxSelected
                    ]}>
                      {coveragePriorities.includes(option.id) && (
                        <Ionicons name="checkmark" size={16} color="#FFFFFF" />
                      )}
                    </View>
                    <ThemedText style={styles.checkboxLabel}>{option.label}</ThemedText>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          </View>
        </KeyboardAvoidingView>
      </ScrollView>

      <View style={styles.footer}>
        <Animated.View style={[
          styles.buttonContainer, 
          { transform: [{ scale: buttonScale }] }
        ]}>
          <TouchableOpacity
            style={[
              styles.continueButton,
              !isFormValid() && styles.buttonDisabled
            ]}
            onPress={onContinue}
            disabled={!isFormValid() || isLoading}
            activeOpacity={0.8}
          >
            <LinearGradient
              colors={isFormValid() ? ['#4B76E5', '#3D68D8'] : ['#CCCCCC', '#BBBBBB']}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
              style={styles.buttonGradient}
            >
              {isLoading ? (
                <ActivityIndicator color="#FFFFFF" />
              ) : (
                <>
                  <ThemedText style={styles.buttonText}>Find Insurance Plans</ThemedText>
                  <Ionicons name="arrow-forward" size={20} color="#FFFFFF" style={styles.buttonIcon} />
                </>
              )}
            </LinearGradient>
          </TouchableOpacity>
        </Animated.View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#F8F8FA',
  },
  container: {
    flex: 1,
  },
  scrollContentContainer: {
    flexGrow: 1,
    paddingBottom: 20,
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  content: {
    flex: 1,
    padding: 24,
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 28,
    paddingTop: 10,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  header: {
    fontSize: 28,
    fontWeight: '700',
    color: '#1A1A1A',
  },
  form: {
    flex: 1,
  },
  section: {
    marginBottom: 28,
  },
  lastSection: {
    marginBottom: 40,
  },
  sectionLabel: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1A1A1A',
    marginBottom: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  inputLabel: {
    fontSize: 16,
    color: '#666666',
    marginBottom: 10,
    fontFamily: 'Inter_400Regular',
  },
  travelerCountLabel: {
    fontSize: 17,
    color: '#1A1A1A',
    marginBottom: 10,
    fontWeight: '500',
    fontFamily: 'Inter_400Regular',
  },
  // Country selector styles
  countryContainer: {
    marginBottom: 20,
  },
  countrySelector: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    borderWidth: 1,
    borderColor: '#CCCCCC',
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 16,
    backgroundColor: '#FFFFFF',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  selectedCountryText: {
    fontSize: 17,
    color: '#1A1A1A',
    fontFamily: 'Inter_400Regular',
  },
  placeholderText: {
    fontSize: 17,
    color: '#999999',
    fontFamily: 'Inter_400Regular',
  },
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    flex: 1,
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    marginTop: 60,
    overflow: 'hidden',
  },
  modalHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#EEEEEE',
  },
  modalCloseButton: {
    marginRight: 15,
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#F5F5F5',
    alignItems: 'center',
    justifyContent: 'center',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1A1A1A',
    fontFamily: 'Inter_600SemiBold',
    flex: 1,
    textAlign: 'center',
    marginRight: 40,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    borderRadius: 12,
    paddingHorizontal: 10,
    margin: 16,
    height: 46,
  },
  searchIcon: {
    marginRight: 8,
  },
  searchInput: {
    flex: 1,
    height: 46,
    color: '#1A1A1A',
    fontSize: 16,
    fontFamily: 'Inter_400Regular',
  },
  clearButton: {
    padding: 5,
  },
  countryList: {
    paddingHorizontal: 16,
    paddingBottom: 40,
  },
  countryItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 14,
    paddingHorizontal: 12,
    borderBottomWidth: 1,
    borderBottomColor: '#F5F5F5',
  },
  selectedCountryItem: {
    backgroundColor: 'rgba(75, 118, 229, 0.05)',
  },
  countryCode: {
    width: 40,
    height: 40,
    borderRadius: 4,
    backgroundColor: '#F5F5F5',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  countryCodeText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#4B76E5',
    fontFamily: 'Inter_600SemiBold',
  },
  countryName: {
    fontSize: 16,
    color: '#1A1A1A',
    fontFamily: 'Inter_400Regular',
    flex: 1,
  },
  noResultsContainer: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 60,
  },
  noResultsText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1A1A1A',
    marginTop: 16,
    fontFamily: 'Inter_600SemiBold',
  },
  noResultsSubText: {
    fontSize: 16,
    color: '#666666',
    marginTop: 8,
    fontFamily: 'Inter_400Regular',
  },
  // Date picker
  datePickerContainer: {
    marginBottom: 20,
  },
  dateInputContainer: {
    borderWidth: 1,
    borderColor: '#CCCCCC',
    borderRadius: 12,
    padding: 16,
    backgroundColor: '#FFFFFF',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  dateContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
  },
  dateText: {
    fontSize: 17,
    color: '#1A1A1A',
    fontFamily: 'Inter_400Regular',
  },
  calendarIcon: {
    marginLeft: 8,
  },
  nativeDatePickerContainer: {
    marginTop: 12,
  },
  webDateInput: {
    marginTop: 12,
    padding: 16,
    borderWidth: 1,
    borderColor: '#CCCCCC',
    borderRadius: 12,
    fontSize: 17,
    fontFamily: 'Inter_400Regular',
  },
  // Counter
  counterContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 5,
  },
  counterButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#4B76E5',
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  counterButtonDisabled: {
    backgroundColor: '#CCCCCC',
    shadowOpacity: 0.1,
  },
  counterText: {
    fontSize: 22,
    fontWeight: '500',
    paddingHorizontal: 24,
    color: '#1A1A1A',
    fontFamily: 'Inter_600SemiBold',
  },
  // Text inputs
  inputContainer: {
    marginBottom: 20,
  },
  textInput: {
    backgroundColor: '#FFFFFF',
    height: 56,
    borderRadius: 12,
    fontSize: 17,
  },
  inputContent: {
    fontSize: 17,
    fontFamily: 'Inter_400Regular',
    padding: 16,
  },
  errorText: {
    color: '#FF3B30',
    fontSize: 14,
    marginTop: 4,
    marginLeft: 4,
    fontFamily: 'Inter_400Regular',
  },
  // Toggle
  toggleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 12,
    backgroundColor: '#FFFFFF',
    padding: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#CCCCCC',
  },
  toggleLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: '#1A1A1A',
    marginBottom: 4,
    fontFamily: 'Inter_600SemiBold',
  },
  toggleDescription: {
    fontSize: 14,
    color: '#666666',
    fontFamily: 'Inter_400Regular',
  },
  switchTrack: {
    width: 51,
    height: 31,
    borderRadius: 16,
    backgroundColor: '#E5E5EA',
    padding: 2,
  },
  switchTrackActive: {
    backgroundColor: '#4B76E5',
  },
  switchThumb: {
    width: 27,
    height: 27,
    borderRadius: 14,
    backgroundColor: '#FFFFFF',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.2,
    shadowRadius: 2,
    elevation: 2,
  },
  switchThumbActive: {
    transform: [{ translateX: 20 }],
  },
  // Coverage priorities
  coverageDescription: {
    fontSize: 15,
    color: '#666666',
    marginBottom: 16,
    fontFamily: 'Inter_400Regular',
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 16,
    backgroundColor: '#FFFFFF',
    padding: 14,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#CCCCCC',
  },
  checkbox: {
    width: 24,
    height: 24,
    borderRadius: 6,
    borderWidth: 1,
    borderColor: '#CCCCCC',
    backgroundColor: '#FFFFFF',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  checkboxSelected: {
    backgroundColor: '#4B76E5',
    borderColor: '#4B76E5',
  },
  checkboxLabel: {
    fontSize: 16,
    color: '#1A1A1A',
    fontFamily: 'Inter_400Regular',
  },
  // Footer
  footer: {
    padding: 20,
    paddingBottom: Platform.OS === 'ios' ? 34 : 24,
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: 'rgba(0, 0, 0, 0.05)',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.05,
    shadowRadius: 6,
    elevation: 4,
  },
  buttonContainer: {
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 4,
    borderRadius: 16,
    overflow: 'hidden',
  },
  continueButton: {
    borderRadius: 16,
    overflow: 'hidden',
  },
  buttonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 18,
  },
  buttonDisabled: {
    opacity: 0.9,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
    fontFamily: 'Inter_600SemiBold',
  },
  buttonIcon: {
    marginLeft: 10,
  },
});