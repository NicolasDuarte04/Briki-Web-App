// Briki App – Final Cleanup & Pre-Launch Optimization Prompt

Hey, we’re now in the final phase before launch. Thanks again for your work — it’s looking solid.

To complete the polish phase and reduce tech debt, please implement the following refinements:

------------------------------------------------------------

1. ✅ Shared Content Refactor
Goal: Unify repeated strings and content blocks across pages
- Create a new file: `/client/src/constants/sharedContent.ts`
- Move repeated content from explore and insurance pages into shared objects, including:
  • Titles
  • Feature lists
  • CTA subtitles/descriptions
  • Reusable button text
- Import from this shared file in: 
  • /explore/* pages 
  • /insurance/* pages

------------------------------------------------------------

2. ✅ Component Unification
Goal: Avoid duplication and improve consistency
- Create a new reusable component: `/components/common/Hero.tsx`
  • Accepts title, description, gradient, image URL, CTA
  • Used across both explore and insurance pages
- Create `/components/common/FeatureCard.tsx`
  • Standard layout for listing feature blocks

Update all explore pages and insurance pages to use these instead of inline JSX.

------------------------------------------------------------

3. ✅ Console Warning Fixes
- Identify all console warnings (e.g., missing `key` props in `.map()` loops, unused vars)
- Fix them across all explore and insurance-related components

------------------------------------------------------------

4. ✅ Remove Legacy Files
Goal: Clean project structure before handoff
- Delete any deprecated or unused files such as:
  • Older auth screens
  • Outdated versions of the home or trip-info pages
  • Duplicate layout files or unused variants

Please generate a list of removed files in a comment so we can track what was cleaned.

------------------------------------------------------------

5. ✅ Auth-Aware Navigation Hook (optional but helpful)
- Create a reusable hook: `/hooks/useAuthNavigation.ts`
  • Based on `isAuthenticated`, return correct path for categories
  • This can be used in navbars and CTA buttons
  • Example:
    ```ts
    const { getPath } = useAuthNavigation();
    const travelLink = getPath('travel'); // returns '/insurance/travel' or '/explore/travel'
    ```

------------------------------------------------------------

6. ✅ Routing Redirects
- Ensure the following old paths redirect properly:
  • /auto-insurance → /explore/auto
  • /pet-insurance → /explore/pet
  • /health-insurance → /explore/health
  • /insurance-plans → /explore/travel

Implement redirect wrappers or updates in the router config as needed.

------------------------------------------------------------

Once completed, please respond with a brief summary of:

• Files added
• Files removed
• Shared content examples moved
• Components updated
• Any notes on hook creation or remaining issues

We’ll verify and move forward with deployment after this cleanup. Thanks!