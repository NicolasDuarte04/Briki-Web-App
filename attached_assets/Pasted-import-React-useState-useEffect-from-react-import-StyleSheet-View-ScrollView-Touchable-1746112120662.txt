import React, { useState, useEffect } from 'react';
import { StyleSheet, View, ScrollView, TouchableOpacity, SafeAreaView } from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { ThemedText } from '@/components/ThemedText';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withSpring, 
  withTiming 
} from 'react-native-reanimated';
import { Ionicons } from '@expo/vector-icons';

import insurancePlans from './data/insurance-plans';
import * as Haptics from 'expo-haptics';

export default function AvailablePlansScreen() {
  const params = useLocalSearchParams();
  const { fromCountry, toCountry, departureDate, returnDate, travelers } = params;
  const fadeAnim = useSharedValue(0);
  const scaleAnim = useSharedValue(0.95);

  useEffect(() => {
    fadeAnim.value = withTiming(1, { duration: 500 });
    scaleAnim.value = withSpring(1, { damping: 7 });
  }, []);

  const animatedStyle = useAnimatedStyle(() => {
    return {
      opacity: fadeAnim.value,
      transform: [{ scale: scaleAnim.value }]
    };
  });

  const [selectedPlans, setSelectedPlans] = useState<string[]>([]);

  const togglePlanSelection = async (planId: string) => {
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setSelectedPlans(prev => {
      if (prev.includes(planId)) {
        return prev.filter(id => id !== planId);
      }
      // Limit selection to maximum 3 plans
      if (prev.length >= 3) return prev;
      return [...prev, planId];
    });
  };

  const handleComparePlans = () => {
    if (selectedPlans.length < 2) {
      return; // Don't proceed if fewer than 2 plans selected
    }

    router.push({
      pathname: '/compare-plans',
      params: {
        planIds: selectedPlans.join(','),
        fromCountry: fromCountry || 'Origin',
        toCountry: toCountry || 'Destination'
      }
    });
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView 
        style={styles.scrollView} 
        contentContainerStyle={styles.scrollContent}
        keyboardShouldPersistTaps="handled"
        bounces={true}
        showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <ThemedText style={styles.title}>Available Plans</ThemedText>
          <ThemedText style={styles.subtitle}>
            {travelers} {parseInt(travelers) === 1 ? 'Traveler' : 'Travelers'} â€¢ {fromCountry} to {toCountry}
          </ThemedText>
        </View>

        <View style={styles.plansContainer}>
          {insurancePlans.map((plan, index) => (
            <Animated.View 
              key={plan.id} 
              style={[
                styles.planCard,
                selectedPlans.includes(plan.id) && styles.selectedPlanCard,
                animatedStyle
              ]}>
              <View style={styles.planHeader}>
                <ThemedText style={styles.providerName}>{plan.provider}</ThemedText>
                <View style={styles.ratingContainer}>
                  <Ionicons name="star" size={16} color="#FFB800" />
                  <ThemedText style={styles.rating}>{plan.rating}</ThemedText>
                </View>
              </View>

              <View style={styles.coverageContainer}>
                {Object.entries(plan.coverage).map(([key, value], index) => (
                  <View key={index} style={styles.coverageItem}>
                    <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                    <ThemedText style={styles.coverageText}>
                      {`${key.replace(/([A-Z])/g, ' $1')}: ${typeof value === 'number' ? `$${value.toLocaleString()}` : value}`}
                    </ThemedText>
                  </View>
                ))}
              </View>

              <View style={styles.planFooter}>
                <View style={styles.priceContainer}>
                  <ThemedText style={styles.price}>${plan.price}</ThemedText>
                  <ThemedText style={styles.priceSubtext}>per person</ThemedText>
                </View>
                <View style={styles.buttonContainer}>
                  <TouchableOpacity
                    style={styles.buyButton}
                    onPress={() => router.push({
                      pathname: '/checkout',
                      params: { plan: JSON.stringify(plan) }
                    })}
                    accessibilityRole="button"
                    activeOpacity={0.7}>
                    <ThemedText style={styles.buyButtonText}>Select Plan</ThemedText>
                  </TouchableOpacity>
                  <TouchableOpacity 
                    style={[
                      styles.compareToggle,
                      selectedPlans.includes(plan.id) && styles.selectedButton,
                      selectedPlans.length >= 3 && !selectedPlans.includes(plan.id) && styles.disabledButton
                    ]}
                    accessibilityRole="button"
                    activeOpacity={0.7}
                    onPress={async () => {
                      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
                      togglePlanSelection(plan.id);
                    }}
                    activeOpacity={0.7}
                    disabled={selectedPlans.length >= 3 && !selectedPlans.includes(plan.id)}
                    accessibilityRole="button">
                    <Ionicons 
                      name={selectedPlans.includes(plan.id) ? "checkmark-circle" : "add-circle-outline"} 
                      size={24} 
                      color={selectedPlans.includes(plan.id) ? "#4B76E5" : "#666666"} 
                    />
                    <ThemedText style={styles.compareToggleText}>
                      {selectedPlans.includes(plan.id) ? 'Added to Compare' : 'Add to Compare'}
                    </ThemedText>
                  </TouchableOpacity>
                </View>
              </View>
            </Animated.View>
          ))}
        </View>

        </ScrollView>
      {selectedPlans.length >= 2 && (
        <View style={styles.compareButtonContainer}>
          <TouchableOpacity 
            style={styles.compareButton} 
            onPress={handleComparePlans}>
            <ThemedText style={styles.compareButtonText}>
              Compare {selectedPlans.length} Plans
            </ThemedText>
          </TouchableOpacity>
        </View>
      )}
    </SafeAreaView>
  );
}

import { colors, fonts, shadows } from './constants/Styles';

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 24,
  },
  header: {
    marginBottom: 32,
  },
  title: {
    fontSize: 32,
    fontFamily: fonts.bold,
    marginBottom: 8,
    color: colors.text.primary,
  },
  subtitle: {
    fontSize: 16,
    color: colors.text.secondary,
    fontFamily: fonts.regular,
  },
  plansContainer: {
    gap: 24,
  },
  planCard: {
    backgroundColor: colors.background,
    borderRadius: 16,
    padding: 20,
    gap: 20,
    borderWidth: 1,
    borderColor: colors.border,
    ...shadows.card,
  },
  selectedPlanCard: {
    borderColor: colors.primary,
    borderWidth: 2,
    ...shadows.selected,
    backgroundColor: 'rgba(75, 118, 229, 0.05)',
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    gap: 16,
  },
  providerName: {
    fontSize: 26,
    fontFamily: 'Inter_600SemiBold',
    color: '#1C1C1E',
    flex: 1,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 2,
  },
  rating: {
    fontSize: 14,
    lineHeight: 18,
    color: '#666',
    fontFamily: fonts.medium,
  },
  coverageContainer: {
    gap: 14,
  },
  coverageItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  coverageText: {
    fontSize: 15,
    lineHeight: 20,
    color: '#333',
    letterSpacing: -0.24,
  },
  planFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 8,
  },
  priceContainer: {
    gap: 2,
  },
  price: {
    fontSize: 26,
    fontFamily: fonts.bold,
    color: colors.primary,
  },
  priceSubtext: {
    fontSize: 13,
    color: colors.text.secondary,
    fontFamily: fonts.regular,
  },
  buttonContainer: {
    gap: 12,
  },
  buyButton: {
    backgroundColor: '#4B76E5',
    paddingVertical: 14,
    paddingHorizontal: 32,
    borderRadius: 12,
    alignItems: 'center',
    ...shadows.card,
  },
  buyButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontFamily: fonts.bold,
  },
  compareToggle: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    paddingVertical: 8,
  },
  compareToggleText: {
    fontSize: 14,
    color: '#666666',
    fontFamily: fonts.regular,
  },
  selectedButton: {
    opacity: 0.8,
  },
  compareButtonContainer: {
    position: 'absolute',
    bottom: 24,
    left: 24,
    right: 24,
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
    zIndex: 100,
  },
  compareButton: {
    backgroundColor: colors.primary,
    padding: 16,
    borderRadius: 12,
    width: '100%',
    alignItems: 'center',
    ...shadows.card,
  },
  compareButtonText: {
    color: colors.text.light,
    fontSize: 18,
    fontFamily: fonts.bold,
  },
  disabledButton: {
    backgroundColor: '#E5E5EA',
  },
});