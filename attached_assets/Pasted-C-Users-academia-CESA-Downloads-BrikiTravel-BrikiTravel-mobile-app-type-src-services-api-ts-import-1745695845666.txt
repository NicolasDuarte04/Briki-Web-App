C:\Users\academia.CESA\Downloads\BrikiTravel\BrikiTravel\mobile-app>type src\services\api.ts
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// For development, use your local server or the Replit URL
// For production, this would be your deployed API endpoint
import Constants from 'expo-constants';

// Determine if we're running in development mode
const isDevelopment = Constants.manifest?.packagerOpts?.dev || __DEV__;

// Set the API base URL based on environment
const BASE_URL = isDevelopment
  ? 'http://localhost:5000'  // Development - update this with your local IP if testing on a physical device
  : 'https://briki-travel.replit.app'; // Production

console.log('API URL:', BASE_URL);

export const api = axios.create({
  baseURL: BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add auth token
api.interceptors.request.use(
  async (config: any) => {
    try {
      const token = await AsyncStorage.getItem('@Briki:token');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    } catch (error: any) {
      console.error('Error setting auth token:', error);
    }
    return config;
  },
  (error: any) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response: any) => {
    return response;
  },
  async (error: any) => {
    const originalRequest = error.config;

    // If unauthorized and not already retrying
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      // Clear token on auth error
      await AsyncStorage.removeItem('@Briki:token');

      // You could implement token refresh logic here

      return Promise.reject(error);
    }

    return Promise.reject(error);
  }
);
C:\Users\academia.CESA\Downloads\BrikiTravel\BrikiTravel\mobile-app>