import React, { useState } from 'react';
import { 
  View, 
  StyleSheet, 
  TouchableOpacity, 
  Platform,
  ScrollView,
  KeyboardAvoidingView,
  ActivityIndicator
} from 'react-native';
import { TextInput, Button, Switch } from 'react-native-paper';
import RNPickerSelect from 'react-native-picker-select';
import { useRouter } from 'expo-router';
import { format } from 'date-fns';
import { ThemedText } from '@/components/ThemedText';
import { fonts } from './constants/Styles';
import { countries } from './utils/countries';
import { Ionicons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';

const countryOptions = Array.isArray(countries) 
  ? countries.map(country => ({
      label: country.name,
      value: country.code
    }))
  : [];

export default function TripInfoScreen() {
  const router = useRouter();
  const [originCountry, setOriginCountry] = useState('');
  const [destinationCountry, setDestinationCountry] = useState('');
  const [departureDate, setDepartureDate] = useState(new Date());
  const [returnDate, setReturnDate] = useState(new Date());
  const [travelers, setTravelers] = useState(1);
  const [primaryAge, setPrimaryAge] = useState('');
  const [hasMedicalConditions, setHasMedicalConditions] = useState(false);
  const [coveragePriorities, setCoveragePriorities] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState({
    departure: false,
    return: false
  });

  const handleDateChange = (type: 'departure' | 'return', date: Date | undefined) => {
    if (!date) return;

    if (type === 'departure') {
      setDepartureDate(date);
      if (returnDate < date) {
        setReturnDate(date);
      }
    } else {
      setReturnDate(date);
    }
    setShowDatePicker({ departure: false, return: false });
  };

  const isFormValid = () => {
    return originCountry && destinationCountry && departureDate && returnDate;
  };

  const onContinue = async () => {
    if (!isFormValid()) return;

    setIsLoading(true);
    try {
      router.push({
        pathname: '/available-plans',
        params: {
          fromCountry: originCountry,
          toCountry: destinationCountry,
          departureDate: departureDate.toISOString(),
          returnDate: returnDate.toISOString(),
          travelers: travelers.toString(),
          primaryAge,
          hasMedicalConditions: hasMedicalConditions ? '1' : '0',
          coveragePriorities: coveragePriorities.join(',')
        }
      });
    } finally {
      setIsLoading(false);
    }
  };

  const renderDatePicker = (type: 'departure' | 'return') => {
    const date = type === 'departure' ? departureDate : returnDate;
    const show = type === 'departure' ? showDatePicker.departure : showDatePicker.return;

    return (
      <View style={styles.datePickerContainer}>
        <ThemedText style={styles.dateLabel}>
          {type === 'departure' ? 'Departure Date' : 'Return Date'}
        </ThemedText>
        <TouchableOpacity 
          style={styles.dateInputContainer}
          onPress={() => setShowDatePicker(prev => ({
            ...prev,
            [type]: true
          }))}
          activeOpacity={0.7}>
          <View style={styles.dateContent}>
            <ThemedText style={styles.dateText}>
              {format(date, 'MMM dd, yyyy')}
            </ThemedText>
            <Ionicons 
              name="calendar-outline" 
              size={22} 
              color="#4B76E5" 
              style={styles.calendarIcon} 
            />
          </View>
        </TouchableOpacity>

        {Platform.OS !== 'web' && show && (
          <View style={styles.nativeDatePickerContainer}>
            <DateTimePicker
              value={date}
              mode="date"
              display="default"
              onChange={(event, selectedDate) => {
                handleDateChange(type, selectedDate);
              }}
              minimumDate={type === 'return' ? departureDate : new Date()}
            />
          </View>
        )}

        {Platform.OS === 'web' && show && (
          <input
            type="date"
            value={format(date, 'yyyy-MM-dd')}
            min={type === 'return' ? format(departureDate, 'yyyy-MM-dd') : format(new Date(), 'yyyy-MM-dd')}
            onChange={(e) => {
              const newDate = new Date(e.target.value);
              handleDateChange(type, newDate);
            }}
            style={styles.webDateInput}
          />
        )}
      </View>
    );
  };

  const toggleCoveragePriority = (id: string) => {
    setCoveragePriorities(prev => 
      prev.includes(id)
        ? prev.filter(item => item !== id)
        : [...prev, id]
    );
  };

  return (
    <ScrollView style={styles.container} contentContainerStyle={{ paddingBottom: 40 }}>
      <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'}>
        <View style={styles.content}>
          <ThemedText style={styles.header}>Trip Details</ThemedText>

          <View style={styles.form}>
            <View style={styles.section}>
              <ThemedText style={styles.sectionLabel}>Origin & Destination</ThemedText>
              <View style={styles.dropdownContainer}>
                <RNPickerSelect
                  onValueChange={value => setOriginCountry(value || '')}
                  items={countryOptions}
                  value={originCountry || ''}
                  placeholder={{ label: 'Select Origin Country', value: '' }}
                  style={pickerSelectStyles}
                  Icon={() => <Ionicons name="chevron-down-outline" size={20} color="#000" />}
                />
              </View>

              <View style={styles.dropdownContainer}>
                <RNPickerSelect
                  onValueChange={value => setDestinationCountry(value || '')}
                  items={countryOptions}
                  value={destinationCountry || ''}
                  placeholder={{ label: 'Select Destination Country', value: '' }}
                  style={pickerSelectStyles}
                  Icon={() => <Ionicons name="chevron-down-outline" size={20} color="#000" />}
                />
              </View>
            </View>

            <View style={styles.section}>
              <ThemedText style={styles.sectionLabel}>Travel Dates</ThemedText>
              {renderDatePicker('departure')}
              {renderDatePicker('return')}
            </View>

            <View style={styles.section}>
              <ThemedText style={styles.sectionLabel}>Travelers</ThemedText>
              <View style={styles.counterContainer}>
                <TouchableOpacity
                  style={styles.counterButton}
                  onPress={() => setTravelers(Math.max(1, travelers - 1))}
                  activeOpacity={0.7}>
                  <ThemedText style={styles.counterButtonText}>-</ThemedText>
                </TouchableOpacity>
                <ThemedText style={styles.counterText}>{travelers}</ThemedText>
                <TouchableOpacity
                  style={styles.counterButton}
                  onPress={() => setTravelers(travelers + 1)}
                  activeOpacity={0.7}>
                  <ThemedText style={styles.counterButtonText}>+</ThemedText>
                </TouchableOpacity>
              </View>
            </View>

            <View style={styles.section}>
              <ThemedText style={styles.sectionLabel}>Primary Traveler Details</ThemedText>
              <TextInput
                mode="outlined"
                label="Age"
                value={primaryAge}
                onChangeText={setPrimaryAge}
                keyboardType="number-pad"
                style={styles.input}
                placeholder="Enter age"
                placeholderTextColor="#A0A0A0"
              />

              <View style={styles.toggleContainer}>
                <ThemedText style={styles.toggleLabel}>Medical Conditions</ThemedText>
                <Switch
                  value={hasMedicalConditions}
                  onValueChange={setHasMedicalConditions}
                  trackColor={{ false: '#767577', true: '#4B76E5' }}
                />
              </View>
            </View>

            <View style={[styles.section, styles.lastSection]}>
              <ThemedText style={styles.sectionLabel}>Coverage Priorities</ThemedText>
              {COVERAGE_OPTIONS.map(option => (
                <TouchableOpacity
                  key={option.id}
                  style={styles.checkboxContainer}
                  onPress={() => toggleCoveragePriority(option.id)}
                  activeOpacity={0.7}>
                  <View style={[
                    styles.checkbox,
                    coveragePriorities.includes(option.id) && styles.checkboxChecked
                  ]}>
                    {coveragePriorities.includes(option.id) && (
                      <Ionicons name="checkmark" size={16} color="white" />
                    )}
                  </View>
                  <ThemedText style={styles.checkboxLabel}>{option.label}</ThemedText>
                </TouchableOpacity>
              ))}
            </View>

            <TouchableOpacity
              style={[styles.continueButton, !isFormValid() && styles.continueButtonDisabled]}
              onPress={onContinue}
              disabled={!isFormValid() || isLoading}
              activeOpacity={0.7}>
              {isLoading ? (
                <ActivityIndicator color="#FFFFFF" />
              ) : (
                <ThemedText style={styles.continueButtonText}>
                  Find Available Plans
                </ThemedText>
              )}
            </TouchableOpacity>
          </View>
        </View>
      </KeyboardAvoidingView>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  webDateInput: {
    height: 40,
    padding: 10,
    borderRadius: 8,
    border: '1px solid #ccc',
    fontSize: 16,
  },
  container: {
    flex: 1,
    backgroundColor: '#F8F8FA',
  },
  content: {
    paddingHorizontal: 20,
    paddingTop: Platform.OS === 'ios' ? 60 : 20,
  },
  header: {
    ...fonts.bold,
    fontSize: 28,
    marginBottom: 24,
    color: '#000000',
  },
  form: {
    gap: 24,
  },
  section: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
    borderBottomColor: '#E5E5EA',
    borderBottomWidth: 1,
  },
  lastSection: {
    borderBottomWidth: 0,
  },
  sectionLabel: {
    fontSize: 18,
    fontWeight: '600',
    color: '#000000',
    marginBottom: 12,
  },
  dropdownContainer: {
    marginBottom: 12,
    zIndex: 1000,
  },
  datePickerContainer: {
    marginBottom: 20,
  },
  dateLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: '#000000',
    marginBottom: 8,
  },
  dateInputContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    borderColor: '#E5E5EA',
    borderWidth: 1,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  dateContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 12,
    paddingVertical: 14,
  },
  dateText: {
    fontSize: 16,
    color: '#000000',
    flex: 1,
  },
  calendarIcon: {
    marginLeft: 12,
  },
  nativeDatePickerContainer: {
    marginTop: 8,
    marginBottom: 16,
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    overflow: 'hidden',
    ...Platform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 4,
      },
      android: {
        elevation: 2,
      },
    }),
  },
  webDatePickerContainer: {
    marginTop: 8,
  },
  input: {
    backgroundColor: '#FFFFFF',
    marginBottom: 16,
    height: 44,
  },
  counterContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F2F2F7',
    borderRadius: 12,
    padding: 8,
  },
  counterButton: {
    width: 40,
    height: 40,
    backgroundColor: '#4B76E5',
    borderRadius: 20,
    alignItems: 'center',
    justifyContent: 'center',
  },
  counterButtonText: {
    color: '#FFFFFF',
    fontSize: 24,
    fontWeight: 'bold',
  },
  counterText: {
    flex: 1,
    textAlign: 'center',
    fontSize: 18,
    fontWeight: '600',
    color: '#000000',
  },
  toggleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#F2F2F7',
    padding: 16,
    borderRadius: 12,
  },
  toggleLabel: {
    fontSize: 16,
    color: '#000000',
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
  },
  checkbox: {
    width: 24,
    height: 24,
    borderRadius: 6,
    borderWidth: 2,
    borderColor: '#4B76E5',
    marginRight: 12,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#FFFFFF',
  },
  checkboxChecked: {
    backgroundColor: '#4B76E5',
  },
  checkboxLabel: {
    fontSize: 16,
    color: '#000000',
  },
  continueButton: {
    backgroundColor: '#4B76E5',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    marginTop: 24,
  },
  continueButtonDisabled: {
    backgroundColor: '#A0A0A0',
  },
  continueButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
  },
});

const pickerSelectStyles = {
  inputIOS: {
    fontSize: 16,
    paddingVertical: 12,
    paddingHorizontal: 14,
    backgroundColor: '#FFFFFF',
    borderRadius: 10,
    color: '#000000',
    paddingRight: 30,
    height: 44,
    borderWidth: 1,
    borderColor: '#E5E5EA',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
  },
  inputAndroid: {
    fontSize: 16,
    paddingVertical: 12,
    paddingHorizontal: 14,
    backgroundColor: '#FFFFFF',
    borderRadius: 10,
    color: '#000000',
    paddingRight: 30,
    height: 44,
    elevation: 2,
    borderWidth: 1,
    borderColor: '#E5E5EA',
  },
  inputWeb: {
    fontSize: 16,
    paddingVertical: 12,
    paddingHorizontal: 14,
    borderWidth: 1,
    borderColor: '#E5E5EA',
    borderRadius: 10,
    color: '#000000',
    paddingRight: 30,
    height: 44,
    backgroundColor: '#FFFFFF',
    boxShadow: '0px 2px 4px rgba(0, 0, 0, 0.1)',
    position: 'relative',
    zIndex: 1000,
  },
};

const COVERAGE_OPTIONS = [
  { id: 'medical', label: 'Medical Coverage' },
  { id: 'cancellation', label: 'Trip Cancellation' },
  { id: 'baggage', label: 'Baggage Loss' },
  { id: 'delay', label: 'Trip Delay' },
];