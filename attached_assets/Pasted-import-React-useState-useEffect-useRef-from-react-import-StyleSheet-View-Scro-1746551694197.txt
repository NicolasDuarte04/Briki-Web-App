import React, { useState, useEffect, useRef } from 'react';
import { 
  StyleSheet, 
  View, 
  ScrollView, 
  TouchableOpacity, 
  SafeAreaView, 
  Platform, 
  ActivityIndicator,
  Modal,
  FlatList,
  Dimensions
} from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { ThemedText } from '../components/ThemedText';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withSpring, 
  withTiming,
  withSequence,
  withDelay,
  FadeIn,
  FadeInDown,
  FadeInUp,
  SlideInDown
} from 'react-native-reanimated';
import { Ionicons, FontAwesome5 } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';
import { StatusBar } from 'expo-status-bar';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';

// Import plans from the centralized data file with relative import
import { insurancePlans } from './data/insurance-plans';

// Create AnimatedTouchable using Animated.createAnimatedComponent instead of importing createAnimatedComponent directly
const AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);
const AnimatedModal = Animated.createAnimatedComponent(Modal);

// Filter Modal Content
function FilterModal({ visible, onClose, filters, setFilters, onApplyFilters }) {
  const insets = useSafeAreaInsets();
  const { height } = Dimensions.get('window');
  const maxHeight = height * 0.8;

  // Get unique providers from insurance plans for filter options
  const uniqueProviders = [...new Set(insurancePlans.map(plan => plan.provider))];

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <Animated.View 
          entering={SlideInDown.springify()}
          style={[
            styles.modalContent,
            { 
              maxHeight,
              paddingBottom: insets.bottom || 16 
            }
          ]}
        >
          <View style={styles.modalHeader}>
            <View style={styles.modalHandleBar} />
            <ThemedText style={styles.modalTitle}>Filter Plans</ThemedText>
            <TouchableOpacity 
              style={styles.closeButton} 
              onPress={onClose}
            >
              <Ionicons name="close" size={24} color="#1A1A1A" />
            </TouchableOpacity>
          </View>

          <ScrollView style={styles.filterScrollView} showsVerticalScrollIndicator={false}>
            <View style={styles.filterSection}>
              <ThemedText style={styles.filterSectionTitle}>Sort By Price</ThemedText>
              <View style={styles.filterOptions}>
                <TouchableOpacity
                  style={[
                    styles.filterOption,
                    filters.priceSort === 'lowToHigh' && styles.filterOptionSelected
                  ]}
                  onPress={() => setFilters({...filters, priceSort: 'lowToHigh'})}
                >
                  <ThemedText style={[
                    styles.filterOptionText,
                    filters.priceSort === 'lowToHigh' && styles.filterOptionTextSelected
                  ]}>
                    Low to High
                  </ThemedText>
                  {filters.priceSort === 'lowToHigh' && (
                    <Ionicons name="checkmark" size={18} color="#4B76E5" />
                  )}
                </TouchableOpacity>

                <TouchableOpacity
                  style={[
                    styles.filterOption,
                    filters.priceSort === 'highToLow' && styles.filterOptionSelected
                  ]}
                  onPress={() => setFilters({...filters, priceSort: 'highToLow'})}
                >
                  <ThemedText style={[
                    styles.filterOptionText,
                    filters.priceSort === 'highToLow' && styles.filterOptionTextSelected
                  ]}>
                    High to Low
                  </ThemedText>
                  {filters.priceSort === 'highToLow' && (
                    <Ionicons name="checkmark" size={18} color="#4B76E5" />
                  )}
                </TouchableOpacity>
              </View>
            </View>

            <View style={styles.filterSection}>
              <ThemedText style={styles.filterSectionTitle}>Sort By Coverage</ThemedText>
              <View style={styles.filterOptions}>
                <TouchableOpacity
                  style={[
                    styles.filterOption,
                    filters.coverageSort === 'lowToHigh' && styles.filterOptionSelected
                  ]}
                  onPress={() => setFilters({...filters, coverageSort: 'lowToHigh'})}
                >
                  <ThemedText style={[
                    styles.filterOptionText,
                    filters.coverageSort === 'lowToHigh' && styles.filterOptionTextSelected
                  ]}>
                    Low to High
                  </ThemedText>
                  {filters.coverageSort === 'lowToHigh' && (
                    <Ionicons name="checkmark" size={18} color="#4B76E5" />
                  )}
                </TouchableOpacity>

                <TouchableOpacity
                  style={[
                    styles.filterOption,
                    filters.coverageSort === 'highToLow' && styles.filterOptionSelected
                  ]}
                  onPress={() => setFilters({...filters, coverageSort: 'highToLow'})}
                >
                  <ThemedText style={[
                    styles.filterOptionText,
                    filters.coverageSort === 'highToLow' && styles.filterOptionTextSelected
                  ]}>
                    High to Low
                  </ThemedText>
                  {filters.coverageSort === 'highToLow' && (
                    <Ionicons name="checkmark" size={18} color="#4B76E5" />
                  )}
                </TouchableOpacity>
              </View>
            </View>

            <View style={styles.filterSection}>
              <ThemedText style={styles.filterSectionTitle}>Provider</ThemedText>
              <View style={styles.providerFilterOptions}>
                {uniqueProviders.map(provider => (
                  <TouchableOpacity
                    key={provider}
                    style={[
                      styles.providerOption,
                      filters.providers.includes(provider) && styles.providerOptionSelected
                    ]}
                    onPress={() => {
                      if (filters.providers.includes(provider)) {
                        setFilters({
                          ...filters, 
                          providers: filters.providers.filter(p => p !== provider)
                        });
                      } else {
                        setFilters({
                          ...filters, 
                          providers: [...filters.providers, provider]
                        });
                      }
                    }}
                  >
                    <View style={[
                      styles.checkbox,
                      filters.providers.includes(provider) && styles.checkboxSelected
                    ]}>
                      {filters.providers.includes(provider) && (
                        <Ionicons name="checkmark" size={16} color="#FFFFFF" />
                      )}
                    </View>
                    <ThemedText style={styles.providerOptionText}>{provider}</ThemedText>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
          </ScrollView>

          <View style={styles.filterActions}>
            <TouchableOpacity
              style={styles.resetButton}
              onPress={() => setFilters({
                priceSort: null,
                coverageSort: null,
                providers: []
              })}
            >
              <ThemedText style={styles.resetButtonText}>Reset</ThemedText>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.applyButton}
              onPress={() => {
                onApplyFilters();
                onClose();
              }}
            >
              <LinearGradient
                colors={['#4B76E5', '#3D68D8']}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 0 }}
                style={styles.applyButtonGradient}
              >
                <ThemedText style={styles.applyButtonText}>Apply</ThemedText>
              </LinearGradient>
            </TouchableOpacity>
          </View>
        </Animated.View>
      </View>
    </Modal>
  );
}

export default function AvailablePlansScreen() {
  const params = useLocalSearchParams();
  const { fromCountry, toCountry, departureDate, returnDate, travelers, primaryAge, hasMedicalConditions, coveragePriorities } = params;

  const insets = useSafeAreaInsets();
  const scrollViewRef = useRef(null);

  const fadeAnim = useSharedValue(0);
  const scaleAnim = useSharedValue(0.95);
  const [isLoading, setIsLoading] = useState(true);
  const [showFilterModal, setShowFilterModal] = useState(false);

  // Filter state
  const [filters, setFilters] = useState({
    priceSort: null,
    coverageSort: null,
    providers: []
  });

  // Filtered and sorted plans
  const [filteredPlans, setFilteredPlans] = useState(insurancePlans);

  // Apply filters function
  const applyFilters = () => {
    let result = [...insurancePlans];

    // Filter by providers if any selected
    if (filters.providers.length > 0) {
      result = result.filter(plan => filters.providers.includes(plan.provider));
    }

    // Sort by price
    if (filters.priceSort === 'lowToHigh') {
      result.sort((a, b) => a.price - b.price);
    } else if (filters.priceSort === 'highToLow') {
      result.sort((a, b) => b.price - a.price);
    }

    // Sort by coverage amount (using Medical Expenses as primary metric)
    if (filters.coverageSort) {
      result.sort((a, b) => {
        const aValue = typeof a.coverage['Medical Expenses'] === 'number' ? a.coverage['Medical Expenses'] : 0;
        const bValue = typeof b.coverage['Medical Expenses'] === 'number' ? b.coverage['Medical Expenses'] : 0;

        return filters.coverageSort === 'lowToHigh' ? aValue - bValue : bValue - aValue;
      });
    }

    setFilteredPlans(result);
  };

  useEffect(() => {
    // Initial loading of plans
    // Simulate loading state
    const timer = setTimeout(() => {
      setIsLoading(false);
      fadeAnim.value = withTiming(1, { duration: 500 });
      scaleAnim.value = withSpring(1, { damping: 7 });

      // Initialize with all plans
      setFilteredPlans(insurancePlans);
    }, 600);

    return () => clearTimeout(timer);
  }, []);

  const animatedStyle = useAnimatedStyle(() => {
    return {
      opacity: fadeAnim.value,
      transform: [{ scale: scaleAnim.value }]
    };
  });

  const [selectedPlans, setSelectedPlans] = useState([]);
  const buttonScale = useSharedValue(1);

  // Calculate trip duration in days
  const departureObj = departureDate ? new Date(departureDate) : new Date();
  const returnObj = returnDate ? new Date(returnDate) : new Date();
  const tripDuration = Math.ceil((returnObj - departureObj) / (1000 * 60 * 60 * 24));

  const togglePlanSelection = async (planId) => {
    try {
      if (Platform.OS !== 'web') {
        await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      }

      buttonScale.value = withSequence(
        withTiming(0.95, { duration: 100 }),
        withTiming(1, { duration: 100 })
      );

      setSelectedPlans(prev => {
        if (prev.includes(planId)) {
          return prev.filter(id => id !== planId);
        }
        // Limit selection to maximum 3 plans
        if (prev.length >= 3) return prev;
        return [...prev, planId];
      });
    } catch (error) {
      console.log('Haptics error:', error);
    }
  };

  const handleComparePlans = async () => {
    if (selectedPlans.length < 2) {
      return; // Don't proceed if fewer than 2 plans selected
    }

    try {
      if (Platform.OS !== 'web') {
        await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      }

      router.push({
        pathname: '/compare-plans',
        params: {
          planIds: selectedPlans.join(','),
          fromCountry: fromCountry || 'Origin',
          toCountry: toCountry || 'Destination',
          tripDuration: tripDuration.toString()
        }
      });
    } catch (error) {
      console.log('Navigation error:', error);
    }
  };

  const handleBackPress = () => {
    router.back();
  };

  const handleOpenFilter = async () => {
    try {
      if (Platform.OS !== 'web') {
        await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      }
      setShowFilterModal(true);
    } catch (error) {
      console.log('Haptics error:', error);
    }
  };

  const formatCurrency = (amount) => {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };

  const getTagStyles = (tag) => {
    switch(tag) {
      case 'Best Value':
        return {
          container: { backgroundColor: 'rgba(52, 199, 89, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#34C759' }
        };
      case 'Popular':
        return {
          container: { backgroundColor: 'rgba(75, 118, 229, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#4B76E5' }
        };
      case 'Economy':
        return {
          container: { backgroundColor: 'rgba(248, 180, 0, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#F8B400' }
        };
      case 'Comprehensive':
        return {
          container: { backgroundColor: 'rgba(52, 120, 246, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#3478F6' }
        };
      case 'Adventure':
        return {
          container: { backgroundColor: 'rgba(255, 90, 95, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#FF5A5F' }
        };
      case 'Annual':
        return {
          container: { backgroundColor: 'rgba(141, 70, 244, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#8D46F4' }
        };
      case 'Flexible':
        return {
          container: { backgroundColor: 'rgba(255, 204, 0, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#FFCC00' }
        };
      case 'Frequent Traveler':
        return {
          container: { backgroundColor: 'rgba(0, 191, 165, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#00BFA5' }
        };
      case 'Value':
        return {
          container: { backgroundColor: 'rgba(117, 117, 117, 0.1)', paddingHorizontal: 10, paddingVertical: 6, borderRadius: 30 },
          text: { color: '#757575' }
        };
      default:
        return {
          container: {},
          text: { color: '#333333' }
        };
    }
  };

  const renderCoverageItem = (key, value, isHighPriority, idx) => {
    const isNotIncluded = value === "Not Included";

    return (
      <View key={`coverage-${key}-${idx}`} style={styles.coverageItem}>
        <Ionicons 
          name={
            isNotIncluded 
              ? "close-circle" 
              : isHighPriority 
                ? "checkmark-circle" 
                : "checkmark-circle-outline"
          } 
          size={16} 
          color={
            isNotIncluded 
              ? "#FF3B30" 
              : isHighPriority 
                ? "#34C759" 
                : "#4CAF50"
          } 
        />
        <View style={styles.coverageTextContainer}>
          <ThemedText style={styles.coverageLabel}>{key}</ThemedText>
          <ThemedText style={[
            styles.coverageValue,
            isNotIncluded && styles.coverageNotIncluded,
            isHighPriority && styles.coverageHighPriority
          ]}>
            {typeof value === 'number' ? `$${formatCurrency(value)}` : value}
          </ThemedText>
        </View>
      </View>
    );
  };

  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4B76E5" />
          <ThemedText style={styles.loadingText}>Finding the best plans for you...</ThemedText>
        </View>
      </SafeAreaView>
    );
  }

  // Get active filters count for badge
  const activeFilterCount = 
    (filters.priceSort ? 1 : 0) + 
    (filters.coverageSort ? 1 : 0) + 
    (filters.providers.length > 0 ? 1 : 0);

  return (
    <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
      <StatusBar style="dark" />

      {/* Header with background gradient */}
      <View style={styles.headerBackground}>
        <LinearGradient
          colors={['rgba(75, 118, 229, 0.08)', 'rgba(255, 255, 255, 0)']}
          style={styles.headerGradient}
        />
      </View>

      <View style={styles.headerContainer}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={handleBackPress}
          accessibilityRole="button"
          accessibilityLabel="Go back to trip details"
        >
          <Ionicons name="chevron-back" size={24} color="#4B76E5" />
        </TouchableOpacity>

        <Animated.View 
          entering={FadeInUp.delay(100).duration(400)}
          style={styles.header}>
          <ThemedText style={styles.title}>Available Plans</ThemedText>
          <ThemedText style={styles.subtitle}>
            {travelers} {parseInt(travelers) === 1 ? 'Traveler' : 'Travelers'} • {fromCountry} to {toCountry}
          </ThemedText>
        </Animated.View>

        <TouchableOpacity
          style={styles.filterButton}
          onPress={handleOpenFilter}
          accessibilityRole="button"
          accessibilityLabel="Filter insurance plans"
        >
          <Ionicons name="funnel-outline" size={22} color="#4B76E5" />
          {activeFilterCount > 0 && (
            <View style={styles.filterBadge}>
              <ThemedText style={styles.filterBadgeText}>{activeFilterCount}</ThemedText>
            </View>
          )}
        </TouchableOpacity>
      </View>

      <ScrollView 
        ref={scrollViewRef}
        style={styles.scrollView} 
        contentContainerStyle={[styles.scrollContent, { paddingBottom: insets.bottom + 100 }]}
        keyboardShouldPersistTaps="handled"
        bounces={true}
        showsVerticalScrollIndicator={false}
      >
        <Animated.View 
          entering={FadeInDown.delay(200).duration(400)}
          style={styles.infoCard}>
          <Ionicons name="information-circle-outline" size={22} color="#4B76E5" />
          <ThemedText style={styles.infoText}>
            Plan prices shown are per person for a {tripDuration}-day trip
          </ThemedText>
        </Animated.View>

        <View style={styles.plansContainer}>
          {filteredPlans.map((plan, index) => {
            const tagStyles = plan.tag ? getTagStyles(plan.tag) : {};
            const isSelected = selectedPlans.includes(plan.id);
            const priorities = coveragePriorities ? coveragePriorities.split(',') : [];

            return (
              <Animated.View 
                key={`plan-${plan.id}`} 
                entering={FadeInDown.delay(300 + index * 100).springify()}
                style={[
                  styles.planCard,
                  isSelected && styles.selectedPlanCard,
                ]}>
                <View style={styles.planCardContent}>
                  <View style={styles.planHeader}>
                    <View style={styles.providerSection}>
                      <ThemedText style={styles.providerName}>{plan.provider}</ThemedText>
                      <View style={styles.ratingContainer}>
                        <Ionicons name="star" size={16} color="#FFB800" />
                        <ThemedText style={styles.rating}>{plan.rating.toFixed(1)}</ThemedText>
                      </View>
                    </View>

                    {plan.tag && (
                      <View style={[styles.tagContainer, tagStyles.container]}>
                        <ThemedText style={[styles.tagText, tagStyles.text]}>{plan.tag}</ThemedText>
                      </View>
                    )}
                  </View>

                  <View style={styles.divider} />

                  <View style={styles.coverageContainer}>
                    <View style={styles.coverageGrid}>
                      {Object.entries(plan.coverage).map(([key, value], idx) => {
                        // Determine if this is a high priority coverage based on user selection
                        const isHighPriority = 
                          (key === "Medical Expenses" && priorities.includes('medical')) ||
                          (key === "Trip Cancellation" && priorities.includes('cancellation')) ||
                          (key === "Baggage Loss" && priorities.includes('baggage')) ||
                          (key === "Trip Delay" && priorities.includes('delay'));

                        return renderCoverageItem(key, value, isHighPriority, idx);
                      })}
                    </View>
                  </View>

                  <View style={styles.planFooter}>
                    <View style={styles.priceContainer}>
                      <ThemedText style={styles.price}>${formatCurrency(plan.price)}</ThemedText>
                      <ThemedText style={styles.priceSubtext}>per person</ThemedText>
                    </View>

                    <View style={styles.buttonContainer}>
                      <AnimatedTouchable
                        style={styles.buyButton}
                        entering={FadeIn.delay(400 + index * 100).duration(400)}
                        onPress={() => {
                          try {
                            if (Platform.OS !== 'web') {
                              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
                            }
                            router.push({
                              pathname: '/checkout',
                              params: { 
                                plan: JSON.stringify(plan),
                                travelers: travelers,
                                tripDuration: tripDuration.toString()
                              }
                            });
                          } catch (error) {
                            console.log('Navigation error:', error);
                          }
                        }}
                        accessibilityRole="button"
                        accessibilityLabel={`Select ${plan.provider} plan for $${plan.price}`}
                        activeOpacity={0.7}>
                        <LinearGradient
                          colors={['#4B76E5', '#3D68D8']}
                          start={{ x: 0, y: 0 }}
                          end={{ x: 1, y: 0 }}
                          style={styles.buttonGradient}
                        >
                          <ThemedText style={styles.buttonText}>Buy Now</ThemedText>
                        </LinearGradient>
                      </AnimatedTouchable>

                      <TouchableOpacity
                        style={[
                          styles.compareCheckbox,
                          isSelected && styles.compareCheckboxSelected
                        ]}
                        onPress={() => togglePlanSelection(plan.id)}
                        accessibilityRole="checkbox"
                        accessibilityState={{ checked: isSelected }}
                        accessibilityLabel={`Compare ${plan.provider} plan`}
                      >
                        {isSelected && (
                          <Ionicons name="checkmark" size={18} color="#FFFFFF" />
                        )}
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              </Animated.View>
            );
          })}
        </View>
      </ScrollView>

      {/* Fixed Compare Button */}
      <Animated.View 
        style={[
          styles.compareButtonContainer,
          { paddingBottom: insets.bottom || 16 }
        ]}
        entering={FadeInUp.delay(500).duration(400)}
      >
        <AnimatedTouchable
          style={[
            styles.compareButton,
            selectedPlans.length < 2 && styles.disabledCompareButton
          ]}
          disabled={selectedPlans.length < 2}
          onPress={handleComparePlans}
          accessibilityRole="button"
          accessibilityLabel="Compare selected plans"
          accessibilityState={{ disabled: selectedPlans.length < 2 }}
        >
          <LinearGradient
            colors={selectedPlans.length < 2 ? ['#CCCCCC', '#BBBBBB'] : ['#4B76E5', '#3D68D8']}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 0 }}
            style={styles.compareButtonGradient}
          >
            <Ionicons 
              name="git-compare-outline" 
              size={20} 
              color="#FFFFFF" 
              style={styles.compareIcon}
            />
            <ThemedText style={styles.compareButtonText}>
              Compare {selectedPlans.length > 0 ? `(${selectedPlans.length})` : ''}
            </ThemedText>
          </LinearGradient>
        </AnimatedTouchable>
      </Animated.View>

      {/* Filter Modal */}
      <FilterModal
        visible={showFilterModal}
        onClose={() => setShowFilterModal(false)}
        filters={filters}
        setFilters={setFilters}
        onApplyFilters={applyFilters}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F8FA',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
  headerBackground: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: 180,
    zIndex: -1,
  },
  headerGradient: {
    width: '100%',
    height: '100%',
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 16,
    paddingBottom: 12,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  filterButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 12,
  },
  filterBadge: {
    position: 'absolute',
    top: -2,
    right: -2,
    width: 18,
    height: 18,
    borderRadius: 9,
    backgroundColor: '#4B76E5',
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1.5,
    borderColor: '#FFFFFF',
  },
  filterBadgeText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: '700',
  },
  header: {
    flex: 1,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 4,
    color: '#1A1A1A',
  },
  subtitle: {
    fontSize: 15,
    color: '#666666',
    fontWeight: '400',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 20,
    paddingTop: 8,
    gap: 16,
  },
  infoCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(75, 118, 229, 0.08)',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 12,
    marginBottom: 4,
  },
  infoText: {
    fontSize: 14,
    color: '#4B76E5',
    marginLeft: 10,
  },
  plansContainer: {
    gap: 16,
  },
  planCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#E5E5EA',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.08,
    shadowRadius: 10,
    elevation: 3,
  },
  selectedPlanCard: {
    borderColor: '#4B76E5',
    borderWidth: 2,
  },
  planCardContent: {
    padding: 16,
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  providerSection: {
    flex: 1,
  },
  providerName: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1A1A1A',
    marginBottom: 4,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  rating: {
    marginLeft: 4,
    fontSize: 14,
    fontWeight: '600',
    color: '#666666',
  },
  tagContainer: {
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 30,
    backgroundColor: 'rgba(248, 180, 0, 0.1)',
    marginLeft: 8,
  },
  bestValueTag: {
    backgroundColor: 'rgba(52, 199, 89, 0.1)',
  },
  popularTag: {
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
  },
  economyTag: {
    backgroundColor: 'rgba(248, 180, 0, 0.1)',
  },
  tagText: {
    fontSize: 12,
    fontWeight: '600',
  },
  divider: {
    height: 1,
    backgroundColor: '#E5E5EA',
    marginBottom: 16,
  },
  coverageContainer: {
    marginBottom: 16,
  },
  coverageGrid: {
    gap: 12,
  },
  coverageItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  coverageTextContainer: {
    marginLeft: 8,
    flex: 1,
  },
  coverageLabel: {
    fontSize: 14,
    color: '#666666',
  },
  coverageValue: {
    fontSize: 16,
    color: '#1A1A1A',
    fontWeight: '600',
  },
  coverageNotIncluded: {
    color: '#FF3B30',
  },
  coverageHighPriority: {
    color: '#34C759',
  },
  planFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  priceContainer: {
    flexDirection: 'column',
  },
  price: {
    fontSize: 24,
    color: '#4B76E5',
    fontWeight: '700',
  },
  priceSubtext: {
    fontSize: 12,
    color: '#666666',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  buyButton: {
    borderRadius: 12,
    overflow: 'hidden',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  buttonGradient: {
    paddingVertical: 12,
    paddingHorizontal: 16,
    minWidth: 100,
    alignItems: 'center',
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  compareCheckbox: {
    width: 32,
    height: 32,
    borderRadius: 6,
    backgroundColor: '#F2F2F7',
    borderWidth: 1,
    borderColor: '#D1D1D6',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 12,
  },
  compareCheckboxSelected: {
    backgroundColor: '#4B76E5',
    borderColor: '#4B76E5',
  },
  compareButtonContainer: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    paddingHorizontal: 20,
    paddingTop: 16,
    backgroundColor: 'rgba(248, 248, 250, 0.9)',
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
    backdropFilter: 'blur(10px)',
  },
  compareButton: {
    borderRadius: 12,
    overflow: 'hidden',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  disabledCompareButton: {
    opacity: 0.7,
  },
  compareButtonGradient: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 16,
  },
  compareIcon: {
    marginRight: 8,
  },
  compareButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  // Filter Modal Styles
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'flex-end',
  },
  modalContent: {
    backgroundColor: '#FFFFFF',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    paddingTop: 12,
  },
  modalHeader: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingHorizontal: 20,
    paddingBottom: 16,
    position: 'relative',
    borderBottomWidth: 1,
    borderBottomColor: '#F2F2F7',
  },
  modalHandleBar: {
    width: 36,
    height: 5,
    backgroundColor: '#E5E5EA',
    borderRadius: 2.5,
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1A1A1A',
  },
  closeButton: {
    position: 'absolute',
    right: 16,
    top: 8,
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#F2F2F7',
    alignItems: 'center',
    justifyContent: 'center',
  },
  filterScrollView: {
    padding: 20,
  },
  filterSection: {
    marginBottom: 24,
  },
  filterSectionTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: '#1A1A1A',
    marginBottom: 12,
  },
  filterOptions: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 10,
  },
  filterOption: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5EA',
    backgroundColor: '#FFFFFF',
    minWidth: '48%',
    flex: 1,
  },
  filterOptionSelected: {
    borderColor: '#4B76E5',
    backgroundColor: 'rgba(75, 118, 229, 0.05)',
  },
  filterOptionText: {
    fontSize: 15,
    color: '#1A1A1A',
  },
  filterOptionTextSelected: {
    color: '#4B76E5',
    fontWeight: '500',
  },
  providerFilterOptions: {
    gap: 10,
  },
  providerOption: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#E5E5EA',
    backgroundColor: '#FFFFFF',
  },
  providerOptionSelected: {
    borderColor: '#4B76E5',
    backgroundColor: 'rgba(75, 118, 229, 0.05)',
  },
  providerOptionText: {
    fontSize: 15,
    color: '#1A1A1A',
    marginLeft: 12,
  },
  checkbox: {
    width: 22,
    height: 22,
    borderRadius: 4,
    borderWidth: 1,
    borderColor: '#CCCCCC',
    backgroundColor: '#FFFFFF',
    alignItems: 'center',
    justifyContent: 'center',
  },
  checkboxSelected: {
    backgroundColor: '#4B76E5',
    borderColor: '#4B76E5',
  },
  filterActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderTopWidth: 1,
    borderTopColor: '#F2F2F7',
  },
  resetButton: {
    paddingVertical: 12,
    paddingHorizontal: 20,
  },
  resetButtonText: {
    color: '#4B76E5',
    fontSize: 16,
    fontWeight: '500',
  },
  applyButton: {
    flex: 1,
    marginLeft: 16,
    borderRadius: 12,
    overflow: 'hidden',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  applyButtonGradient: {
    paddingVertical: 14,
    alignItems: 'center',
    justifyContent: 'center',
  },
  applyButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});