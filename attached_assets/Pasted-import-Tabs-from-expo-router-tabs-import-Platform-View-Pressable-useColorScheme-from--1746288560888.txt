import { Tabs } from 'expo-router/tabs';
import { Platform, View, Pressable, useColorScheme } from 'react-native';
import { colors } from '../constants/Styles';

// Safely import components with inline fallbacks
let IconSymbol;
try {
  IconSymbol = require('@/components/ui/IconSymbol').IconSymbol;
} catch (e) {
  // Simple fallback icon component if IconSymbol is missing
  IconSymbol = ({ name, color }) => (
    <View style={{ 
      width: 24, 
      height: 24, 
      backgroundColor: 'transparent',
      borderRadius: 12,
      borderWidth: 2,
      borderColor: color || '#4B76E5' 
    }} />
  );
}

// Safe fallback for HapticTab component
const DefaultTabButton = (props) => {
  const { accessibilityState, onPress, children } = props;
  const isSelected = accessibilityState?.selected;

  return (
    <Pressable
      onPress={onPress}
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        paddingVertical: 8,
      }}
    >
      {children}
      {isSelected && (
        <View
          style={{
            position: 'absolute',
            bottom: 0,
            width: 5,
            height: 5,
            borderRadius: 2.5,
            backgroundColor: Colors.light.tint,
            marginTop: 2
          }}
        />
      )}
    </Pressable>
  );
};

// Safe fallback for TabBarBackground
const DefaultTabBarBackground = () => {
  const colorScheme = useColorScheme();
  const backgroundColor = colorScheme === 'dark' ? '#1A1A1A' : '#FFFFFF';

  return (
    <View
      style={{
        position: 'absolute',
        left: 0,
        right: 0,
        bottom: 0,
        height: 85,
        backgroundColor,
        borderTopWidth: 1,
        borderTopColor: colorScheme === 'dark' ? '#333333' : '#E5E5EA',
      }}
    />
  );
};

export default function TabLayout() {
  const colorScheme = useColorScheme() || 'light';

  // Safe component references with immediate fallbacks if imports fail
  const TabButton = (() => {
    try {
      const { HapticTab } = require('@/components/HapticTab');
      return HapticTab || DefaultTabButton;
    } catch {
      return DefaultTabButton;
    }
  })();

  const TabBackground = (() => {
    try {
      return require('@/components/ui/TabBarBackground').default || DefaultTabBarBackground;
    } catch {
      return DefaultTabBarBackground;
    }
  })();

  // Safely access Colors with fallback
  const tabActiveTintColor = (() => {
    try {
      return Colors[colorScheme]?.tint || '#4B76E5';
    } catch {
      return '#4B76E5'; // Briki blue as fallback
    }
  })();

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: tabActiveTintColor,
        headerShown: false,
        tabBarButton: (props) => <TabButton {...props} />,
        tabBarBackground: () => <TabBackground />,
        tabBarStyle: Platform.select({
          ios: { position: 'absolute' },
          default: {},
        }),
      }}
    >
      <Tabs.Screen
        name="index"
        options={{
          title: 'Home',
          tabBarIcon: ({ color }) => <IconSymbol name="home" color={color} />,
        }}
      />
      <Tabs.Screen
        name="explore"
        options={{
          title: 'Explore',
          tabBarIcon: ({ color }) => <IconSymbol name="compass" color={color} />,
        }}
      />
      <Tabs.Screen
        name="Profile"
        options={{
          title: 'Profile',
          tabBarIcon: ({ color }) => <IconSymbol name="user" color={color} />,
        }}
      />
    </Tabs>
  );
}