Please answer the following questions before rebuilding the Travel, Auto, Pet, and Health insurance category screens:

1. **Routing & Pages**
   - Are the current routes for each of the four insurance categories properly defined in the router?
   - Which of them currently result in a 404? Should we start fresh with new files (e.g., /insurance/travel.tsx, /insurance/pet.tsx, etc.)?

2. **Header Overlap**
   - Do the current insurance plan screens still contain the older fixed tab bar or navbar component?
   - If so, can you remove it completely and wrap these new category pages in the global `MainLayout` component for consistent header behavior?

3. **Navigation Flicker**
   - What is causing the visual flicker or transition delay when navigating between sections (e.g., showing the previous screen briefly)?
   - Can you ensure smooth transitions and scroll-to-top behavior across category pages?

4. **Visual Redesign**
   - We want to **redesign all four category pages** using the latest design system (colors, font weights, soft cards, gradients, buttons).
   - Can you confirm if we’re using a unified style config or Tailwind setup across the project to apply this cleanly?

5. **Icons**
   - The icons currently used for Travel, Auto, Pet, and Health categories in the homepage are visually outdated.
   - Can we replace them with **more modern, Apple-style SVG icons** or suggest a location in the project where we can drop in new ones ourselves?

6. **Get Quote / Learn More Functionality**
   - None of the “Get Quote” or “Learn More” buttons currently work — can you add **mock functionality or navigation placeholders** that simulate future quote screens?

7. **Mock Plan Display**
   - Can each insurance category screen include a sample section that:
     - Displays 3–4 mocked plans (title, provider, features, price)
     - Allows "Compare" or "Select" interaction with a non-functional button
     - Is ready to be connected to real data later?

8. **Final Clean-Up**
   - Ensure no double navbars, scroll glitches, or hardcoded layout hacks are left behind.
   - These new pages should work seamlessly with the existing app structure.

Once these are answered, we’ll be ready to issue the final implementation prompt. Let us know what you confirm.

Before implementation, please confirm the following based on the current Briki codebase:

1. **Insurance Plan Screens**
   - Do the `/travel`, `/auto`, `/pet`, and `/health` pages exist?
   - Are any of these screens using the old layout/header structure (causing overlapping navbars)?
   - Are their internal buttons like “Get Quote” or “Learn More” wired to real routes or placeholders?

2. **Navigation & Layout**
   - Is `MainLayout` applied to all B2C pages (excluding Briki Pilot)?
   - Is the scroll-to-top behavior implemented on route change?
   - Are duplicated headers still visible on any screens?

3. **Login & Auth Logic**
   - Are all login/register screens (auth-enhanced, company-login, etc.) reading `role: 'company'` properly?
   - Does login redirection consistently take company users to `/company-dashboard` from every entry point?

4. **Broken UI Elements**
   - Is the `TabsContent` issue on the Briki Pilot Preview screen resolved?
   - Are all components that show buttons (e.g. “Register as Partner”) using the updated theme and styles?

5. **Visual Consistency**
   - Are purple tones still present anywhere in the app?
   - Do plan category icons (e.g. pet, car, travel) use placeholder icons or a finalized visual style?
   - Are global font weights, button shapes, and spacing standardized?

6. **Landing Page**
   - Is the transparent/sticky header now fully functional on scroll?
   - Is the Instagram and LinkedIn footer linking to real URLs?
   - Is the hero image meta tag working for social previews?

7. **Performance**
   - Are there any double render or animation conflicts causing “flash” during transitions?
   - Are routing delays between sections optimized?
   - Are all placeholder or in-progress screens wrapped in proper fallback layout?

Please audit and confirm each of these. Once we have clarity, we’ll proceed with a complete implementation prompt. 