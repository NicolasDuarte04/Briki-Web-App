import React, { useEffect, useRef } from 'react';
import { 
  StyleSheet, 
  View, 
  ScrollView, 
  SafeAreaView, 
  Platform, 
  TouchableOpacity, 
  Dimensions,
  ActivityIndicator
} from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { ThemedText } from '@/components/ThemedText';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withTiming,
  FadeIn,
  FadeInDown,
  SlideInRight,
  useAnimatedScrollHandler
} from 'react-native-reanimated';
import { Ionicons } from '@expo/vector-icons';
import { StatusBar } from 'expo-status-bar';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';

// Correct import path for real plans
import insurancePlans from '../data/insurance-plans';

const { width } = Dimensions.get('window');
const COLUMN_WIDTH = Math.min(300, width * 0.8);
const AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);

export default function ComparePlansScreen() {
  const params = useLocalSearchParams();
  const insets = useSafeAreaInsets();
  const { fromCountry = 'Origin', toCountry = 'Destination', tripDuration = '7' } = params;

  const scrollX = useSharedValue(0);
  const scrollViewRef = useRef(null);
  const [isLoading, setIsLoading] = React.useState(true);

  const planIds = params.planIds?.toString().split(',') || [];
  const selectedPlans = planIds
    .map(id => insurancePlans.find(p => p.id === id))
    .filter(Boolean);

  const opacity = useSharedValue(0);
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
      opacity.value = withTiming(1, { duration: 500 });
    }, 500);
    return () => clearTimeout(timer);
  }, []);

  const animatedStyle = useAnimatedStyle(() => ({ opacity: opacity.value }));

  const scrollHandler = useAnimatedScrollHandler((event) => {
    scrollX.value = event.contentOffset.x;
  });

  const bestValue = selectedPlans.reduce((prev, curr) => prev.price < curr.price ? prev : curr, selectedPlans[0]);
  const bestCoverage = selectedPlans.reduce((prev, curr) => {
    const prevTotal = Object.values(prev.coverage).reduce((a, b) => a + (typeof b === 'number' ? b : 0), 0);
    const currTotal = Object.values(curr.coverage).reduce((a, b) => a + (typeof b === 'number' ? b : 0), 0);
    return prevTotal > currTotal ? prev : curr;
  }, selectedPlans[0]);

  const handleBackPress = () => router.back();

  const formatCurrency = (value) => typeof value === 'number' 
    ? value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") 
    : value;
  if (isLoading) {
    return (
      <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
        <StatusBar style="dark" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4B76E5" />
          <ThemedText style={styles.loadingText}>Preparing plan comparison...</ThemedText>
        </View>
      </SafeAreaView>
    );
  }

  if (!selectedPlans || selectedPlans.length === 0) {
    return (
      <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
        <StatusBar style="dark" />
        <View style={styles.headerContainer}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={handleBackPress}
            accessibilityRole="button"
            accessibilityLabel="Go back to available plans"
          >
            <Ionicons name="chevron-back" size={24} color="#4B76E5" />
          </TouchableOpacity>
          <View style={styles.header}>
            <ThemedText style={styles.title}>Compare Plans</ThemedText>
          </View>
        </View>

        <Animated.View entering={FadeIn.delay(200).duration(500)} style={styles.noPlansContainer}>
          <Ionicons name="information-circle-outline" size={60} color="#4B76E5" style={styles.noPlansIcon} />
          <ThemedText style={styles.noPlansText}>
            No plans available to compare. Please go back and select some plans.
          </ThemedText>
          <TouchableOpacity 
            style={styles.backToPlansButton}
            onPress={handleBackPress}
            accessibilityRole="button"
          >
            <LinearGradient
              colors={['#4B76E5', '#3D68D8']}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
              style={styles.gradientButton}
            >
              <ThemedText style={styles.backToPlansButtonText}>
                Back to Available Plans
              </ThemedText>
            </LinearGradient>
          </TouchableOpacity>
        </Animated.View>
      </SafeAreaView>
    );
  }
  return (
    <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
      <StatusBar style="dark" />

      {/* Header background gradient */}
      <View style={styles.headerBackground}>
        <LinearGradient
          colors={['rgba(75, 118, 229, 0.08)', 'rgba(255, 255, 255, 0)']}
          style={styles.headerGradient}
        />
      </View>

      <View style={styles.headerContainer}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={handleBackPress}
          accessibilityRole="button"
          accessibilityLabel="Go back to available plans"
        >
          <Ionicons name="chevron-back" size={24} color="#4B76E5" />
        </TouchableOpacity>
        <Animated.View 
          entering={FadeInDown.delay(100).duration(400)}
          style={styles.header}>
          <ThemedText style={styles.title}>Compare Plans</ThemedText>
          <ThemedText style={styles.subtitle}>
            {fromCountry} to {toCountry} â€¢ {tripDuration} days
          </ThemedText>
        </Animated.View>
      </View>

      <Animated.View 
        entering={FadeInDown.delay(200).springify()}
        style={styles.instructionsContainer}
      >
        <Ionicons name="swap-horizontal" size={18} color="#4B76E5" />
        <ThemedText style={styles.instructions}>
          Swipe horizontally to compare all {selectedPlans.length} plans
        </ThemedText>
      </Animated.View>

      <Animated.ScrollView 
        ref={scrollViewRef}
        horizontal 
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.horizontalScrollContent}
        decelerationRate="fast"
        snapToInterval={COLUMN_WIDTH + 16}
        onScroll={scrollHandler}
        scrollEventThrottle={16}
      >
        <View style={styles.compareGrid}>
          {/* First column: Category labels */}
          <Animated.View 
            entering={SlideInRight.delay(200).springify()}
            style={styles.labelsColumn}
          >
            <View style={styles.labelHeaderPlaceholder} />
            <View style={styles.coverageLabelsContainer}>
              {Object.keys(selectedPlans[0]?.coverage || {}).map((key) => (
                <View key={`label-${key}`} style={styles.coverageLabelRow}>
                  <ThemedText style={styles.coverageCategoryLabel}>
                    {key}
                  </ThemedText>
                </View>
              ))}
            </View>
          </Animated.View>
          {/* Plan columns */}
          {selectedPlans.map((plan, planIndex) => {
            const isPlanBestValue = plan.id === bestValue.id;
            const isPlanBestCoverage = plan.id === bestCoverage.id;

            return (
              <Animated.View 
                key={plan.id} 
                entering={SlideInRight.delay(300 + planIndex * 100).springify()}
                style={[styles.planColumn, animatedStyle]}
              >
                <View style={[
                  styles.planHeader,
                  isPlanBestValue && styles.bestValueHeader,
                  isPlanBestCoverage && styles.bestCoverageHeader
                ]}>
                  <View style={styles.planHeaderContent}>
                    <ThemedText style={styles.providerName}>{plan.provider}</ThemedText>
                    <View style={styles.priceContainer}>
                      <ThemedText style={styles.price}>${formatCurrency(plan.price)}</ThemedText>
                      <ThemedText style={styles.perPerson}>per person</ThemedText>
                    </View>
                  </View>

                  <View style={styles.badgeContainer}>
                    {isPlanBestValue && (
                      <View style={[styles.badge, styles.bestValueBadge]}>
                        <Ionicons name="cash-outline" size={12} color="#FFFFFF" style={styles.badgeIcon} />
                        <ThemedText style={styles.badgeText}>Best Value</ThemedText>
                      </View>
                    )}
                    {isPlanBestCoverage && (
                      <View style={[styles.badge, styles.bestCoverageBadge]}>
                        <Ionicons name="shield-checkmark-outline" size={12} color="#FFFFFF" style={styles.badgeIcon} />
                        <ThemedText style={styles.badgeText}>Best Coverage</ThemedText>
                      </View>
                    )}
                  </View>
                </View>

                <View style={styles.coverageList}>
                  {Object.entries(plan.coverage).map(([key, value], index) => {
                    const isHighestValue = typeof value === 'number' && 
                      selectedPlans.every(p => 
                        typeof p.coverage[key] === 'number' ? p.coverage[key] <= value : true
                      );

                    return (
                      <View 
                        key={`${plan.id}-${key}`} 
                        style={[
                          styles.coverageItem,
                          index % 2 === 0 && styles.coverageItemAlternate
                        ]}
                      >
                        <View style={styles.coverageValueContainer}>
                          {typeof value === 'number' ? (
                            <ThemedText style={[
                              styles.coverageValue,
                              isHighestValue && styles.highestCoverageValue
                            ]}>
                              ${formatCurrency(value)}
                            </ThemedText>
                          ) : (
                            <View style={styles.coverageTextContainer}>
                              <Ionicons 
                                name={value === "Included" ? "checkmark-circle" : "close-circle"} 
                                size={18} 
                                color={value === "Included" ? "#34C759" : "#FF3B30"} 
                              />
                              <ThemedText style={[
                                styles.coverageTextValue,
                                value !== "Included" && styles.coverageNotIncluded
                              ]}>
                                {value}
                              </ThemedText>
                            </View>
                          )}
                        </View>
                      </View>
                    );
                  })}
                </View>

                <AnimatedTouchable 
                  style={styles.selectButton}
                  onPress={() => {
                    router.push({
                      pathname: '/checkout',
                      params: { 
                        plan: JSON.stringify(plan),
                        fromCountry,
                        toCountry,
                        tripDuration
                      }
                    });
                  }}
                  accessibilityRole="button"
                  accessibilityLabel={`Select ${plan.provider} plan`}
                >
                  <LinearGradient
                    colors={['#4B76E5', '#3D68D8']}
                    start={{ x: 0, y: 0 }}
                    end={{ x: 1, y: 0 }}
                    style={styles.buttonGradient}
                  >
                    <ThemedText style={styles.selectButtonText}>Select Plan</ThemedText>
                    <Ionicons name="chevron-forward" size={16} color="#FFFFFF" />
                  </LinearGradient>
                </AnimatedTouchable>
              </Animated.View>
            );
          })}
          </View>
          </Animated.ScrollView>
      {/* Pagination dots */}
      {selectedPlans.length > 1 && (
        <View style={styles.paginationContainer}>
          {selectedPlans.map((_, index) => {
            const dotAnimatedStyle = useAnimatedStyle(() => {
              const isActive = Math.round(scrollX.value / (COLUMN_WIDTH + 16)) === index;
              return {
                width: isActive ? 16 : 8,
                opacity: isActive ? 1 : 0.5,
                backgroundColor: isActive ? '#4B76E5' : '#BCC5DC',
              };
            });

            return (
              <Animated.View 
                key={`dot-${index}`}
                style={[styles.paginationDot, dotAnimatedStyle]}
              />
            );
          })}
        </View>
      )}
      </SafeAreaView>
      );
      }
