C:\Users\academia.CESA\Downloads\BrikiTravel\BrikiTravel\mobile-app>type src\contexts\AuthContext.tsx
import React, { createContext, ReactNode, useContext, useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { QueryClient, useQuery, useMutation } from 'react-query';
import { api } from '../services/api';
import { User } from '../types';

interface AuthContextData {
  user: User | null;
  isLoading: boolean;
  error: Error | null;
  login: (username: string, password: string) => Promise<void>;
  register: (username: string, password: string, email: string) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextData>({} as AuthContextData);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [error, setError] = useState<Error | null>(null);

  // Check if user is already logged in on app start
  useEffect(() => {
    const loadUser = async () => {
      try {
        const token = await AsyncStorage.getItem('@Briki:token');

        if (token) {
          // Get user data from API
          const response = await api.get('/api/user');
          setUser(response.data);
        }
      } catch (err) {
        console.error('Error loading user:', err);
        // Clear any invalid tokens
        await AsyncStorage.removeItem('@Briki:token');
      } finally {
        setIsLoading(false);
      }
    };

    loadUser();
  }, []);

  // Login function
  const login = async (username: string, password: string) => {
    try {
      setError(null);
      setIsLoading(true);

      // Call login API
      const response = await api.post('/api/login', { username, password });
      const data = response.data;

      // Save token to AsyncStorage
      if (data.token) {
        await AsyncStorage.setItem('@Briki:token', data.token);

        // Set user
        setUser(data.user);
      } else {
        throw new Error('No se recibi├│ un token v├ílido');
      }
    } catch (err: any) {
      setError(err);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Register function
  const register = async (username: string, password: string, email: string) => {
    try {
      setError(null);
      setIsLoading(true);

      // Call register API
      const response = await api.post('/api/register', { username, password, email });
      const data = response.data;

      // Save token to AsyncStorage
      if (data.token) {
        await AsyncStorage.setItem('@Briki:token', data.token);

        // Set user
        setUser(data.user);
      } else {
        throw new Error('No se recibi├│ un token v├ílido');
      }
    } catch (err: any) {
      setError(err);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Logout function
  const logout = async () => {
    try {
      setError(null);
      setIsLoading(true);

      // Call logout API
      await api.post('/api/logout');

      // Remove token from AsyncStorage
      await AsyncStorage.removeItem('@Briki:token');

      // Clear user
      setUser(null);
    } catch (err: any) {
      setError(err);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        error,
        login,
        register,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
C:\Users\academia.CESA\Downloads\BrikiTravel\BrikiTravel\mobile-app>type src\navigation\AppNavigator.tsx
import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { useAuth } from '../contexts/AuthContext';
import { StyleSheet } from 'react-native';

import HomeScreen from '../screens/HomeScreen';
import AuthScreen from '../screens/AuthScreen';
import TripInfoScreen from '../screens/TripInfoScreen';
import InsurancePlansScreen from '../screens/InsurancePlansScreen';
import CheckoutScreen from '../screens/CheckoutScreen';
import WeatherRiskScreen from '../screens/WeatherRiskScreen';
import ProfileScreen from '../screens/ProfileScreen';
import SettingsScreen from '../screens/SettingsScreen';
import { COLORS } from '../utils/theme';

import { MaterialCommunityIcons, Ionicons } from '@expo/vector-icons';

// Define the main stack navigator param list
export type MainStackParamList = {
  Auth: undefined;
  Main: undefined;
  TripInfo: undefined;
  InsurancePlans: { tripId?: number; filter?: string };
  WeatherRisk: { destination?: string };
  Checkout: { planId: number };
  Profile: undefined;
  Settings: undefined;
};

// Create the navigators
const Stack = createStackNavigator<MainStackParamList>();
const Tab = createBottomTabNavigator();

// Main tab navigator (after authentication)
const MainTabNavigator = () => {
  return (
    <Tab.Navigator
      screenOptions={{
        headerShown: false,
        tabBarActiveTintColor: COLORS.primary,
        tabBarInactiveTintColor: COLORS.gray,
        tabBarStyle: styles.tabBar,
        tabBarLabelStyle: styles.tabBarLabel,
      }}
    >
      <Tab.Screen
        name="Home"
        component={HomeScreen}
        options={{
          tabBarLabel: 'Inicio',
          tabBarIcon: ({ color, size }: { color: string; size: number }) => (
            <MaterialCommunityIcons name="home" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Plans"
        component={InsurancePlansScreen}
        options={{
          tabBarLabel: 'Seguros',
          tabBarIcon: ({ color, size }: { color: string; size: number }) => (
            <MaterialCommunityIcons name="shield-check" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Weather"
        component={WeatherRiskScreen}
        options={{
          tabBarLabel: 'Clima',
          tabBarIcon: ({ color, size }: { color: string; size: number }) => (
            <MaterialCommunityIcons name="weather-partly-cloudy" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Profile"
        component={ProfileScreen}
        options={{
          tabBarLabel: 'Perfil',
          tabBarIcon: ({ color, size }: { color: string; size: number }) => (
            <Ionicons name="person" color={color} size={size} />
          ),
        }}
      />
    </Tab.Navigator>
  );
};

// Main app navigator
const AppNavigator = () => {
  const { user, isLoading } = useAuth();

  // Show loading screen while checking auth status
  if (isLoading) {
    return null; // In a real app, you would show a splash screen here
  }

  return (
    <Stack.Navigator
      screenOptions={{
        headerShown: false,
      }}
    >
      {user ? (
        <>
          <Stack.Screen name="Main" component={MainTabNavigator} />
          <Stack.Screen
            name="TripInfo"
            component={TripInfoScreen}
            options={{
              headerShown: true,
              title: 'Informaci├│n del Viaje',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
          <Stack.Screen
            name="InsurancePlans"
            component={InsurancePlansScreen}
            options={{
              headerShown: true,
              title: 'Planes de Seguro',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
          <Stack.Screen
            name="WeatherRisk"
            component={WeatherRiskScreen}
            options={{
              headerShown: true,
              title: 'Riesgos Clim├íticos',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
          <Stack.Screen
            name="Checkout"
            component={CheckoutScreen}
            options={{
              headerShown: true,
              title: 'Finalizar Compra',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
          <Stack.Screen
            name="Settings"
            component={SettingsScreen}
            options={{
              headerShown: true,
              title: 'Configuraci├│n',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
        </>
      ) : (
        <Stack.Screen name="Auth" component={AuthScreen} />
      )}
    </Stack.Navigator>
  );
};

const styles = StyleSheet.create({
  tabBar: {
    height: 60,
    paddingBottom: 5,
    paddingTop: 5,
    borderTopWidth: 1,
    borderTopColor: COLORS.border,
    backgroundColor: COLORS.white,
  },
  tabBarLabel: {
    fontSize: 12,
  },
});

export default AppNavigator;
C:\Users\academia.CESA\Downloads\BrikiTravel\BrikiTravel\mobile-app>type src\services\api.ts
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// For development, use your local server or the Replit URL
// For production, this would be your deployed API endpoint
import Constants from 'expo-constants';

// Determine if we're running in development mode
const isDevelopment = Constants.manifest?.packagerOpts?.dev || __DEV__;

// Set the API base URL based on environment
const BASE_URL = isDevelopment
  ? 'http://localhost:5000'  // Development - update this with your local IP if testing on a physical device
  : 'https://briki-travel.replit.app'; // Production

console.log('API URL:', BASE_URL);

export const api = axios.create({
  baseURL: BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Request interceptor to add auth token
api.interceptors.request.use(
  async (config: any) => {
    try {
      const token = await AsyncStorage.getItem('@Briki:token');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
      }
    } catch (error: any) {
      console.error('Error setting auth token:', error);
    }
    return config;
  },
  (error: any) => {
    return Promise.reject(error);
  }
);

// Response interceptor for error handling
api.interceptors.response.use(
  (response: any) => {
    return response;
  },
  async (error: any) => {
    const originalRequest = error.config;

    // If unauthorized and not already retrying
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      // Clear token on auth error
      await AsyncStorage.removeItem('@Briki:token');

      // You could implement token refresh logic here

      return Promise.reject(error);
    }

    return Promise.reject(error);
  }
);
C:\Users\academia.CESA\Downloads\BrikiTravel\BrikiTravel\mobile-app>type src\contexts\AuthContext.tsx
import React, { createContext, ReactNode, useContext, useState, useEffect } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { QueryClient, useQuery, useMutation } from 'react-query';
import { api } from '../services/api';
import { User } from '../types';

interface AuthContextData {
  user: User | null;
  isLoading: boolean;
  error: Error | null;
  login: (username: string, password: string) => Promise<void>;
  register: (username: string, password: string, email: string) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextData>({} as AuthContextData);

export function AuthProvider({ children }: { children: ReactNode }) {
  const [isLoading, setIsLoading] = useState(true);
  const [user, setUser] = useState<User | null>(null);
  const [error, setError] = useState<Error | null>(null);

  // Check if user is already logged in on app start
  useEffect(() => {
    const loadUser = async () => {
      try {
        const token = await AsyncStorage.getItem('@Briki:token');

        if (token) {
          // Get user data from API
          const response = await api.get('/api/user');
          setUser(response.data);
        }
      } catch (err) {
        console.error('Error loading user:', err);
        // Clear any invalid tokens
        await AsyncStorage.removeItem('@Briki:token');
      } finally {
        setIsLoading(false);
      }
    };

    loadUser();
  }, []);

  // Login function
  const login = async (username: string, password: string) => {
    try {
      setError(null);
      setIsLoading(true);

      // Call login API
      const response = await api.post('/api/login', { username, password });
      const data = response.data;

      // Save token to AsyncStorage
      if (data.token) {
        await AsyncStorage.setItem('@Briki:token', data.token);

        // Set user
        setUser(data.user);
      } else {
        throw new Error('No se recibi├│ un token v├ílido');
      }
    } catch (err: any) {
      setError(err);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Register function
  const register = async (username: string, password: string, email: string) => {
    try {
      setError(null);
      setIsLoading(true);

      // Call register API
      const response = await api.post('/api/register', { username, password, email });
      const data = response.data;

      // Save token to AsyncStorage
      if (data.token) {
        await AsyncStorage.setItem('@Briki:token', data.token);

        // Set user
        setUser(data.user);
      } else {
        throw new Error('No se recibi├│ un token v├ílido');
      }
    } catch (err: any) {
      setError(err);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  // Logout function
  const logout = async () => {
    try {
      setError(null);
      setIsLoading(true);

      // Call logout API
      await api.post('/api/logout');

      // Remove token from AsyncStorage
      await AsyncStorage.removeItem('@Briki:token');

      // Clear user
      setUser(null);
    } catch (err: any) {
      setError(err);
      throw err;
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isLoading,
        error,
        login,
        register,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}
C:\Users\academia.CESA\Downloads\BrikiTravel\BrikiTravel\mobile-app>type src\navigation\AppNavigator.tsx
import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { useAuth } from '../contexts/AuthContext';
import { StyleSheet } from 'react-native';

import HomeScreen from '../screens/HomeScreen';
import AuthScreen from '../screens/AuthScreen';
import TripInfoScreen from '../screens/TripInfoScreen';
import InsurancePlansScreen from '../screens/InsurancePlansScreen';
import CheckoutScreen from '../screens/CheckoutScreen';
import WeatherRiskScreen from '../screens/WeatherRiskScreen';
import ProfileScreen from '../screens/ProfileScreen';
import SettingsScreen from '../screens/SettingsScreen';
import { COLORS } from '../utils/theme';

import { MaterialCommunityIcons, Ionicons } from '@expo/vector-icons';

// Define the main stack navigator param list
export type MainStackParamList = {
  Auth: undefined;
  Main: undefined;
  TripInfo: undefined;
  InsurancePlans: { tripId?: number; filter?: string };
  WeatherRisk: { destination?: string };
  Checkout: { planId: number };
  Profile: undefined;
  Settings: undefined;
};

// Create the navigators
const Stack = createStackNavigator<MainStackParamList>();
const Tab = createBottomTabNavigator();

// Main tab navigator (after authentication)
const MainTabNavigator = () => {
  return (
    <Tab.Navigator
      screenOptions={{
        headerShown: false,
        tabBarActiveTintColor: COLORS.primary,
        tabBarInactiveTintColor: COLORS.gray,
        tabBarStyle: styles.tabBar,
        tabBarLabelStyle: styles.tabBarLabel,
      }}
    >
      <Tab.Screen
        name="Home"
        component={HomeScreen}
        options={{
          tabBarLabel: 'Inicio',
          tabBarIcon: ({ color, size }: { color: string; size: number }) => (
            <MaterialCommunityIcons name="home" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Plans"
        component={InsurancePlansScreen}
        options={{
          tabBarLabel: 'Seguros',
          tabBarIcon: ({ color, size }: { color: string; size: number }) => (
            <MaterialCommunityIcons name="shield-check" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Weather"
        component={WeatherRiskScreen}
        options={{
          tabBarLabel: 'Clima',
          tabBarIcon: ({ color, size }: { color: string; size: number }) => (
            <MaterialCommunityIcons name="weather-partly-cloudy" color={color} size={size} />
          ),
        }}
      />
      <Tab.Screen
        name="Profile"
        component={ProfileScreen}
        options={{
          tabBarLabel: 'Perfil',
          tabBarIcon: ({ color, size }: { color: string; size: number }) => (
            <Ionicons name="person" color={color} size={size} />
          ),
        }}
      />
    </Tab.Navigator>
  );
};

// Main app navigator
const AppNavigator = () => {
  const { user, isLoading } = useAuth();

  // Show loading screen while checking auth status
  if (isLoading) {
    return null; // In a real app, you would show a splash screen here
  }

  return (
    <Stack.Navigator
      screenOptions={{
        headerShown: false,
      }}
    >
      {user ? (
        <>
          <Stack.Screen name="Main" component={MainTabNavigator} />
          <Stack.Screen
            name="TripInfo"
            component={TripInfoScreen}
            options={{
              headerShown: true,
              title: 'Informaci├│n del Viaje',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
          <Stack.Screen
            name="InsurancePlans"
            component={InsurancePlansScreen}
            options={{
              headerShown: true,
              title: 'Planes de Seguro',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
          <Stack.Screen
            name="WeatherRisk"
            component={WeatherRiskScreen}
            options={{
              headerShown: true,
              title: 'Riesgos Clim├íticos',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
          <Stack.Screen
            name="Checkout"
            component={CheckoutScreen}
            options={{
              headerShown: true,
              title: 'Finalizar Compra',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
          <Stack.Screen
            name="Settings"
            component={SettingsScreen}
            options={{
              headerShown: true,
              title: 'Configuraci├│n',
              headerTintColor: COLORS.white,
              headerStyle: { backgroundColor: COLORS.primary }
            }}
          />
        </>
      ) : (
        <Stack.Screen name="Auth" component={AuthScreen} />
      )}
    </Stack.Navigator>
  );
};

const styles = StyleSheet.create({
  tabBar: {
    height: 60,
    paddingBottom: 5,
    paddingTop: 5,
    borderTopWidth: 1,
    borderTopColor: COLORS.border,
    backgroundColor: COLORS.white,
  },
  tabBarLabel: {
    fontSize: 12,
  },
});

export default AppNavigator;
C:\Users\academia.CESA\Downloads\BrikiTravel\BrikiTravel\mobile-app>