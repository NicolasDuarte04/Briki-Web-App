import React, { useEffect, useRef, useState, useCallback, useMemo } from 'react';
import { 
  StyleSheet, 
  View, 
  ScrollView, 
  SafeAreaView, 
  Platform, 
  TouchableOpacity, 
  Dimensions, 
  ActivityIndicator, 
  Alert 
} from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { ThemedText } from '../components/ThemedText';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withTiming, 
  useAnimatedScrollHandler, 
  FadeIn, 
  FadeInDown, 
  SlideInRight, 
  Layout 
} from 'react-native-reanimated';
import { Ionicons } from '@expo/vector-icons';
import { StatusBar } from 'expo-status-bar';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import * as Haptics from 'expo-haptics';

import { insurancePlans } from '../data/insurance-plans';

const { width } = Dimensions.get('window');
const COLUMN_WIDTH = width < 375 ? width * 0.6 : width < 390 ? width * 0.65 : Math.min(280, width * 0.7);
const SPACING = width < 375 ? 12 : 16;
const AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);

export default function ComparePlansScreen() {
  const params = useLocalSearchParams();
  const insets = useSafeAreaInsets();
  const { fromCountry = 'Origin', toCountry = 'Destination', tripDuration = '7' } = params;

  const scrollX = useSharedValue(0);
  const scrollViewRef = useRef(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [autoScrollEnabled, setAutoScrollEnabled] = useState(true);
  const [removingPlanId, setRemovingPlanId] = useState(null);
  const autoScrollIntervalRef = useRef(null);

  const planIdsString = params.planIds?.toString() || '';
  const [selectedPlanIds, setSelectedPlanIds] = useState(planIdsString ? planIdsString.split(',') : []);
  const [activeTabIndex, setActiveTabIndex] = useState(0);

  const selectedPlans = useMemo(() => {
    return selectedPlanIds
      .map(id => insurancePlans.find(p => p.id === id))
      .filter(Boolean);
  }, [selectedPlanIds]);
  const opacity = useSharedValue(0);

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
      opacity.value = withTiming(1, { duration: 500 });
    }, 500);
    return () => clearTimeout(timer);
  }, []);

  useEffect(() => {
    if (autoScrollIntervalRef.current) {
      clearInterval(autoScrollIntervalRef.current);
    }

    if (selectedPlans.length > 2 && autoScrollEnabled && scrollViewRef.current) {
      autoScrollIntervalRef.current = setInterval(() => {
        const nextIndex = (activeTabIndex + 1) % selectedPlans.length;
        const xPosition = nextIndex * (COLUMN_WIDTH + SPACING);

        scrollViewRef.current.scrollTo({
          x: xPosition,
          animated: true
        });

        setActiveTabIndex(nextIndex);
      }, 3000);
    }

    return () => {
      if (autoScrollIntervalRef.current) {
        clearInterval(autoScrollIntervalRef.current);
      }
    };
  }, [selectedPlans.length, activeTabIndex, autoScrollEnabled]);

  const animatedStyle = useAnimatedStyle(() => ({
    opacity: opacity.value
  }));

  const scrollHandler = useAnimatedScrollHandler({
    onScroll: (event) => {
      scrollX.value = event.contentOffset.x;
      const newIndex = Math.round(event.contentOffset.x / (COLUMN_WIDTH + SPACING));
      if (newIndex >= 0 && newIndex < selectedPlans.length) {
        setActiveTabIndex(newIndex);
      }
    },
    onBeginDrag: () => {
      setAutoScrollEnabled(false);
    },
    onEndDrag: () => {
      setTimeout(() => setAutoScrollEnabled(true), 5000);
    }
  });

  const formatCurrency = useCallback(
    (value: number) => value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","),
    []
  );
  const planRemovalAnimatedStyles = useMemo(() => {
    const styles: { [key: string]: any } = {};
    selectedPlans.forEach(plan => {
      styles[plan.id] = useAnimatedStyle(() => {
        const isRemoving = removingPlanId === plan.id;
        return {
          opacity: withTiming(isRemoving ? 0 : 1, { duration: 300 }),
          transform: [{ scale: withTiming(isRemoving ? 0.9 : 1, { duration: 300 }) }]
        };
      }, [removingPlanId]);
    });
    return styles;
  }, [selectedPlans, removingPlanId]);

  const paginationDotStyles = useMemo(() => {
    const styles: { [key: number]: any } = {};
    selectedPlans.forEach((_, index) => {
      styles[index] = useAnimatedStyle(() => {
        const isActive = Math.round(scrollX.value / (COLUMN_WIDTH + SPACING)) === index;
        return {
          width: withTiming(isActive ? 16 : 8, { duration: 250 }),
          opacity: withTiming(isActive ? 1 : 0.5, { duration: 250 }),
          backgroundColor: isActive ? '#4B76E5' : '#BCC5DC',
        };
      });
    });
    return styles;
  }, [selectedPlans.length]);

  const handleBackPress = () => router.back();

  const handleTabPress = useCallback((index: number) => {
    if (scrollViewRef.current) {
      if (Platform.OS !== 'web') {
        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      }
      const xPosition = index * (COLUMN_WIDTH + SPACING);
      scrollViewRef.current.scrollTo({ x: xPosition, animated: true });
      setActiveTabIndex(index);
    }
  }, []);
  const handleRemovePlan = useCallback(async (planId: string, index: number) => {
    if (Platform.OS !== 'web') {
      await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    }

    Alert.alert(
      "Remove Plan",
      "Are you sure you want to remove this plan from comparison?",
      [
        { text: "Cancel", style: "cancel" },
        {
          text: "Remove",
          style: "destructive",
          onPress: () => {
            setRemovingPlanId(planId);
            setTimeout(() => {
              const newIds = selectedPlanIds.filter(id => id !== planId);
              setSelectedPlanIds(newIds);
              setRemovingPlanId(null);

              if (activeTabIndex >= index) {
                const newIndex = Math.max(0, activeTabIndex - 1);
                setActiveTabIndex(newIndex);
                if (newIds.length > 0 && scrollViewRef.current) {
                  const x = newIndex * (COLUMN_WIDTH + SPACING);
                  scrollViewRef.current.scrollTo({ x, animated: true });
                }
              }
            }, 300);
          }
        }
      ]
    );
  }, [selectedPlanIds, activeTabIndex]);

  const handleSelectPlan = useCallback((plan) => {
    router.push({
      pathname: '/checkout',
      params: {
        plan: JSON.stringify(plan),
        fromCountry,
        toCountry,
        tripDuration,
      }
    });
  }, [fromCountry, toCountry, tripDuration]);

  const renderCoverageItem = useCallback(({ plan, keyName, value, index }) => {
    const isHighest = typeof value === 'number' &&
      selectedPlans.every(p =>
        typeof p.coverage[keyName] === 'number' ? p.coverage[keyName] <= value : true
      );

    return (
      <View
        key={`${plan.id}-${keyName}`}
        style={[
          styles.coverageItem,
          index % 2 === 0 && styles.coverageItemAlternate
        ]}
      >
        <View style={styles.coverageValueContainer}>
          {typeof value === 'number' ? (
            <ThemedText style={[
              styles.coverageValue,
              isHighest && styles.highestCoverageValue
            ]}>
              ${formatCurrency(value)}
            </ThemedText>
          ) : (
            <View style={styles.coverageTextContainer}>
              <Ionicons
                name={value === "Included" ? "checkmark-circle" : "close-circle"}
                size={18}
                color={value === "Included" ? "#34C759" : "#FF3B30"}
              />
              <ThemedText style={[
                styles.coverageTextValue,
                value !== "Included" && styles.coverageNotIncluded
              ]}>
                {value}
              </ThemedText>
            </View>
          )}
        </View>
      </View>
    );
  }, [selectedPlans]);
  if (isLoading) {
    return (
      <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
        <StatusBar style="dark" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4B76E5" />
          <ThemedText style={styles.loadingText}>Preparing plan comparison...</ThemedText>
        </View>
      </SafeAreaView>
    );
  }

  if (error || !selectedPlans.length) {
    return (
      <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
        <StatusBar style="dark" />
        <View style={styles.headerContainer}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={handleBackPress}
            accessibilityRole="button"
            accessibilityLabel="Go back to available plans"
          >
            <Ionicons name="chevron-back" size={24} color="#4B76E5" />
          </TouchableOpacity>
          <View style={styles.header}>
            <ThemedText style={styles.title}>Compare Plans</ThemedText>
          </View>
        </View>

        <Animated.View entering={FadeIn.delay(200).duration(500)} style={styles.noPlansContainer}>
          <Ionicons 
            name={error ? "alert-circle-outline" : "information-circle-outline"} 
            size={60} 
            color={error ? "#FF3B30" : "#4B76E5"} 
            style={styles.noPlansIcon} 
          />
          <ThemedText style={styles.noPlansText}>
            {error || 'No plans available to compare. Please go back and select some plans.'}
          </ThemedText>
          <TouchableOpacity 
            style={styles.backToPlansButton}
            onPress={handleBackPress}
            accessibilityRole="button"
          >
            <LinearGradient
              colors={['#4B76E5', '#3D68D8']}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
              style={styles.gradientButton}
            >
              <ThemedText style={styles.backToPlansButtonText}>
                Back to Available Plans
              </ThemedText>
            </LinearGradient>
          </TouchableOpacity>
        </Animated.View>
      </SafeAreaView>
    );
  }

  const firstPlan = selectedPlans[0];
  const coverageCategories = Object.keys(firstPlan.coverage || {});

  return (
    <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
      <StatusBar style="dark" />

      {/* Header background gradient */}
      <View style={styles.headerBackground}>
        <LinearGradient
          colors={['rgba(75, 118, 229, 0.08)', 'rgba(255, 255, 255, 0)']}
          style={styles.headerGradient}
        />
      </View>

      <ScrollView
        ref={mainScrollViewRef}
        showsVerticalScrollIndicator={false}
        contentContainerStyle={styles.mainScrollContent}
        bounces={false}
      >
        <View style={styles.headerContainer}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={handleBackPress}
            accessibilityRole="button"
            accessibilityLabel="Go back to available plans"
          >
            <Ionicons name="chevron-back" size={24} color="#4B76E5" />
          </TouchableOpacity>
          <Animated.View 
            entering={FadeInDown.delay(100).duration(400)}
            style={styles.header}>
            <ThemedText style={styles.title}>Compare Plans</ThemedText>
            <ThemedText style={styles.subtitle}>
              {fromCountry} to {toCountry} • {tripDuration} days
            </ThemedText>
          </Animated.View>
        </View>

        {/* Message for single plan */}
        {selectedPlans.length === 1 && (
          <Animated.View 
            entering={FadeIn.duration(400)}
            style={styles.singlePlanMessage}
          >
            <Ionicons name="information-circle" size={20} color="#FF9500" />
            <ThemedText style={styles.singlePlanText}>
              You need 2+ plans to compare. Add more from available plans.
            </ThemedText>
          </Animated.View>
        )}

        {/* Tab Bar Selector */}
        <ScrollView 
          ref={tabScrollRef}
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.tabScrollContainer}
        >
          <Animated.View 
            entering={FadeInDown.delay(150).duration(400)}
            style={styles.tabBarContainer}
          >
            {selectedPlans.map((plan, index) => (
              <TouchableOpacity
                key={`tab-${plan.id}`}
                accessibilityRole="tab"
                accessibilityState={{ selected: activeTabIndex === index }}
                accessibilityLabel={`${plan.provider} tab`}
                style={[
                  styles.tab,
                  activeTabIndex === index && styles.activeTab
                ]}
                onPress={() => handleTabPress(index)}
                activeOpacity={0.7}
              >
                <ThemedText 
                  style={[
                    styles.tabText,
                    activeTabIndex === index && styles.activeTabText
                  ]}
                  numberOfLines={1}
                  ellipsizeMode="tail"
                >
                  {plan.provider}
                </ThemedText>
                {activeTabIndex === index && (
                  <View style={styles.activeTabIndicator} />
                )}
              </TouchableOpacity>
            ))}
          </Animated.View>
        </ScrollView>

        <Animated.View 
          entering={FadeInDown.delay(200).springify()}
          style={styles.instructionsContainer}
        >
          <Ionicons name="swap-horizontal" size={18} color="#4B76E5" />
          <ThemedText style={styles.instructions}>
            Swipe horizontally to compare all {selectedPlans.length} plans
          </ThemedText>
        </Animated.View>
        <Animated.ScrollView 
          ref={scrollViewRef}
          horizontal 
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={[
            styles.horizontalScrollContent,
            { gap: SPACING }
          ]}
          decelerationRate="fast"
          snapToInterval={COLUMN_WIDTH + SPACING}
          onScroll={scrollHandler}
          scrollEventThrottle={16}
        >
          <View style={styles.compareGrid}>
            {/* First column: Category labels */}
            <Animated.View 
              entering={SlideInRight.delay(200).springify()}
              style={[styles.labelsColumn, { marginRight: SPACING / 2 }]}
            >
              <View style={styles.labelHeaderPlaceholder} />
              <View style={styles.coverageLabelsContainer}>
                {coverageCategories.map((key) => (
                  <View key={`label-${key}`} style={styles.coverageLabelRow}>
                    <ThemedText style={styles.coverageCategoryLabel}>
                      {key}
                    </ThemedText>
                  </View>
                ))}
                {/* Extra rows for region and description */}
                <View style={styles.extraInfoRow}>
                  <ThemedText style={styles.coverageCategoryLabel}>Region</ThemedText>
                </View>
                <View style={styles.extraInfoRow}>
                  <ThemedText style={styles.coverageCategoryLabel}>Description</ThemedText>
                </View>
              </View>
            </Animated.View>

            {/* Plan columns */}
            {selectedPlans.map((plan, planIndex) => {
              const isPlanBestValue = bestValue && plan.id === bestValue.id;
              const isPlanBestCoverage = bestCoverage && plan.id === bestCoverage.id;

              return (
                <Animated.View 
                  key={plan.id}
                  entering={SlideInRight.delay(300 + planIndex * 100).springify()}
                  layout={Layout.springify()}
                  style={[
                    styles.planColumn,
                    animatedStyle,
                    planRemovalAnimatedStyles[plan.id],
                    { width: COLUMN_WIDTH }
                  ]}
                >
                  <View style={[
                    styles.planHeader,
                    isPlanBestValue && styles.bestValueHeader,
                    isPlanBestCoverage && styles.bestCoverageHeader
                  ]}>
                    {/* Remove button */}
                    <TouchableOpacity
                      style={styles.removeButton}
                      onPress={() => handleRemovePlan(plan.id, planIndex)}
                      accessibilityLabel={`Remove ${plan.provider} plan`}
                      accessibilityRole="button"
                      hitSlop={{ top: 8, right: 8, bottom: 8, left: 8 }}
                    >
                      <Ionicons name="close" size={18} color="#666666" />
                    </TouchableOpacity>

                    <View style={styles.planHeaderContent}>
                      <ThemedText style={styles.providerName} numberOfLines={1} ellipsizeMode="tail">
                        {plan.provider}
                      </ThemedText>
                      <View style={styles.priceContainer}>
                        <ThemedText style={styles.price}>${formatCurrency(plan.price)}</ThemedText>
                        <ThemedText style={styles.perPerson}>per person</ThemedText>
                      </View>
                      {plan.rating && (
                        <View style={styles.ratingContainer}>
                          <Ionicons name="star" size={16} color="#F8B400" />
                          <ThemedText style={styles.ratingText}>
                            {typeof plan.rating === 'number' ? plan.rating.toFixed(1) : plan.rating}
                          </ThemedText>
                        </View>
                      )}
                    </View>

                    <View style={styles.badgeContainer}>
                      {isPlanBestValue && (
                        <View style={[styles.badge, styles.bestValueBadge]}>
                          <Ionicons name="cash-outline" size={12} color="#FFFFFF" style={styles.badgeIcon} />
                          <ThemedText style={styles.badgeText}>Best Value</ThemedText>
                        </View>
                      )}
                      {isPlanBestCoverage && (
                        <View style={[styles.badge, styles.bestCoverageBadge]}>
                          <Ionicons name="shield-checkmark-outline" size={12} color="#FFFFFF" style={styles.badgeIcon} />
                          <ThemedText style={styles.badgeText}>Best Coverage</ThemedText>
                        </View>
                      )}
                      {plan.tag && (
                        <View style={[styles.badge, styles.planTagBadge]}>
                          <ThemedText style={styles.badgeText}>{plan.tag}</ThemedText>
                        </View>
                      )}
                    </View>
                  </View>

                  {/* Coverage values */}
                  <View style={styles.coverageList}>
                    {Object.entries(plan.coverage).map(([key, value], index) =>
                      renderCoverageItem({ plan, keyName: key, value, index })
                    )}

                    {/* Region row */}
                    <View style={[styles.coverageItem, styles.coverageItemAlternate]}>
                      <View style={styles.coverageValueContainer}>
                        <ThemedText style={styles.coverageText}>
                          {plan.region || 'Global'}
                        </ThemedText>
                      </View>
                    </View>

                    {/* Description row */}
                    <View style={styles.coverageItem}>
                      <View style={styles.coverageValueContainer}>
                        <ThemedText 
                          style={styles.coverageDescription} 
                          numberOfLines={3} 
                          ellipsizeMode="tail"
                        >
                          {plan.description || 'No description available'}
                        </ThemedText>
                      </View>
                    </View>
                  </View>

                  {/* Select button */}
                  <AnimatedTouchable 
                    style={styles.selectButton}
                    onPress={() => handleSelectPlan(plan)}
                    accessibilityRole="button"
                    accessibilityLabel={`Select ${plan.provider} plan`}
                  >
                    <LinearGradient
                      colors={['#4B76E5', '#3D68D8']}
                      start={{ x: 0, y: 0 }}
                      end={{ x: 1, y: 0 }}
                      style={styles.buttonGradient}
                    >
                      <ThemedText style={styles.selectButtonText}>Select Plan</ThemedText>
                      <Ionicons name="chevron-forward" size={16} color="#FFFFFF" />
                    </LinearGradient>
                  </AnimatedTouchable>
                </Animated.View>
              );
            })}
          </View>
        </Animated.ScrollView>
        {/* Pagination dots - shown only when we have multiple plans */}
        {selectedPlans.length > 1 && (
          <View style={styles.paginationContainer}>
            {selectedPlans.map((_, index) => (
              <Animated.View
                key={`dot-${index}`}
                style={[styles.paginationDot, paginationDotStyles[index]]}
              />
            ))}
          </View>
        )}
        </ScrollView>
        </SafeAreaView>
        );
        }