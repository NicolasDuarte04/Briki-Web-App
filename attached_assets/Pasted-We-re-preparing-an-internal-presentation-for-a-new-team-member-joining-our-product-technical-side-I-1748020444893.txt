We’re preparing an internal presentation for a new team member joining our product/technical side. I’d like your help in creating a full technical diagnosis and structural overview of the Briki project so they can understand what we’ve built and where we’re going.

Please provide detailed answers to the following, but do not make any code changes yet — this is just for documentation and alignment:

1. Architecture Overview
	•	What is the current high-level architecture of the app (frontend, backend, context providers, layouts)?
	•	What frameworks, libraries, or tools are central to how the app works?
	•	What are the key folders and file structures in client/src/, and what’s their purpose?

2. User Journey Breakdown
	•	What are the entry points for B2C (public) users vs. B2B (company) users?
	•	How do these journeys connect inside the app?
	•	What layout components are responsible for rendering which parts of the app?

3. Authentication & Session Management
	•	How is authentication handled today (context, cookie/session, login redirects)?
	•	What pages are gated and which are public?
	•	How is session persistence handled?
	•	Where does the AI Assistant appear, and under what conditions?

4. Current State of Layouts
	•	What are the main layout types (PublicLayout, AuthenticatedLayout, CompanyLayout)?
	•	Which pages use each?
	•	Is the new layout system now fully implemented across all pages?

5. Anonymous User Flow (Public-First Experience)
	•	What parts of the app can now be used without login?
	•	What components or pages are being adapted to allow anonymous access?
	•	What steps remain to finalize this anonymous/public-first flow?
	•	How is anonymous session data stored and migrated on login?

6. Pipeline & Feature Modules
	•	How is the code structured into modules (quote generation, dashboard, assistant, company tools, etc.)?
	•	Where does most business logic live (hooks, lib, server)?
	•	What are the most critical flows that should be monitored or tested before each release?

7. Developer Best Practices & Risks
	•	What technical debt or inconsistencies still exist?
	•	What would you recommend we document (e.g., layout usage rules, state flows)?
	•	Any missing tests, type safety concerns, or duplication you see?
	•	Anything you would flag as fragile or worth refactoring?

8. Proposal for Standardization
	•	If you were to help onboard a new dev or assistant today, what documentation, code patterns, or architectural diagrams would you prioritize?
	•	Optional: create a Notion-style outline or markdown summary that we can hand off as internal documentation

⸻

Once you’ve answered, we’ll use this to align the team and build any onboarding materials or visual aids we need.