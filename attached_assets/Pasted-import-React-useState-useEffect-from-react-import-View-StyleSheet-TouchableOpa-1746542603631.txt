import React, { useState, useEffect } from 'react';
import { 
  View, 
  StyleSheet, 
  TouchableOpacity, 
  ScrollView, 
  Image, 
  Switch, 
  SafeAreaView,
  Platform,
  Alert
} from 'react-native';
import { ThemedText } from '../../components/ThemedText';
import { useAuth } from '../context/AuthContext';
import { Ionicons } from '@expo/vector-icons';
import { router } from 'expo-router';
import { StatusBar } from 'expo-status-bar';
import Animated, { FadeInUp, FadeIn } from 'react-native-reanimated';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { useThemeColor } from '../../hooks/useThemeColor';
import { useThemeContext } from '../context/ThemeContext';

export default function ProfileScreen() {
  const { user, logout } = useAuth();
  const insets = useSafeAreaInsets();
  const { theme, toggleTheme } = useThemeContext();
  const isDarkMode = theme === 'dark';

  // Get theme colors
  const backgroundColor = useThemeColor({}, 'background');
  const cardBackgroundColor = useThemeColor({}, 'card');
  const textColor = useThemeColor({}, 'text');
  const textSecondaryColor = useThemeColor({}, 'secondaryText');
  const borderColor = useThemeColor({}, 'border');
  const accentColor = useThemeColor({}, 'accent');

  // Brand colors
  const BRAND = {
    primary: '#4B76E5',
    primaryDark: '#3D68D8',
    secondary: '#F8B400',
  };

  const [insurancePolicies, setInsurancePolicies] = useState([
    { 
      id: 'POL-12345', 
      provider: 'AXA Insurance', 
      destination: 'Mexico',
      startDate: '2023-10-01',
      endDate: '2023-10-15',
      status: 'Active'
    },
    { 
      id: 'POL-67890',  
      provider: 'MAPFRE',
      destination: 'Colombia',
      startDate: '2023-09-05',
      endDate: '2023-09-10',
      status: 'Expired'
    }
  ]);

  // Notifications settings
  const [notificationsEnabled, setNotificationsEnabled] = useState(true);
  const [emailNotifications, setEmailNotifications] = useState(true);
  const [pushNotifications, setPushNotifications] = useState(true);

  const handleLogout = () => {
    Alert.alert(
      "Logout",
      "Are you sure you want to logout?",
      [
        { text: "Cancel", style: "cancel" },
        { 
          text: "Yes, Logout", 
          style: "destructive",
          onPress: () => {
            logout();
            router.replace('/');
          } 
        }
      ]
    );
  };

  const renderInsurancePolicies = () => {
    if (insurancePolicies.length === 0) {
      return (
        <View style={styles.emptyPoliciesContainer}>
          <Ionicons name="document-outline" size={50} color={textSecondaryColor} />
          <ThemedText style={[styles.emptyPoliciesText, { color: textColor }]}>
            No insurance policies yet
          </ThemedText>
          <ThemedText style={[styles.emptyPoliciesSubtext, { color: textSecondaryColor }]}>
            Your purchased insurance will appear here
          </ThemedText>
        </View>
      );
    }

    return insurancePolicies.map((policy) => (
      <TouchableOpacity 
        key={policy.id}
        style={[
          styles.policyCard,
          { 
            backgroundColor: cardBackgroundColor,
            borderColor,
          },
          !isDarkMode && {
            shadowColor: 'rgba(0,0,0,0.1)',
            shadowOffset: { width: 0, height: 4 },
            shadowOpacity: 0.1,
            shadowRadius: 8,
            elevation: 4
          }
        ]}
        onPress={() => {
          // Navigate to policy details
          Alert.alert(
            "Policy Details",
            `ID: ${policy.id}\nProvider: ${policy.provider}\nDestination: ${policy.destination}\nDates: ${policy.startDate} to ${policy.endDate}`
          );
        }}
      >
        <View style={styles.policyHeader}>
          <View>
            <ThemedText style={[styles.policyProvider, { color: textColor }]}>{policy.provider}</ThemedText>
            <ThemedText style={[styles.policyDestination, { color: textSecondaryColor }]}>
              {policy.destination}
            </ThemedText>
          </View>
          <View style={[
            styles.policyStatusBadge,
            { backgroundColor: policy.status === 'Active' ? 'rgba(52, 199, 89, 0.15)' : 'rgba(255, 59, 48, 0.15)' }
          ]}>
            <ThemedText style={[
              styles.policyStatusText, 
              { color: policy.status === 'Active' ? '#34C759' : '#FF3B30' }
            ]}>
              {policy.status}
            </ThemedText>
          </View>
        </View>

        <View style={[styles.policyDivider, { backgroundColor: borderColor }]} />

        <View style={styles.policyDetails}>
          <View style={styles.policyDetailItem}>
            <Ionicons name="calendar-outline" size={18} color={textSecondaryColor} />
            <ThemedText style={[styles.policyDetailText, { color: textSecondaryColor }]}>
              {policy.startDate} - {policy.endDate}
            </ThemedText>
          </View>

          <View style={styles.policyDetailItem}>
            <Ionicons name="document-text-outline" size={18} color={textSecondaryColor} />
            <ThemedText style={[styles.policyDetailText, { color: textSecondaryColor }]}>
              Policy ID: {policy.id}
            </ThemedText>
          </View>
        </View>
      </TouchableOpacity>
    ));
  };

  return (
    <SafeAreaView style={[styles.container, { 
      backgroundColor, 
      paddingTop: Platform.OS === 'android' ? insets.top : 0 
    }]}>
      <StatusBar style={isDarkMode ? "light" : "dark"} />

      {/* Background Image (light mode only) */}
      {!isDarkMode && (
        <Image
          source={require('../assets/backgrounds/blurred-glow.png')}
          style={[StyleSheet.absoluteFill, { opacity: 0.6, zIndex: -1 }]}
          resizeMode="cover"
        />
      )}

      <ScrollView 
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        showsVerticalScrollIndicator={false}
      >
        {/* Profile Header */}
        <Animated.View entering={FadeIn} style={styles.profileHeader}>
          <View style={[
            styles.avatarContainer,
            !isDarkMode && {
              shadowColor: 'rgba(0,0,0,0.2)',
              shadowOffset: { width: 0, height: 4 },
              shadowOpacity: 0.2,
              shadowRadius: 8,
              elevation: 5
            }
          ]}>
            <Image 
              source={require('../assets/profile/avatar-placeholder.png')} 
              style={styles.avatar}
            />
          </View>

          <ThemedText style={[styles.username, { color: textColor }]}>
            {user?.fullName || 'User Name'}
          </ThemedText>
          <ThemedText style={[styles.email, { color: textSecondaryColor }]}>
            {user?.email || 'user@example.com'}
          </ThemedText>

          <View style={styles.profileActions}>
            <TouchableOpacity 
              style={[
                styles.profileActionButton,
                { 
                  backgroundColor: cardBackgroundColor,
                  borderColor
                },
                !isDarkMode && {
                  shadowColor: 'rgba(0,0,0,0.1)',
                  shadowOffset: { width: 0, height: 2 },
                  shadowOpacity: 0.1,
                  shadowRadius: 4,
                  elevation: 2
                }
              ]}
              onPress={() => router.push('/EditProfileScreen')}
            >
              <Ionicons name="person-outline" size={20} color={BRAND.primary} />
              <ThemedText style={[styles.profileActionText, { color: textColor }]}>Edit Profile</ThemedText>
            </TouchableOpacity>

            <TouchableOpacity 
              style={[
                styles.profileActionButton,
                { 
                  backgroundColor: cardBackgroundColor,
                  borderColor
                },
                !isDarkMode && {
                  shadowColor: 'rgba(0,0,0,0.1)',
                  shadowOffset: { width: 0, height: 2 },
                  shadowOpacity: 0.1,
                  shadowRadius: 4,
                  elevation: 2
                }
              ]}
              onPress={() => router.push('/ChangePasswordScreen')}
            >
              <Ionicons name="lock-closed-outline" size={20} color={BRAND.primary} />
              <ThemedText style={[styles.profileActionText, { color: textColor }]}>Change Password</ThemedText>
            </TouchableOpacity>
          </View>
        </Animated.View>

        {/* Insurance Policies Section */}
        <Animated.View entering={FadeInUp.delay(200).springify()}>
          <View style={styles.sectionContainer}>
            <ThemedText style={[styles.sectionTitle, { color: textColor }]}>My Insurance Policies</ThemedText>
            {renderInsurancePolicies()}
          </View>
        </Animated.View>

        {/* Settings Section */}
        <Animated.View entering={FadeInUp.delay(300).springify()}>
          <View style={styles.sectionContainer}>
            <ThemedText style={[styles.sectionTitle, { color: textColor }]}>Settings</ThemedText>

            <View style={[
              styles.settingsCard,
              { 
                backgroundColor: cardBackgroundColor,
                borderColor
              },
              !isDarkMode && {
                shadowColor: 'rgba(0,0,0,0.1)',
                shadowOffset: { width: 0, height: 4 },
                shadowOpacity: 0.1,
                shadowRadius: 8,
                elevation: 4
              }
            ]}>
              {/* Dark Mode Toggle */}
              <View style={[styles.settingItem, { borderBottomColor: borderColor }]}>
                <View style={styles.settingLabelContainer}>
                  <Ionicons 
                    name={isDarkMode ? "moon" : "sunny"} 
                    size={24} 
                    color={isDarkMode ? '#f1c40f' : '#f39c12'} 
                  />
                  <ThemedText style={[styles.settingLabel, { color: textColor }]}>Dark Mode</ThemedText>
                </View>
                <Switch
                  value={isDarkMode}
                  onValueChange={toggleTheme}
                  trackColor={{ false: '#e0e0e0', true: 'rgba(75, 118, 229, 0.3)' }}
                  thumbColor={isDarkMode ? BRAND.primary : '#f5f5f5'}
                  ios_backgroundColor="#e0e0e0"
                />
              </View>

              {/* Notifications Setting */}
              <View style={[styles.settingItem, { borderBottomColor: borderColor }]}>
                <View style={styles.settingLabelContainer}>
                  <Ionicons name="notifications-outline" size={24} color={BRAND.primary} />
                  <ThemedText style={[styles.settingLabel, { color: textColor }]}>Notifications</ThemedText>
                </View>
                <Switch
                  value={notificationsEnabled}
                  onValueChange={setNotificationsEnabled}
                  trackColor={{ false: '#e0e0e0', true: 'rgba(75, 118, 229, 0.3)' }}
                  thumbColor={notificationsEnabled ? BRAND.primary : '#f5f5f5'}
                  ios_backgroundColor="#e0e0e0"
                />
              </View>

              {/* Notification Settings Button */}
              <TouchableOpacity 
                style={styles.settingItem}
                onPress={() => router.push('/NotificationSettingsScreen')}
              >
                <View style={styles.settingLabelContainer}>
                  <Ionicons name="settings-outline" size={24} color={BRAND.primary} />
                  <ThemedText style={[styles.settingLabel, { color: textColor }]}>
                    Notification Preferences
                  </ThemedText>
                </View>
                <Ionicons name="chevron-forward" size={20} color={textSecondaryColor} />
              </TouchableOpacity>
            </View>

            {/* Logout Button */}
            <TouchableOpacity 
              style={[
                styles.logoutButton,
                { 
                  backgroundColor: 'rgba(255, 59, 48, 0.1)',
                  borderColor: 'rgba(255, 59, 48, 0.2)'
                }
              ]}
              onPress={handleLogout}
            >
              <Ionicons name="log-out-outline" size={20} color="#FF3B30" />
              <ThemedText style={styles.logoutText}>Log Out</ThemedText>
            </TouchableOpacity>
          </View>
        </Animated.View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 30,
  },
  profileHeader: {
    alignItems: 'center',
    paddingVertical: 20,
    paddingHorizontal: 20,
  },
  avatarContainer: {
    width: 100,
    height: 100,
    borderRadius: 50,
    marginBottom: 16,
    overflow: 'hidden',
  },
  avatar: {
    width: '100%',
    height: '100%',
  },
  username: {
    fontSize: 24,
    fontWeight: '700',
    marginBottom: 4,
  },
  email: {
    fontSize: 16,
    marginBottom: 20,
  },
  profileActions: {
    flexDirection: 'row',
    justifyContent: 'center',
    width: '100%',
    marginBottom: 10,
  },
  profileActionButton: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
    marginHorizontal: 6,
    borderWidth: 1,
  },
  profileActionText: {
    marginLeft: 6,
    fontSize: 14,
    fontWeight: '500',
  },
  sectionContainer: {
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '700',
    marginBottom: 16,
  },
  policyCard: {
    borderRadius: 16,
    borderWidth: 1,
    marginBottom: 16,
    overflow: 'hidden',
  },
  policyHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
  },
  policyProvider: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 4,
  },
  policyDestination: {
    fontSize: 14,
  },
  policyStatusBadge: {
    paddingHorizontal: 10,
    paddingVertical: 4,
    borderRadius: 12,
  },
  policyStatusText: {
    fontSize: 12,
    fontWeight: '600',
  },
  policyDivider: {
    height: 1,
  },
  policyDetails: {
    padding: 16,
  },
  policyDetailItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  policyDetailText: {
    fontSize: 14,
    marginLeft: 8,
  },
  emptyPoliciesContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  emptyPoliciesText: {
    fontSize: 18,
    fontWeight: '600',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyPoliciesSubtext: {
    fontSize: 14,
    textAlign: 'center',
  },
  settingsCard: {
    borderRadius: 16,
    borderWidth: 1,
    marginBottom: 16,
    overflow: 'hidden',
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
  },
  settingLabelContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  settingLabel: {
    fontSize: 16,
    marginLeft: 12,
  },
  logoutButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 16,
    borderRadius: 16,
    borderWidth: 1,
    marginTop: 10,
  },
  logoutText: {
    color: '#FF3B30',
    fontSize: 16,
    fontWeight: '600',
    marginLeft: 8,
  },
});