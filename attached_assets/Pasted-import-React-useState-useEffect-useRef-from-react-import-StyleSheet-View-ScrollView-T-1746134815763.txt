import React, { useState, useEffect, useRef } from 'react';
import { StyleSheet, View, ScrollView, TouchableOpacity, SafeAreaView, Platform } from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { ThemedText } from '@/components/ThemedText';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withSpring, 
  withTiming,
  withSequence,
  withDelay,
  FadeIn,
  FadeInDown
} from 'react-native-reanimated';
import { Ionicons, FontAwesome5 } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';
import { StatusBar } from 'expo-status-bar';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

// Real insurance plan data
const realInsurancePlans = [
  {
    id: "assist-card-basic",
    provider: "Assist Card",
    rating: 4.2,
    price: 95,
    coverage: {
      "Medical Expenses": 35000,
      "Trip Cancellation": 1500,
      "Baggage Loss": 1000,
      "Trip Delay": 300,
      "Covid Coverage": "Included"
    },
    tag: "Popular"
  },
  {
    id: "axa-premium",
    provider: "AXA Assistance",
    rating: 4.7,
    price: 145,
    coverage: {
      "Medical Expenses": 100000,
      "Trip Cancellation": 3000,
      "Baggage Loss": 2000,
      "Trip Delay": 800,
      "Covid Coverage": "Included"
    },
    tag: "Best Value"
  },
  {
    id: "iati-standard",
    provider: "IATI",
    rating: 4.3,
    price: 78,
    coverage: {
      "Medical Expenses": 50000,
      "Trip Cancellation": 2000,
      "Baggage Loss": 1500,
      "Trip Delay": 500,
      "Covid Coverage": "Included"
    },
    tag: "Economy"
  },
  {
    id: "starr-basic",
    provider: "Starr",
    rating: 4.0,
    price: 65,
    coverage: {
      "Medical Expenses": 25000,
      "Trip Cancellation": 1000,
      "Baggage Loss": 800,
      "Trip Delay": 200,
      "Covid Coverage": "Not Included"
    },
    tag: null
  },
  {
    id: "sura-premium",
    provider: "SURA",
    rating: 4.5,
    price: 115,
    coverage: {
      "Medical Expenses": 75000,
      "Trip Cancellation": 2500,
      "Baggage Loss": 1800,
      "Trip Delay": 600,
      "Covid Coverage": "Included"
    },
    tag: null
  }
];

export default function AvailablePlansScreen() {
  const params = useLocalSearchParams();
  const { fromCountry, toCountry, departureDate, returnDate, travelers, primaryAge, hasMedicalConditions, coveragePriorities } = params;

  const insets = useSafeAreaInsets();
  const scrollViewRef = useRef(null);

  const fadeAnim = useSharedValue(0);
  const scaleAnim = useSharedValue(0.95);

  useEffect(() => {
    fadeAnim.value = withTiming(1, { duration: 500 });
    scaleAnim.value = withSpring(1, { damping: 7 });
  }, []);

  const animatedStyle = useAnimatedStyle(() => {
    return {
      opacity: fadeAnim.value,
      transform: [{ scale: scaleAnim.value }]
    };
  });

  const [selectedPlans, setSelectedPlans] = useState([]);
  const buttonScale = useSharedValue(1);

  // Calculate trip duration in days
  const departureObj = departureDate ? new Date(departureDate) : new Date();
  const returnObj = returnDate ? new Date(returnDate) : new Date();
  const tripDuration = Math.ceil((returnObj - departureObj) / (1000 * 60 * 60 * 24));

  const togglePlanSelection = async (planId) => {
    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);

    buttonScale.value = withSequence(
      withTiming(0.95, { duration: 100 }),
      withTiming(1, { duration: 100 })
    );

    setSelectedPlans(prev => {
      if (prev.includes(planId)) {
        return prev.filter(id => id !== planId);
      }
      // Limit selection to maximum 3 plans
      if (prev.length >= 3) return prev;
      return [...prev, planId];
    });
  };

  const handleComparePlans = () => {
    if (selectedPlans.length < 2) {
      return; // Don't proceed if fewer than 2 plans selected
    }

    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);

    router.push({
      pathname: '/compare-plans',
      params: {
        planIds: selectedPlans.join(','),
        fromCountry: fromCountry || 'Origin',
        toCountry: toCountry || 'Destination',
        tripDuration: tripDuration.toString()
      }
    });
  };

  const handleBackPress = () => {
    router.back();
  };

  const formatCurrency = (amount) => {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };

  return (
    <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
      <StatusBar style="dark" />
      <View style={styles.headerContainer}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={handleBackPress}
          accessibilityRole="button"
          accessibilityLabel="Go back to trip details"
        >
          <Ionicons name="chevron-back" size={24} color="#4B76E5" />
        </TouchableOpacity>
        <View style={styles.header}>
          <ThemedText style={styles.title}>Available Plans</ThemedText>
          <ThemedText style={styles.subtitle}>
            {travelers} {parseInt(travelers) === 1 ? 'Traveler' : 'Travelers'} â€¢ {fromCountry} to {toCountry}
          </ThemedText>
        </View>
      </View>

      <ScrollView 
        ref={scrollViewRef}
        style={styles.scrollView} 
        contentContainerStyle={[styles.scrollContent, { paddingBottom: insets.bottom + 100 }]}
        keyboardShouldPersistTaps="handled"
        bounces={true}
        showsVerticalScrollIndicator={false}
      >
        <View style={styles.infoCard}>
          <Ionicons name="information-circle-outline" size={22} color="#4B76E5" />
          <ThemedText style={styles.infoText}>
            Plan prices shown are per person for a {tripDuration}-day trip
          </ThemedText>
        </View>

        <View style={styles.plansContainer}>
          {realInsurancePlans.map((plan, index) => (
            <Animated.View 
              key={plan.id} 
              entering={FadeInDown.delay(index * 100).springify()}
              style={[
                styles.planCard,
                selectedPlans.includes(plan.id) && styles.selectedPlanCard,
              ]}>
              <View style={styles.planCardContent}>
                <View style={styles.planHeader}>
                  <View style={styles.providerSection}>
                    <ThemedText style={styles.providerName}>{plan.provider}</ThemedText>
                    <View style={styles.ratingContainer}>
                      <Ionicons name="star" size={16} color="#FFB800" />
                      <ThemedText style={styles.rating}>{plan.rating.toFixed(1)}</ThemedText>
                    </View>
                  </View>

                  {plan.tag && (
                    <View style={[
                      styles.tagContainer,
                      plan.tag === 'Best Value' && styles.bestValueTag,
                      plan.tag === 'Popular' && styles.popularTag,
                      plan.tag === 'Economy' && styles.economyTag
                    ]}>
                      <ThemedText style={styles.tagText}>{plan.tag}</ThemedText>
                    </View>
                  )}
                </View>

                <View style={styles.divider} />

                <View style={styles.coverageContainer}>
                  <View style={styles.coverageGrid}>
                    {Object.entries(plan.coverage).map(([key, value], idx) => {
                      // Determine if this is a high priority coverage based on user selection
                      const priorities = coveragePriorities ? coveragePriorities.split(',') : [];
                      const isHighPriority = 
                        (key === "Medical Expenses" && priorities.includes('medical')) ||
                        (key === "Trip Cancellation" && priorities.includes('cancellation')) ||
                        (key === "Baggage Loss" && priorities.includes('baggage')) ||
                        (key === "Trip Delay" && priorities.includes('delay'));

                      return (
                        <View key={idx} style={styles.coverageItem}>
                          <Ionicons 
                            name={
                              value === "Not Included" 
                                ? "close-circle" 
                                : isHighPriority 
                                  ? "checkmark-circle" 
                                  : "checkmark-circle-outline"
                            } 
                            size={16} 
                            color={
                              value === "Not Included" 
                                ? "#FF3B30" 
                                : isHighPriority 
                                  ? "#34C759" 
                                  : "#4CAF50"
                            } 
                          />
                          <View style={styles.coverageTextContainer}>
                            <ThemedText style={styles.coverageLabel}>{key}</ThemedText>
                            <ThemedText style={[
                              styles.coverageValue,
                              value === "Not Included" && styles.coverageNotIncluded,
                              isHighPriority && styles.coverageHighPriority
                            ]}>
                              {typeof value === 'number' ? `$${formatCurrency(value)}` : value}
                            </ThemedText>
                          </View>
                        </View>
                      );
                    })}
                  </View>
                </View>

                <View style={styles.planFooter}>
                  <View style={styles.priceContainer}>
                    <ThemedText style={styles.price}>${formatCurrency(plan.price)}</ThemedText>
                    <ThemedText style={styles.priceSubtext}>per person</ThemedText>
                  </View>

                  <View style={styles.buttonContainer}>
                    <TouchableOpacity
                      style={styles.buyButton}
                      onPress={() => {
                        Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
                        router.push({
                          pathname: '/checkout',
                          params: { 
                            plan: JSON.stringify(plan),
                            travelers: travelers,
                            tripDuration: tripDuration.toString()
                          }
                        });
                      }}
                      accessibilityRole="button"
                      accessibilityLabel={`Select ${plan.provider} plan for $${plan.price}`}
                      activeOpacity={0.7}>
                      <ThemedText style={styles.buyButtonText}>Select Plan</ThemedText>
                      <Ionicons name="chevron-forward" size={16} color="#FFF" />
                    </TouchableOpacity>

                    <TouchableOpacity 
                      style={[
                        styles.compareToggle,
                        selectedPlans.includes(plan.id) && styles.selectedCompareToggle,
                        selectedPlans.length >= 3 && !selectedPlans.includes(plan.id) && styles.disabledButton
                      ]}
                      accessibilityRole="checkbox"
                      accessibilityLabel={
                        selectedPlans.includes(plan.id) 
                          ? `Remove ${plan.provider} plan from comparison` 
                          : `Add ${plan.provider} plan to comparison`
                      }
                      accessibilityState={{ checked: selectedPlans.includes(plan.id) }}
                      activeOpacity={0.7}
                      onPress={() => togglePlanSelection(plan.id)}
                      disabled={selectedPlans.length >= 3 && !selectedPlans.includes(plan.id)}>
                      <Animated.View style={{ transform: [{ scale: buttonScale }] }}>
                        <Ionicons 
                          name={selectedPlans.includes(plan.id) ? "checkmark-circle" : "add-circle-outline"} 
                          size={24} 
                          color={selectedPlans.includes(plan.id) ? "#4B76E5" : "#666666"} 
                        />
                      </Animated.View>
                      <ThemedText style={[
                        styles.compareToggleText,
                        selectedPlans.includes(plan.id) && styles.selectedCompareToggleText
                      ]}>
                        {selectedPlans.includes(plan.id) ? 'Added to Compare' : 'Add to Compare'}
                      </ThemedText>
                    </TouchableOpacity>
                  </View>
                </View>
              </View>
            </Animated.View>
          ))}
        </View>
      </ScrollView>

      {selectedPlans.length >= 2 && (
        <Animated.View 
          entering={FadeIn.duration(300)}
          style={[
            styles.compareButtonContainer,
            { paddingBottom: Math.max(16, insets.bottom) }
          ]}>
          <TouchableOpacity 
            style={styles.compareButton} 
            onPress={handleComparePlans}
            accessibilityRole="button"
            accessibilityLabel={`Compare ${selectedPlans.length} selected plans`}>
            <ThemedText style={styles.compareButtonText}>
              Compare {selectedPlans.length} Plans
            </ThemedText>
            <Ionicons name="swap-horizontal" size={20} color="#FFFFFF" style={styles.compareButtonIcon} />
          </TouchableOpacity>
        </Animated.View>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F8FA',
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 16,
    paddingBottom: 8,
    backgroundColor: '#F8F8FA',
    zIndex: 10,
  },
  backButton: {
    padding: 8,
    marginRight: 10,
    borderRadius: 20,
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 20,
    paddingTop: 12,
  },
  header: {
    flex: 1,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 4,
    color: '#000000',
  },
  subtitle: {
    fontSize: 14,
    color: '#666666',
    fontWeight: '400',
  },
  infoCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
    borderRadius: 12,
    padding: 12,
    marginBottom: 24,
    marginTop: 8,
  },
  infoText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#4B76E5',
    flex: 1,
  },
  plansContainer: {
    gap: 24,
  },
  planCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#E5E5EA',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.06,
    shadowRadius: 6,
    elevation: 2,
  },
  planCardContent: {
    padding: 20,
    gap: 16,
  },
  selectedPlanCard: {
    borderColor: '#4B76E5',
    borderWidth: 2,
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
    backgroundColor: 'rgba(75, 118, 229, 0.05)',
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  providerSection: {
    flex: 1,
  },
  providerName: {
    fontSize: 22,
    fontWeight: '600',
    color: '#1C1C1E',
    marginBottom: 4,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  rating: {
    fontSize: 14,
    color: '#666',
    fontWeight: '500',
  },
  tagContainer: {
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 12,
    backgroundColor: '#F2F2F7',
  },
  bestValueTag: {
    backgroundColor: 'rgba(52, 199, 89, 0.15)',
  },
  popularTag: {
    backgroundColor: 'rgba(75, 118, 229, 0.15)',
  },
  economyTag: {
    backgroundColor: 'rgba(255, 184, 0, 0.15)',
  },
  tagText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#333333',
  },
  divider: {
    height: 1,
    backgroundColor: '#E5E5EA',
  },
  coverageContainer: {
    gap: 14,
  },
  coverageGrid: {
    gap: 12,
  },
  coverageItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 10,
    paddingVertical: 2,
  },
  coverageTextContainer: {
    flex: 1,
  },
  coverageLabel: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 2,
  },
  coverageValue: {
    fontSize: 16,
    fontWeight: '500',
    color: '#1C1C1E',
  },
  coverageNotIncluded: {
    color: '#FF3B30',
  },
  coverageHighPriority: {
    color: '#34C759',
    fontWeight: '600',
  },
  planFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginTop: 8,
  },
  priceContainer: {
    gap: 2,
  },
  price: {
    fontSize: 26,
    fontWeight: '700',
    color: '#4B76E5',
  },
  priceSubtext: {
    fontSize: 13,
    color: '#666666',
  },
  buttonContainer: {
    gap: 10,
    alignItems: 'flex-end',
  },
  buyButton: {
    backgroundColor: '#4B76E5',
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 12,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 6,
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 2,
  },
  buyButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  compareToggle: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 6,
    paddingVertical: 6,
    paddingHorizontal: 4,
  },
  selectedCompareToggle: {
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
    borderRadius: 8,
    paddingVertical: 6,
    paddingHorizontal: 8,
  },
  compareToggleText: {
    fontSize: 14,
    color: '#666666',
  },
  selectedCompareToggleText: {
    color: '#4B76E5',
    fontWeight: '500',
  },
  compareButtonContainer: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: 16,
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -3 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 8,
    zIndex: 100,
  },
  compareButton: {
    backgroundColor: '#4B76E5',
    paddingVertical: 16,
    borderRadius: 14,
    width: '100%',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 4,
  },
  compareButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
  },
  compareButtonIcon: {
    marginLeft: 8,
  },
  disabledButton: {
    opacity: 0.5,
  }
});