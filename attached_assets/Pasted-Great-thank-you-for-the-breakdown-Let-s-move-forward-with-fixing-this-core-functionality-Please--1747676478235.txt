Great, thank you for the breakdown. Let’s move forward with fixing this core functionality.

Please proceed with implementing the following improvements to ensure a consistent and useful quote flow across all insurance categories:

---

### Objective:
We want each insurance category screen (Travel, Auto, Pet, Health) to guide users through a meaningful quote journey — starting with a **quote input screen**, and only then showing **relevant filtered plans** based on that input.

---

### Requirements:

#### 1. Add Quote CTA to Category Screens
- Add a clear call-to-action button on each `/insurance/[category]` page.
- Example: “Enter Trip Details and Get Quotes” (for Travel), “Tell Us About Your Car” (for Auto), etc.
- Clicking this button should route the user to a quote input form at `/insurance/[category]/quote`.

#### 2. Connect to Category-Specific Quote Forms
- Use or refactor the `/insurance/[category]/quote.tsx` files to:
  - Display category-specific input fields (e.g., destination and dates for travel)
  - Validate input and capture the data
  - Store this data in a persistent state (Zustand store or context)
  - On submit, redirect to the filtered plan list (`/insurance/[category]` with filters applied)

#### 3. Implement Input → Filtering Logic
- Use the submitted user data to:
  - Filter the plans that are displayed to the user
  - Match based on attributes like duration, age, coverage needs, etc.
- Plans shown must reflect the user’s needs — not a generic list

#### 4. Visual Feedback & UX
- After submitting quote details, display a confirmation (e.g., “Your quotes are ready!”)
- Include a summary of user inputs above the filtered plans
- Ensure quote screens inherit the same UI style from the updated landing/auth screens

---

### Summary
This is a core part of the Briki experience and a major value driver. We need the flow to feel natural, intuitive, and helpful:
- Category Page → Quote Form → Filtered Plans
Please confirm once this flow is connected for all four insurance categories, or if there are dependencies to address first. Let’s prioritize this end-to-end journey to make Briki truly helpful.