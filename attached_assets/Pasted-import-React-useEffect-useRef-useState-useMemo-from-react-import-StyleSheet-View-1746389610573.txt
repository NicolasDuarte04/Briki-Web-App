import React, { useEffect, useRef, useState, useMemo } from 'react';
import { 
  StyleSheet, 
  View, 
  ScrollView, 
  SafeAreaView, 
  Platform, 
  TouchableOpacity, 
  Dimensions,
  ActivityIndicator,
  Alert,
  FlatList
} from 'react-native';
import { useLocalSearchParams, router } from 'expo-router';
import { ThemedText } from '../components/ThemedText';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withTiming,
  FadeIn,
  FadeInDown,
  SlideInRight,
  useAnimatedScrollHandler,
  FadeOut
} from 'react-native-reanimated';
import { Ionicons } from '@expo/vector-icons';
import { StatusBar } from 'expo-status-bar';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';
import * as Haptics from 'expo-haptics';

// Use relative import path instead of alias
import { insurancePlans } from './data/insurance-plans';

const { width } = Dimensions.get('window');
const COLUMN_WIDTH = Math.min(300, width * 0.8);
const AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);

export default function ComparePlansScreen() {
  const params = useLocalSearchParams();
  const insets = useSafeAreaInsets();
  const { fromCountry = 'Origin', toCountry = 'Destination', tripDuration = '7' } = params;

  const scrollX = useSharedValue(0);
  const scrollViewRef = useRef(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // Extract the plan IDs from the URL params
  const planIdsString = params.planIds?.toString() || '';
  const [selectedPlanIds, setSelectedPlanIds] = useState(planIdsString ? planIdsString.split(',') : []);

  // Keep track of current active tab
  const [activeTabIndex, setActiveTabIndex] = useState(0);

  // Safely find the corresponding insurance plans
  const selectedPlans = useMemo(() => {
    try {
      if (!selectedPlanIds.length) return [];
      return selectedPlanIds
        .map(id => {
          const plan = insurancePlans.find(p => p.id === id);
          if (!plan) console.warn(`Plan with ID ${id} not found`);
          return plan;
        })
        .filter(Boolean);
    } catch (err) {
      console.error('Error processing selected plans:', err);
      setError('Error loading insurance plans. Please try again.');
      return [];
    }
  }, [selectedPlanIds]);

  // Animation for the initial load
  const opacity = useSharedValue(0);
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
      opacity.value = withTiming(1, { duration: 500 });
    }, 500);
    return () => clearTimeout(timer);
  }, []);

  const animatedStyle = useAnimatedStyle(() => ({ opacity: opacity.value }));

  const scrollHandler = useAnimatedScrollHandler((event) => {
    scrollX.value = event.contentOffset.x;
    // Update active tab based on scroll position
    const newIndex = Math.round(event.contentOffset.x / (COLUMN_WIDTH + 16));
    if (newIndex >= 0 && newIndex < selectedPlans.length) {
      setActiveTabIndex(newIndex);
    }
  });

  // Calculate best value and best coverage plans with error handling
  const bestValue = useMemo(() => {
    if (!selectedPlans || selectedPlans.length === 0) return null;
    return selectedPlans.reduce((prev, curr) => 
      prev.price < curr.price ? prev : curr, selectedPlans[0]);
  }, [selectedPlans]);

  const bestCoverage = useMemo(() => {
    if (!selectedPlans || selectedPlans.length === 0) return null;

    return selectedPlans.reduce((prev, curr) => {
      try {
        const prevTotal = Object.values(prev.coverage).reduce((a, b) => 
          a + (typeof b === 'number' ? b : 0), 0);
        const currTotal = Object.values(curr.coverage).reduce((a, b) => 
          a + (typeof b === 'number' ? b : 0), 0);
        return prevTotal > currTotal ? prev : curr;
      } catch (err) {
        console.error('Error calculating coverage total:', err);
        return prev;
      }
    }, selectedPlans[0]);
  }, [selectedPlans]);

  const handleBackPress = () => router.back();

  const formatCurrency = (value) => typeof value === 'number' 
    ? value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") 
    : value;

  // Pagination dot animated styles
  const paginationDotStyles = useMemo(() => {
    if (!selectedPlans || selectedPlans.length === 0) return [];

    return selectedPlans.map((_, index) => {
      return useAnimatedStyle(() => {
        const isActive = Math.round(scrollX.value / (COLUMN_WIDTH + 16)) === index;
        return {
          width: isActive ? 16 : 8,
          opacity: isActive ? 1 : 0.5,
          backgroundColor: isActive ? '#4B76E5' : '#BCC5DC',
        };
      });
    });
  }, [selectedPlans, scrollX]); // Include scrollX in the dependencies

  // Handle tab selection
  const handleTabPress = (index) => {
    if (scrollViewRef.current) {
      try {
        // Provide haptic feedback
        if (Platform.OS !== 'web') {
          Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
        }

        // Calculate the x position to scroll to
        const xPosition = index * (COLUMN_WIDTH + 16);
        scrollViewRef.current.scrollTo({ x: xPosition, animated: true });
        setActiveTabIndex(index);
      } catch (error) {
        console.error('Error scrolling to plan:', error);
      }
    }
  };

  // Handle plan removal
  const handleRemovePlan = async (planId, index) => {
    try {
      // Provide haptic feedback
      if (Platform.OS !== 'web') {
        await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
      }

      // Show confirmation alert
      Alert.alert(
        "Remove Plan",
        "Are you sure you want to remove this plan from comparison?",
        [
          {
            text: "Cancel",
            style: "cancel"
          },
          {
            text: "Remove", 
            style: "destructive",
            onPress: () => {
              // Remove the plan ID from selectedPlanIds
              const newSelectedPlanIds = selectedPlanIds.filter(id => id !== planId);

              // Update state
              setSelectedPlanIds(newSelectedPlanIds);

              // If removing the active tab, adjust the active tab index
              if (activeTabIndex >= index) {
                const newActiveIndex = Math.max(0, activeTabIndex - 1);
                setActiveTabIndex(newActiveIndex);

                // Scroll to the new active tab if there are still plans left
                if (newSelectedPlanIds.length > 0 && scrollViewRef.current) {
                  const xPosition = newActiveIndex * (COLUMN_WIDTH + 16);
                  setTimeout(() => {
                    scrollViewRef.current.scrollTo({ x: xPosition, animated: true });
                  }, 100);
                }
              }
            }
          }
        ]
      );
    } catch (error) {
      console.error('Error removing plan:', error);
    }
  };

  if (isLoading) {
    return (
      <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
        <StatusBar style="dark" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4B76E5" />
          <ThemedText style={styles.loadingText}>Preparing plan comparison...</ThemedText>
        </View>
      </SafeAreaView>
    );
  }

  if (error) {
    return (
      <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
        <StatusBar style="dark" />
        <View style={styles.headerContainer}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={handleBackPress}
            accessibilityRole="button"
            accessibilityLabel="Go back to available plans"
          >
            <Ionicons name="chevron-back" size={24} color="#4B76E5" />
          </TouchableOpacity>
          <View style={styles.header}>
            <ThemedText style={styles.title}>Compare Plans</ThemedText>
          </View>
        </View>

        <Animated.View entering={FadeIn.delay(200).duration(500)} style={styles.noPlansContainer}>
          <Ionicons name="alert-circle-outline" size={60} color="#FF3B30" style={styles.noPlansIcon} />
          <ThemedText style={styles.noPlansText}>{error}</ThemedText>
          <TouchableOpacity 
            style={styles.backToPlansButton}
            onPress={handleBackPress}
            accessibilityRole="button"
          >
            <LinearGradient
              colors={['#4B76E5', '#3D68D8']}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
              style={styles.gradientButton}
            >
              <ThemedText style={styles.backToPlansButtonText}>
                Back to Available Plans
              </ThemedText>
            </LinearGradient>
          </TouchableOpacity>
        </Animated.View>
      </SafeAreaView>
    );
  }

  if (!selectedPlans || selectedPlans.length === 0) {
    return (
      <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
        <StatusBar style="dark" />
        <View style={styles.headerContainer}>
          <TouchableOpacity 
            style={styles.backButton}
            onPress={handleBackPress}
            accessibilityRole="button"
            accessibilityLabel="Go back to available plans"
          >
            <Ionicons name="chevron-back" size={24} color="#4B76E5" />
          </TouchableOpacity>
          <View style={styles.header}>
            <ThemedText style={styles.title}>Compare Plans</ThemedText>
          </View>
        </View>

        <Animated.View entering={FadeIn.delay(200).duration(500)} style={styles.noPlansContainer}>
          <Ionicons name="information-circle-outline" size={60} color="#4B76E5" style={styles.noPlansIcon} />
          <ThemedText style={styles.noPlansText}>
            No plans available to compare. Please go back and select some plans.
          </ThemedText>
          <TouchableOpacity 
            style={styles.backToPlansButton}
            onPress={handleBackPress}
            accessibilityRole="button"
          >
            <LinearGradient
              colors={['#4B76E5', '#3D68D8']}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
              style={styles.gradientButton}
            >
              <ThemedText style={styles.backToPlansButtonText}>
                Back to Available Plans
              </ThemedText>
            </LinearGradient>
          </TouchableOpacity>
        </Animated.View>
      </SafeAreaView>
    );
  }

  // Now we're sure we have valid plans to display
  const firstPlan = selectedPlans[0];
  const coverageCategories = Object.keys(firstPlan.coverage || {});

  // Reference for the tab scroll view
  const tabScrollRef = useRef(null);

  // Function to scroll the tab into view when active tab changes
  useEffect(() => {
    if (tabScrollRef.current && selectedPlans.length > 4) {
      // Calculate the position to scroll to
      const tabWidth = 100; // Approximate width of each tab
      const scrollPosition = Math.max(0, (activeTabIndex * tabWidth) - width / 4);

      // Scroll the tab view to center the active tab
      tabScrollRef.current.scrollTo({ x: scrollPosition, animated: true });
    }
  }, [activeTabIndex, selectedPlans.length]);

  return (
    <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
      <StatusBar style="dark" />

      {/* Header background gradient */}
      <View style={styles.headerBackground}>
        <LinearGradient
          colors={['rgba(75, 118, 229, 0.08)', 'rgba(255, 255, 255, 0)']}
          style={styles.headerGradient}
        />
      </View>

      <View style={styles.headerContainer}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={handleBackPress}
          accessibilityRole="button"
          accessibilityLabel="Go back to available plans"
        >
          <Ionicons name="chevron-back" size={24} color="#4B76E5" />
        </TouchableOpacity>
        <Animated.View 
          entering={FadeInDown.delay(100).duration(400)}
          style={styles.header}>
          <ThemedText style={styles.title}>Compare Plans</ThemedText>
          <ThemedText style={styles.subtitle}>
            {fromCountry} to {toCountry} • {tripDuration} days
          </ThemedText>
        </Animated.View>
      </View>

      {/* Message for single plan */}
      {selectedPlans.length === 1 && (
        <Animated.View 
          entering={FadeIn.duration(400)}
          style={styles.singlePlanMessage}
        >
          <Ionicons name="information-circle" size={20} color="#FF9500" />
          <ThemedText style={styles.singlePlanText}>
            You need 2+ plans to compare. Add more from available plans.
          </ThemedText>
        </Animated.View>
      )}

      {/* Tab Bar Selector - with horizontal scroll if many plans */}
      <ScrollView 
        ref={tabScrollRef}
        horizontal
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.tabScrollContainer}
      >
        <Animated.View 
          entering={FadeInDown.delay(150).duration(400)}
          style={styles.tabBarContainer}
        >
          {selectedPlans.map((plan, index) => (
            <TouchableOpacity
              key={`tab-${plan.id}`}
              accessibilityRole="tab"
              accessibilityState={{ selected: activeTabIndex === index }}
              accessibilityLabel={`${plan.provider} tab`}
              style={[
                styles.tab,
                activeTabIndex === index && styles.activeTab
              ]}
              onPress={() => handleTabPress(index)}
              activeOpacity={0.7}
            >
              <ThemedText 
                style={[
                  styles.tabText,
                  activeTabIndex === index && styles.activeTabText
                ]}
                numberOfLines={1}
                ellipsizeMode="tail"
              >
                {plan.provider}
              </ThemedText>
              {activeTabIndex === index && (
                <View style={styles.activeTabIndicator} />
              )}
            </TouchableOpacity>
          ))}
        </Animated.View>
      </ScrollView>

      <Animated.View 
        entering={FadeInDown.delay(200).springify()}
        style={styles.instructionsContainer}
      >
        <Ionicons name="swap-horizontal" size={18} color="#4B76E5" />
        <ThemedText style={styles.instructions}>
          Swipe horizontally to compare all {selectedPlans.length} plans
        </ThemedText>
      </Animated.View>

      <Animated.ScrollView 
        ref={scrollViewRef}
        horizontal 
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.horizontalScrollContent}
        decelerationRate="fast"
        snapToInterval={COLUMN_WIDTH + 16}
        onScroll={scrollHandler}
        scrollEventThrottle={16}
      >
        <View style={styles.compareGrid}>
          {/* First column: Category labels */}
          <Animated.View 
            entering={SlideInRight.delay(200).springify()}
            style={styles.labelsColumn}
          >
            <View style={styles.labelHeaderPlaceholder} />
            <View style={styles.coverageLabelsContainer}>
              {coverageCategories.map((key) => (
                <View key={`label-${key}`} style={styles.coverageLabelRow}>
                  <ThemedText style={styles.coverageCategoryLabel}>
                    {key}
                  </ThemedText>
                </View>
              ))}

              {/* Added region and description labels */}
              <View style={styles.extraInfoRow}>
                <ThemedText style={styles.coverageCategoryLabel}>
                  Region
                </ThemedText>
              </View>
              <View style={styles.extraInfoRow}>
                <ThemedText style={styles.coverageCategoryLabel}>
                  Description
                </ThemedText>
              </View>
            </View>
          </Animated.View>

          {/* Plan columns */}
          {selectedPlans.map((plan, planIndex) => {
            const isPlanBestValue = bestValue && plan.id === bestValue.id;
            const isPlanBestCoverage = bestCoverage && plan.id === bestCoverage.id;

            return (
              <Animated.View 
                key={plan.id} 
                entering={SlideInRight.delay(300 + planIndex * 100).springify()}
                style={[styles.planColumn, animatedStyle]}
              >
                <View style={[
                  styles.planHeader,
                  isPlanBestValue && styles.bestValueHeader,
                  isPlanBestCoverage && styles.bestCoverageHeader
                ]}>
                  {/* Close Button */}
                  <TouchableOpacity
                    style={styles.removeButton}
                    onPress={() => handleRemovePlan(plan.id, planIndex)}
                    accessibilityLabel={`Remove ${plan.provider} plan`}
                    accessibilityRole="button"
                    hitSlop={{ top: 8, right: 8, bottom: 8, left: 8 }}
                  >
                    <Ionicons name="close" size={18} color="#666666" />
                  </TouchableOpacity>

                  <View style={styles.planHeaderContent}>
                    <ThemedText style={styles.providerName} numberOfLines={1} ellipsizeMode="tail">
                      {plan.provider}
                    </ThemedText>
                    <View style={styles.priceContainer}>
                      <ThemedText style={styles.price}>${formatCurrency(plan.price)}</ThemedText>
                      <ThemedText style={styles.perPerson}>per person</ThemedText>
                    </View>
                    {plan.rating && (
                      <View style={styles.ratingContainer}>
                        <Ionicons name="star" size={16} color="#F8B400" />
                        <ThemedText style={styles.ratingText}>
                          {typeof plan.rating === 'number' ? plan.rating.toFixed(1) : plan.rating}
                        </ThemedText>
                      </View>
                    )}
                  </View>

                  <View style={styles.badgeContainer}>
                    {isPlanBestValue && (
                      <View style={[styles.badge, styles.bestValueBadge]}>
                        <Ionicons name="cash-outline" size={12} color="#FFFFFF" style={styles.badgeIcon} />
                        <ThemedText style={styles.badgeText}>Best Value</ThemedText>
                      </View>
                    )}
                    {isPlanBestCoverage && (
                      <View style={[styles.badge, styles.bestCoverageBadge]}>
                        <Ionicons name="shield-checkmark-outline" size={12} color="#FFFFFF" style={styles.badgeIcon} />
                        <ThemedText style={styles.badgeText}>Best Coverage</ThemedText>
                      </View>
                    )}
                    {plan.tag && (
                      <View style={[styles.badge, styles.planTagBadge]}>
                        <ThemedText style={styles.badgeText}>{plan.tag}</ThemedText>
                      </View>
                    )}
                  </View>
                </View>

                <View style={styles.coverageList}>
                  {Object.entries(plan.coverage).map(([key, value], index) => {
                    const isHighestValue = typeof value === 'number' && 
                      selectedPlans.every(p => 
                        typeof p.coverage[key] === 'number' ? p.coverage[key] <= value : true
                      );

                    return (
                      <View 
                        key={`${plan.id}-${key}`} 
                        style={[
                          styles.coverageItem,
                          index % 2 === 0 && styles.coverageItemAlternate
                        ]}
                      >
                        <View style={styles.coverageValueContainer}>
                          {typeof value === 'number' ? (
                            <ThemedText style={[
                              styles.coverageValue,
                              isHighestValue && styles.highestCoverageValue
                            ]}>
                              ${formatCurrency(value)}
                            </ThemedText>
                          ) : (
                            <View style={styles.coverageTextContainer}>
                              <Ionicons 
                                name={value === "Included" ? "checkmark-circle" : "close-circle"} 
                                size={18} 
                                color={value === "Included" ? "#34C759" : "#FF3B30"} 
                              />
                              <ThemedText style={[
                                styles.coverageTextValue,
                                value !== "Included" && styles.coverageNotIncluded
                              ]}>
                                {value}
                              </ThemedText>
                            </View>
                          )}
                        </View>
                      </View>
                    );
                  })}

                  {/* Added region display */}
                  <View style={[styles.coverageItem, styles.coverageItemAlternate]}>
                    <View style={styles.coverageValueContainer}>
                      <ThemedText style={styles.coverageText}>
                        {plan.region || 'Global'}
                      </ThemedText>
                    </View>
                  </View>

                  {/* Added description display */}
                  <View style={styles.coverageItem}>
                    <View style={styles.coverageValueContainer}>
                      <ThemedText 
                        style={styles.coverageDescription} 
                        numberOfLines={3} 
                        ellipsizeMode="tail"
                      >
                        {plan.description || 'No description available'}
                      </ThemedText>
                    </View>
                  </View>
                </View>

                <AnimatedTouchable 
                  style={styles.selectButton}
                  onPress={() => {
                    router.push({
                      pathname: '/checkout',
                      params: { 
                        plan: JSON.stringify(plan),
                        fromCountry,
                        toCountry,
                        tripDuration
                      }
                    });
                  }}
                  accessibilityRole="button"
                  accessibilityLabel={`Select ${plan.provider} plan`}
                >
                  <LinearGradient
                    colors={['#4B76E5', '#3D68D8']}
                    start={{ x: 0, y: 0 }}
                    end={{ x: 1, y: 0 }}
                    style={styles.buttonGradient}
                  >
                    <ThemedText style={styles.selectButtonText}>Select Plan</ThemedText>
                    <Ionicons name="chevron-forward" size={16} color="#FFFFFF" />
                  </LinearGradient>
                </AnimatedTouchable>
              </Animated.View>
            );
          })}
        </View>
      </Animated.ScrollView>

      {/* Pagination dots - shown only when we have multiple plans */}
      {selectedPlans.length > 1 && (
        <View style={styles.paginationContainer}>
          {selectedPlans.map((_, index) => (
            <Animated.View 
              key={`dot-${index}`}
              style={[styles.paginationDot, paginationDotStyles[index]]}
            />
          ))}
        </View>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F8FA',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
  headerBackground: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: 180,
    zIndex: -1,
  },
  headerGradient: {
    width: '100%',
    height: '100%',
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 16,
    paddingBottom: 12,
    zIndex: 10,
  },
  backButton: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  header: {
    flex: 1,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 4,
    color: '#1A1A1A',
  },
  subtitle: {
    fontSize: 15,
    color: '#555555', // Increased contrast
    fontWeight: '400',
  },
  // Single plan message
  singlePlanMessage: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(255, 149, 0, 0.1)',
    paddingVertical: 8,
    paddingHorizontal: 16,
    marginHorizontal: 20,
    borderRadius: 8,
    marginBottom: 12,
  },
  singlePlanText: {
    marginLeft: 8,
    fontSize: 14,
    color: '#FF9500',
    fontWeight: '500',
  },
  // Tab Bar Styles with scrolling
  tabScrollContainer: {
    paddingHorizontal: 20,
  },
  tabBarContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
    marginBottom: 12,
    marginTop: 4,
  },
  tab: {
    paddingVertical: 8,
    paddingHorizontal: 12,
    marginRight: 8,
    borderRadius: 8,
    minWidth: 80,
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
  },
  activeTab: {
    backgroundColor: 'rgba(75, 118, 229, 0.08)',
  },
  tabText: {
    fontSize: 14,
    color: '#666666',
    fontWeight: '500',
  },
  activeTabText: {
    color: '#4B76E5',
    fontWeight: '700',
  },
  activeTabIndicator: {
    position: 'absolute',
    bottom: 0,
    height: 3,
    width: '60%',
    backgroundColor: '#4B76E5',
    borderRadius: 1.5,
  },
  // Remove Button Styles
  removeButton: {
    position: 'absolute',
    top: 8,
    right: 8,
    width: 28,
    height: 28,
    borderRadius: 14,
    backgroundColor: 'rgba(0, 0, 0, 0.05)',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 100,
  },
  instructionsContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 16,
    paddingHorizontal: 24,
    paddingVertical: 10,
    backgroundColor: 'rgba(75, 118, 229, 0.08)',
    borderRadius: 12,
    alignSelf: 'center',
  },
  instructions: {
    fontSize: 15,
    color: '#4B76E5',
    marginLeft: 8,
    fontWeight: '500',
  },
  horizontalScrollContent: {
    paddingHorizontal: 20,
    paddingBottom: 40,
  },
  compareGrid: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 16,
    paddingBottom: 8,
  },
  labelsColumn: {
    width: 140,
    borderRadius: 16,
    marginRight: 0,
  },
  labelHeaderPlaceholder: {
    height: 140,
    marginBottom: 16,
  },
  coverageLabelsContainer: {
    marginTop: 8,
  },
  coverageLabelRow: {
    height: 64,
    justifyContent: 'center',
    paddingLeft: 4,
    marginBottom: 12,
  },
  extraInfoRow: {
    height: 64,
    justifyContent: 'center',
    paddingLeft: 4,
    marginBottom: 12,
  },
  coverageCategoryLabel: {
    fontSize: 15,
    fontWeight: '600',
    color: '#444444', // Increased contrast
  },
  planColumn: {
    width: COLUMN_WIDTH,
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    padding: 0,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#E5E5EA',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.08,
    shadowRadius: 10,
    elevation: 3,
  },
  planHeader: {
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5EA',
    backgroundColor: '#FFFFFF',
    paddingTop: 24, // Extra padding for the remove button
  },
  bestValueHeader: {
    backgroundColor: 'rgba(52, 199, 89, 0.05)',
    borderBottomColor: '#34C759',
  },
  bestCoverageHeader: {
    backgroundColor: 'rgba(75, 118, 229, 0.05)',
    borderBottomColor: '#4B76E5',
  },
  planHeaderContent: {
    marginBottom: 12,
  },
  providerName: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1A1A1A',
    marginBottom: 8,
    height: 30, // Reduced height for better layout
  },
  priceContainer: {
    flexDirection: 'row',
    alignItems: 'baseline',
  },
  price: {
    fontSize: 24,
    color: '#4B76E5',
    fontWeight: '700',
    marginRight: 4,
  },
  perPerson: {
    fontSize: 14,
    color: '#555555', // Increased contrast
    fontWeight: '400',
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 4,
  },
  ratingText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#555555',
    marginLeft: 4,
  },
  badgeContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    marginTop: 4,
  },
  badge: {
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 30,
    flexDirection: 'row',
    alignItems: 'center',
  },
  bestValueBadge: {
    backgroundColor: '#34C759',
  },
  bestCoverageBadge: {
    backgroundColor: '#4B76E5',
  },
  planTagBadge: {
    backgroundColor: '#F8B400', // Briki gold color
  },
  badgeIcon: {
    marginRight: 4,
  },
  badgeText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: '600',
  },
  coverageList: {
    paddingHorizontal: 16,
    paddingTop: 16,
    paddingBottom: 8,
  },
  coverageItem: {
    minHeight: 64,
    justifyContent: 'center',
    marginBottom: 12,
    padding: 12,
    borderRadius: 10,
  },
  coverageItemAlternate: {
    backgroundColor: 'rgba(242, 242, 247, 0.5)',
  },
  coverageValueContainer: {
    alignItems: 'flex-start',
  },
  coverageValue: {
    fontSize: 18,
    color: '#1A1A1A',
    fontWeight: '600',
  },
  highestCoverageValue: {
    color: '#34C759',
    fontWeight: '700',
  },
  coverageTextContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  coverageTextValue: {
    fontSize: 16,
    marginLeft: 6,
    color: '#34C759',
    fontWeight: '500',
  },
  coverageNotIncluded: {
    color: '#FF3B30',
  },
  coverageText: {
    fontSize: 16,
    color: '#1A1A1A',
    fontWeight: '500',
  },
  coverageDescription: {
    fontSize: 14,
    color: '#444444', // Increased contrast
    lineHeight: 20,
  },
  selectButton: {
    marginHorizontal: 16,
    marginBottom: 16,
    borderRadius: 12,
    overflow: 'hidden',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
    minHeight: 48, // Ensure proper tap target size
  },
  buttonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 14,
  },
  selectButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
    marginRight: 6,
  },
  paginationContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    position: 'absolute',
    bottom: 20,
    left: 0,
    right: 0,
    height: 20,
  },
  paginationDot: {
    height: 8,
    width: 8,
    borderRadius: 4,
    marginHorizontal: 4,
  },
  noPlansContainer: {
    flex: 1,
    paddingHorizontal: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  noPlansIcon: {
    marginBottom: 16,
  },
  noPlansText: {
    fontSize: 16,
    textAlign: 'center',
    color: '#444444', // Increased contrast
    marginBottom: 24,
    lineHeight: 24,
  },
  backToPlansButton: {
    borderRadius: 12,
    overflow: 'hidden',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
    minHeight: 48, // Ensure proper tap target size
  },
  gradientButton: {
    paddingVertical: 14,
    paddingHorizontal: 24,
  },
  backToPlansButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});