import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  ScrollView,
  TouchableOpacity,
  Image,
  SafeAreaView,
  StatusBar,
  Dimensions,
  Platform,
  Animated,
  ImageBackground,
  ActivityIndicator
} from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import {
  Card,
  Title,
  Paragraph,
  Button,
  Searchbar,
  Chip,
  IconButton,
  ProgressBar,
  RadioButton
} from 'react-native-paper';
import { MaterialCommunityIcons, Ionicons, FontAwesome5 } from '@expo/vector-icons';
import { LineChart } from 'react-native-chart-kit';
import { useQuery } from 'react-query';

import { MainStackParamList } from '../navigation/AppNavigator';
import { useAuth } from '../contexts/AuthContext';
import { api } from '../services/api';
import { COLORS } from '../utils/theme';

// Get screen dimensions for responsive layout
const { width: SCREEN_WIDTH, height: SCREEN_HEIGHT } = Dimensions.get('window');
const IS_IPHONE = Platform.OS === 'ios';

// Mock data for destinations with weather risk
const DESTINATIONS = [
  {
    id: 1,
    name: 'Barcelona',
    country: 'España',
    image: 'https://images.unsplash.com/photo-1583422409516-2895a77efded?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1470&q=80',
    weatherRisk: 'low',
    temperature: 22,
    rainfall: 15,
    windSpeed: 10,
    stormProbability: 5,
    nextWeekForecast: [
      { day: 'Lun', temp: 22, icon: 'weather-sunny' },
      { day: 'Mar', temp: 23, icon: 'weather-partly-cloudy' },
      { day: 'Mié', temp: 21, icon: 'weather-partly-cloudy' },
      { day: 'Jue', temp: 20, icon: 'weather-cloudy' },
      { day: 'Vie', temp: 21, icon: 'weather-partly-cloudy' },
      { day: 'Sáb', temp: 22, icon: 'weather-sunny' },
      { day: 'Dom', temp: 24, icon: 'weather-sunny' }
    ],
    riskFactors: {
      hurricane: 'Bajo',
      flooding: 'Bajo',
      earthquake: 'Moderado',
      terrorism: 'Bajo'
    },
    travelAdvisory: 'Seguro para viajar. No se reportan incidentes recientes.',
    travelAdvisoryLevel: 1,
    bestTimeToVisit: 'Mayo a Octubre'
  },
  {
    id: 2,
    name: 'Miami',
    country: 'Estados Unidos',
    image: 'https://images.unsplash.com/photo-1514214246283-d427a95c5d2f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1480&q=80',
    weatherRisk: 'medium',
    temperature: 29,
    rainfall: 40,
    windSpeed: 18,
    stormProbability: 30,
    nextWeekForecast: [
      { day: 'Lun', temp: 29, icon: 'weather-partly-cloudy' },
      { day: 'Mar', temp: 30, icon: 'weather-partly-cloudy' },
      { day: 'Mié', temp: 31, icon: 'weather-lightning-rainy' },
      { day: 'Jue', temp: 28, icon: 'weather-rainy' },
      { day: 'Vie', temp: 27, icon: 'weather-cloudy' },
      { day: 'Sáb', temp: 29, icon: 'weather-partly-cloudy' },
      { day: 'Dom', temp: 30, icon: 'weather-sunny' }
    ],
    riskFactors: {
      hurricane: 'Alto',
      flooding: 'Moderado',
      earthquake: 'Bajo',
      terrorism: 'Bajo'
    },
    travelAdvisory: 'Precaución durante temporada de huracanes (Junio-Noviembre).',
    travelAdvisoryLevel: 2,
    bestTimeToVisit: 'Diciembre a Mayo'
  },
  {
    id: 3,
    name: 'Cancún',
    country: 'México',
    image: 'https://images.unsplash.com/photo-1590523741831-ab7e8b8f9c7f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1074&q=80',
    weatherRisk: 'high',
    temperature: 31,
    rainfall: 85,
    windSpeed: 25,
    stormProbability: 45,
    nextWeekForecast: [
      { day: 'Lun', temp: 31, icon: 'weather-partly-cloudy' },
      { day: 'Mar', temp: 32, icon: 'weather-lightning-rainy' },
      { day: 'Mié', temp: 30, icon: 'weather-pouring' },
      { day: 'Jue', temp: 29, icon: 'weather-pouring' },
      { day: 'Vie', temp: 30, icon: 'weather-lightning-rainy' },
      { day: 'Sáb', temp: 31, icon: 'weather-partly-cloudy' },
      { day: 'Dom', temp: 31, icon: 'weather-partly-cloudy' }
    ],
    riskFactors: {
      hurricane: 'Alto',
      flooding: 'Alto',
      earthquake: 'Bajo',
      terrorism: 'Bajo'
    },
    travelAdvisory: 'Alto riesgo durante temporada de huracanes (Junio-Noviembre). Se recomienda seguro con cobertura de cancelación.',
    travelAdvisoryLevel: 3,
    bestTimeToVisit: 'Diciembre a Abril'
  },
  {
    id: 4,
    name: 'Bogotá',
    country: 'Colombia',
    image: 'https://images.unsplash.com/photo-1628105541664-ae16da6a7575?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1074&q=80',
    weatherRisk: 'low',
    temperature: 18,
    rainfall: 35,
    windSpeed: 8,
    stormProbability: 10,
    nextWeekForecast: [
      { day: 'Lun', temp: 18, icon: 'weather-partly-cloudy' },
      { day: 'Mar', temp: 19, icon: 'weather-partly-cloudy' },
      { day: 'Mié', temp: 19, icon: 'weather-partly-cloudy' },
      { day: 'Jue', temp: 17, icon: 'weather-rainy' },
      { day: 'Vie', temp: 17, icon: 'weather-rainy' },
      { day: 'Sáb', temp: 18, icon: 'weather-partly-cloudy' },
      { day: 'Dom', temp: 19, icon: 'weather-sunny' }
    ],
    riskFactors: {
      hurricane: 'Bajo',
      flooding: 'Moderado',
      earthquake: 'Moderado',
      terrorism: 'Bajo'
    },
    travelAdvisory: 'Generalmente seguro. Precaución con lluvias repentinas.',
    travelAdvisoryLevel: 1,
    bestTimeToVisit: 'Diciembre a Marzo, Julio a Agosto'
  },
  {
    id: 5,
    name: 'Tokio',
    country: 'Japón',
    image: 'https://images.unsplash.com/photo-1536098561742-ca998e48cbcc?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1536&q=80',
    weatherRisk: 'medium',
    temperature: 25,
    rainfall: 60,
    windSpeed: 12,
    stormProbability: 25,
    nextWeekForecast: [
      { day: 'Lun', temp: 25, icon: 'weather-partly-cloudy' },
      { day: 'Mar', temp: 26, icon: 'weather-rainy' },
      { day: 'Mié', temp: 24, icon: 'weather-rainy' },
      { day: 'Jue', temp: 23, icon: 'weather-rainy' },
      { day: 'Vie', temp: 25, icon: 'weather-partly-cloudy' },
      { day: 'Sáb', temp: 26, icon: 'weather-partly-cloudy' },
      { day: 'Dom', temp: 26, icon: 'weather-sunny' }
    ],
    riskFactors: {
      hurricane: 'Moderado',
      flooding: 'Moderado',
      earthquake: 'Alto',
      terrorism: 'Bajo'
    },
    travelAdvisory: 'Precaución durante temporada de tifones (Agosto-Octubre). Riesgo sísmico constante.',
    travelAdvisoryLevel: 2,
    bestTimeToVisit: 'Marzo a Mayo, Octubre a Noviembre'
  }
];

type WeatherRiskScreenNavigationProp = StackNavigationProp<MainStackParamList, 'WeatherRisk'>;

const WeatherRiskScreen = () => {
  const navigation = useNavigation<WeatherRiskScreenNavigationProp>();
  const { user } = useAuth();
  
  // State
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [selectedDestination, setSelectedDestination] = useState<any>(null);
  const [riskTab, setRiskTab] = useState<'weather' | 'travel'>('weather');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  
  // Animation values
  const fadeAnim = useState(new Animated.Value(0))[0];
  const slideAnim = useState(new Animated.Value(50))[0];
  
  // Fetch destinations
  const fetchDestinations = async () => {
    console.log('Using mock destination data');
    setIsLoading(true);
    
    // Simulate network delay
    await new Promise(resolve => setTimeout(resolve, 800));
    
    setIsLoading(false);
    return DESTINATIONS;
  };
  
  const { 
    data: destinations,
    isLoading: isLoadingDestinations,
    isError
  } = useQuery(['destinations'], fetchDestinations);
  
  // Animation when component mounts
  useEffect(() => {
    Animated.parallel([
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }),
      Animated.spring(slideAnim, {
        toValue: 0,
        tension: 50,
        friction: 7,
        useNativeDriver: true,
      })
    ]).start();
  }, []);
  
  // Set the first destination when data is loaded
  useEffect(() => {
    if (destinations && destinations.length > 0 && !selectedDestination) {
      setSelectedDestination(destinations[0]);
    }
  }, [destinations]);
  
  // Filter destinations based on search query
  const filteredDestinations = React.useMemo(() => {
    if (!destinations) return [];
    
    if (!searchQuery) return destinations;
    
    const query = searchQuery.toLowerCase();
    return destinations.filter(
      dest => 
        dest.name.toLowerCase().includes(query) || 
        dest.country.toLowerCase().includes(query)
    );
  }, [destinations, searchQuery]);
  
  // Get weather risk color
  const getRiskColor = (risk: string): string => {
    switch(risk) {
      case 'low':
        return COLORS.success;
      case 'medium':
        return COLORS.warning;
      case 'high':
        return COLORS.error;
      default:
        return COLORS.gray;
    }
  };
  
  // Get travel advisory level color
  const getAdvisoryColor = (level: number): string => {
    switch(level) {
      case 1:
        return COLORS.success;
      case 2:
        return COLORS.warning;
      case 3:
        return COLORS.warning + 'DD';
      case 4:
        return COLORS.error;
      default:
        return COLORS.gray;
    }
  };
  
  // Get risk level text
  const getRiskText = (risk: string): string => {
    switch(risk) {
      case 'low':
        return 'Bajo';
      case 'medium':
        return 'Moderado';
      case 'high':
        return 'Alto';
      default:
        return 'Desconocido';
    }
  };
  
  // Get risk factor color
  const getRiskFactorColor = (level: string): string => {
    switch(level) {
      case 'Bajo':
        return COLORS.success;
      case 'Moderado':
        return COLORS.warning;
      case 'Alto':
        return COLORS.error;
      default:
        return COLORS.gray;
    }
  };
  
  // Get rating from risk level
  const getRiskRating = (risk: string): number => {
    switch(risk) {
      case 'low':
        return 0.2;
      case 'medium':
        return 0.5;
      case 'high':
        return 0.8;
      default:
        return 0;
    }
  };
  
  if (isLoadingDestinations || isLoading) {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <StatusBar barStyle="dark-content" backgroundColor={COLORS.background} />
        <ActivityIndicator size="large" color={COLORS.primary} />
        <Text style={styles.loadingText}>Analizando datos climáticos...</Text>
      </SafeAreaView>
    );
  }
  
  if (isError) {
    return (
      <SafeAreaView style={styles.errorContainer}>
        <StatusBar barStyle="dark-content" backgroundColor={COLORS.background} />
        <MaterialCommunityIcons name="weather-cloudy-alert" size={60} color={COLORS.error} />
        <Text style={styles.errorTitle}>Error al cargar datos</Text>
        <Text style={styles.errorText}>No pudimos obtener la información climática.</Text>
        <Button 
          mode="contained" 
          onPress={() => navigation.goBack()}
          style={styles.errorButton}
        >
          Volver
        </Button>
      </SafeAreaView>
    );
  }
  
  return (
    <SafeAreaView style={styles.container}>
      <StatusBar barStyle="dark-content" backgroundColor={COLORS.background} />
      
      {/* Header */}
      <View style={styles.header}>
        <View style={styles.headerContent}>
          <TouchableOpacity onPress={() => navigation.goBack()} style={styles.backButton}>
            <MaterialCommunityIcons name="arrow-left" size={24} color={COLORS.primary} />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Riesgos Climáticos</Text>
          <View style={{ width: 24 }} /> {/* Empty view for alignment */}
        </View>
        
        <View style={styles.searchContainer}>
          <Searchbar
            placeholder="Buscar destino"
            onChangeText={setSearchQuery}
            value={searchQuery}
            style={styles.searchbar}
            iconColor={COLORS.primary}
          />
        </View>
      </View>
      
      {/* Destination Carousel */}
      <ScrollView 
        horizontal 
        showsHorizontalScrollIndicator={false}
        contentContainerStyle={styles.destinationsContainer}
      >
        {filteredDestinations.map((destination) => (
          <TouchableOpacity
            key={destination.id}
            onPress={() => setSelectedDestination(destination)}
            activeOpacity={0.8}
          >
            <Card 
              style={[
                styles.destinationCard, 
                selectedDestination?.id === destination.id ? styles.selectedDestinationCard : {}
              ]}
            >
              <ImageBackground
                source={{ uri: destination.image }}
                style={styles.destinationImage}
                imageStyle={{ borderRadius: 12 }}
              >
                <View style={[styles.riskBadge, { backgroundColor: getRiskColor(destination.weatherRisk) }]}>
                  <MaterialCommunityIcons name="weather-lightning" size={14} color={COLORS.white} />
                  <Text style={styles.riskText}>{getRiskText(destination.weatherRisk)}</Text>
                </View>
                
                <View style={styles.destinationOverlay}>
                  <Text style={styles.destinationName}>{destination.name}</Text>
                  <Text style={styles.destinationCountry}>{destination.country}</Text>
                </View>
              </ImageBackground>
            </Card>
          </TouchableOpacity>
        ))}
      </ScrollView>
      
      {/* Main Content */}
      {selectedDestination ? (
        <Animated.View 
          style={[
            styles.detailsContainer,
            {
              opacity: fadeAnim,
              transform: [{ translateY: slideAnim }]
            }
          ]}
        >
          <ScrollView contentContainerStyle={styles.detailsScrollContent}>
            {/* Risk Tabs */}
            <View style={styles.tabsContainer}>
              <TouchableOpacity 
                style={[styles.tabButton, riskTab === 'weather' ? styles.activeTabButton : {}]}
                onPress={() => setRiskTab('weather')}
              >
                <MaterialCommunityIcons 
                  name="weather-lightning" 
                  size={18} 
                  color={riskTab === 'weather' ? COLORS.primary : COLORS.gray} 
                />
                <Text style={[
                  styles.tabButtonText,
                  riskTab === 'weather' ? styles.activeTabText : {}
                ]}>
                  Clima
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity 
                style={[styles.tabButton, riskTab === 'travel' ? styles.activeTabButton : {}]}
                onPress={() => setRiskTab('travel')}
              >
                <MaterialCommunityIcons 
                  name="shield-alert" 
                  size={18} 
                  color={riskTab === 'travel' ? COLORS.primary : COLORS.gray} 
                />
                <Text style={[
                  styles.tabButtonText,
                  riskTab === 'travel' ? styles.activeTabText : {}
                ]}>
                  Seguridad
                </Text>
              </TouchableOpacity>
            </View>
            
            {/* Weather Risk Tab */}
            {riskTab === 'weather' && (
              <>
                {/* Current Weather Summary */}
                <Card style={styles.weatherCard}>
                  <Card.Content>
                    <View style={styles.weatherHeader}>
                      <View>
                        <Text style={styles.weatherTitle}>Clima Actual</Text>
                        <Text style={styles.weatherSubtitle}>{selectedDestination.name}, {selectedDestination.country}</Text>
                      </View>
                      <View style={styles.weatherIconContainer}>
                        <MaterialCommunityIcons 
                          name={
                            selectedDestination.weatherRisk === 'low' ? "weather-sunny" :
                            selectedDestination.weatherRisk === 'medium' ? "weather-partly-cloudy" :
                            "weather-lightning-rainy"
                          } 
                          size={40} 
                          color={getRiskColor(selectedDestination.weatherRisk)} 
                        />
                        <Text style={[
                          styles.temperatureText,
                          { color: getRiskColor(selectedDestination.weatherRisk) }
                        ]}>
                          {selectedDestination.temperature}°C
                        </Text>
                      </View>
                    </View>
                    
                    <View style={styles.weatherMetrics}>
                      <View style={styles.weatherMetric}>
                        <MaterialCommunityIcons name="water" size={18} color={COLORS.primary} />
                        <Text style={styles.metricLabel}>Lluvia</Text>
                        <Text style={styles.metricValue}>{selectedDestination.rainfall} mm</Text>
                      </View>
                      
                      <View style={styles.weatherMetric}>
                        <MaterialCommunityIcons name="weather-windy" size={18} color={COLORS.primary} />
                        <Text style={styles.metricLabel}>Viento</Text>
                        <Text style={styles.metricValue}>{selectedDestination.windSpeed} km/h</Text>
                      </View>
                      
                      <View style={styles.weatherMetric}>
                        <MaterialCommunityIcons name="weather-lightning" size={18} color={COLORS.primary} />
                        <Text style={styles.metricLabel}>Tormenta</Text>
                        <Text style={styles.metricValue}>{selectedDestination.stormProbability}%</Text>
                      </View>
                    </View>
                    
                    <Divider style={styles.divider} />
                    
                    {/* Risk Indicator */}
                    <View style={styles.riskIndicatorContainer}>
                      <Text style={styles.riskIndicatorTitle}>Nivel de Riesgo Climático</Text>
                      <View style={styles.riskIndicator}>
                        <ProgressBar 
                          progress={getRiskRating(selectedDestination.weatherRisk)} 
                          color={getRiskColor(selectedDestination.weatherRisk)}
                          style={styles.riskProgressBar}
                        />
                        <View style={styles.riskLabels}>
                          <Text style={styles.riskLabel}>Bajo</Text>
                          <Text style={styles.riskLabel}>Moderado</Text>
                          <Text style={styles.riskLabel}>Alto</Text>
                        </View>
                      </View>
                      
                      <Text style={styles.riskDescription}>
                        {selectedDestination.weatherRisk === 'low' ? 
                          'Condiciones climáticas favorables con bajo riesgo de eventos severos.' :
                         selectedDestination.weatherRisk === 'medium' ? 
                          'Posibilidad de lluvias y tormentas ocasionales. Se recomienda precaución.' :
                          'Alto riesgo de eventos climáticos severos. Se recomienda seguro con cobertura amplia.'}
                      </Text>
                    </View>
                  </Card.Content>
                </Card>
                
                {/* Weekly Forecast */}
                <Card style={styles.forecastCard}>
                  <Card.Content>
                    <Text style={styles.forecastTitle}>Pronóstico Semanal</Text>
                    
                    <View style={styles.forecastContainer}>
                      {selectedDestination.nextWeekForecast.map((day, index) => (
                        <View key={index} style={styles.forecastDay}>
                          <Text style={styles.forecastDayText}>{day.day}</Text>
                          <MaterialCommunityIcons name={day.icon} size={24} color={COLORS.primary} />
                          <Text style={styles.forecastTemp}>{day.temp}°</Text>
                        </View>
                      ))}
                    </View>
                  </Card.Content>
                </Card>
                
                {/* Recommendations */}
                <Card style={styles.recommendationsCard}>
                  <Card.Content>
                    <Text style={styles.recommendationsTitle}>Recomendaciones</Text>
                    
                    <View style={styles.recommendationItem}>
                      <MaterialCommunityIcons name="calendar-check" size={20} color={COLORS.primary} />
                      <View style={styles.recommendationContent}>
                        <Text style={styles.recommendationLabel}>Mejor época para viajar</Text>
                        <Text style={styles.recommendationText}>{selectedDestination.bestTimeToVisit}</Text>
                      </View>
                    </View>
                    
                    <View style={styles.recommendationItem}>
                      <MaterialCommunityIcons name="shield-check" size={20} color={COLORS.primary} />
                      <View style={styles.recommendationContent}>
                        <Text style={styles.recommendationLabel}>Seguro Recomendado</Text>
                        <Text style={styles.recommendationText}>
                          {selectedDestination.weatherRisk === 'low' ? 
                            'Seguro básico con cobertura médica.' :
                           selectedDestination.weatherRisk === 'medium' ? 
                            'Seguro con cobertura de cancelación y retrasos.' :
                            'Seguro con cobertura amplia incluyendo eventos climáticos extremos.'}
                        </Text>
                      </View>
                    </View>
                    
                    <View style={styles.recommendationItem}>
                      <MaterialCommunityIcons name="umbrella" size={20} color={COLORS.primary} />
                      <View style={styles.recommendationContent}>
                        <Text style={styles.recommendationLabel}>Qué Empacar</Text>
                        <Text style={styles.recommendationText}>
                          {selectedDestination.weatherRisk === 'low' ? 
                            'Ropa ligera y protector solar.' :
                           selectedDestination.weatherRisk === 'medium' ? 
                            'Impermeable, paraguas y ropa para diferentes temperaturas.' :
                            'Impermeable resistente, botas impermeables y ropa para clima adverso.'}
                        </Text>
                      </View>
                    </View>
                  </Card.Content>
                </Card>
              </>
            )}
            
            {/* Travel Safety Tab */}
            {riskTab === 'travel' && (
              <>
                {/* Travel Advisory */}
                <Card style={styles.advisoryCard}>
                  <Card.Content>
                    <View style={styles.advisoryHeader}>
                      <View style={styles.advisoryInfo}>
                        <Text style={styles.advisoryTitle}>Advertencia de Viaje</Text>
                        <Text style={styles.advisorySubtitle}>{selectedDestination.name}, {selectedDestination.country}</Text>
                      </View>
                      <View style={[
                        styles.advisoryBadge,
                        { backgroundColor: getAdvisoryColor(selectedDestination.travelAdvisoryLevel) }
                      ]}>
                        <Text style={styles.advisoryLevel}>Nivel {selectedDestination.travelAdvisoryLevel}</Text>
                      </View>
                    </View>
                    
                    <Divider style={styles.divider} />
                    
                    <Text style={styles.advisoryText}>
                      {selectedDestination.travelAdvisory}
                    </Text>
                    
                    <View style={styles.advisoryLevelsContainer}>
                      <View style={[
                        styles.levelIndicator, 
                        { 
                          backgroundColor: selectedDestination.travelAdvisoryLevel === 1 ? 
                            getAdvisoryColor(1) : COLORS.gray + '40' 
                        }
                      ]}>
                        <Text style={styles.levelNumber}>1</Text>
                        <Text style={styles.levelText}>Normal</Text>
                      </View>
                      
                      <View style={[
                        styles.levelIndicator, 
                        { 
                          backgroundColor: selectedDestination.travelAdvisoryLevel === 2 ? 
                            getAdvisoryColor(2) : COLORS.gray + '40' 
                        }
                      ]}>
                        <Text style={styles.levelNumber}>2</Text>
                        <Text style={styles.levelText}>Precaución</Text>
                      </View>
                      
                      <View style={[
                        styles.levelIndicator, 
                        { 
                          backgroundColor: selectedDestination.travelAdvisoryLevel === 3 ? 
                            getAdvisoryColor(3) : COLORS.gray + '40' 
                        }
                      ]}>
                        <Text style={styles.levelNumber}>3</Text>
                        <Text style={styles.levelText}>Reconsiderar</Text>
                      </View>
                      
                      <View style={[
                        styles.levelIndicator, 
                        { 
                          backgroundColor: selectedDestination.travelAdvisoryLevel === 4 ? 
                            getAdvisoryColor(4) : COLORS.gray + '40' 
                        }
                      ]}>
                        <Text style={styles.levelNumber}>4</Text>
                        <Text style={styles.levelText}>No Viajar</Text>
                      </View>
                    </View>
                  </Card.Content>
                </Card>
                
                {/* Risk Factors */}
                <Card style={styles.riskFactorsCard}>
                  <Card.Content>
                    <Text style={styles.riskFactorsTitle}>Factores de Riesgo</Text>
                    
                    <View style={styles.riskFactor}>
                      <View style={styles.riskFactorHeader}>
                        <MaterialCommunityIcons name="weather-hurricane" size={20} color={COLORS.primary} />
                        <Text style={styles.riskFactorName}>Huracanes y Tifones</Text>
                      </View>
                      <View style={styles.riskFactorValue}>
                        <View style={[
                          styles.riskFactorBadge,
                          { backgroundColor: getRiskFactorColor(selectedDestination.riskFactors.hurricane) }
                        ]}>
                          <Text style={styles.riskFactorBadgeText}>
                            {selectedDestination.riskFactors.hurricane}
                          </Text>
                        </View>
                      </View>
                    </View>
                    
                    <View style={styles.riskFactor}>
                      <View style={styles.riskFactorHeader}>
                        <MaterialCommunityIcons name="water" size={20} color={COLORS.primary} />
                        <Text style={styles.riskFactorName}>Inundaciones</Text>
                      </View>
                      <View style={styles.riskFactorValue}>
                        <View style={[
                          styles.riskFactorBadge,
                          { backgroundColor: getRiskFactorColor(selectedDestination.riskFactors.flooding) }
                        ]}>
                          <Text style={styles.riskFactorBadgeText}>
                            {selectedDestination.riskFactors.flooding}
                          </Text>
                        </View>
                      </View>
                    </View>
                    
                    <View style={styles.riskFactor}>
                      <View style={styles.riskFactorHeader}>
                        <MaterialCommunityIcons name="home-floor-negative-1" size={20} color={COLORS.primary} />
                        <Text style={styles.riskFactorName}>Terremotos</Text>
                      </View>
                      <View style={styles.riskFactorValue}>
                        <View style={[
                          styles.riskFactorBadge,
                          { backgroundColor: getRiskFactorColor(selectedDestination.riskFactors.earthquake) }
                        ]}>
                          <Text style={styles.riskFactorBadgeText}>
                            {selectedDestination.riskFactors.earthquake}
                          </Text>
                        </View>
                      </View>
                    </View>
                    
                    <View style={styles.riskFactor}>
                      <View style={styles.riskFactorHeader}>
                        <MaterialCommunityIcons name="alert" size={20} color={COLORS.primary} />
                        <Text style={styles.riskFactorName}>Terrorismo</Text>
                      </View>
                      <View style={styles.riskFactorValue}>
                        <View style={[
                          styles.riskFactorBadge,
                          { backgroundColor: getRiskFactorColor(selectedDestination.riskFactors.terrorism) }
                        ]}>
                          <Text style={styles.riskFactorBadgeText}>
                            {selectedDestination.riskFactors.terrorism}
                          </Text>
                        </View>
                      </View>
                    </View>
                  </Card.Content>
                </Card>
                
                {/* Travel Insurance Recommendations */}
                <Card style={styles.insuranceRecommendationsCard}>
                  <Card.Content>
                    <Text style={styles.insuranceTitle}>Recomendaciones de Seguro</Text>
                    <Text style={styles.insuranceSubtitle}>
                      Basado en el análisis de riesgos para {selectedDestination.name}
                    </Text>
                    
                    <Divider style={styles.divider} />
                    
                    <View style={styles.recommendation}>
                      <View style={styles.recommendationHeader}>
                        <MaterialCommunityIcons name="medical-bag" size={22} color={COLORS.primary} />
                        <Text style={styles.recommendationTitle}>Cobertura Médica</Text>
                      </View>
                      <Text style={styles.recommendationDetails}>
                        {selectedDestination.travelAdvisoryLevel <= 2 ? 
                          'Se recomienda mínimo $50,000 USD en cobertura médica.' :
                          'Se recomienda mínimo $100,000 USD en cobertura médica.'}
                      </Text>
                    </View>
                    
                    <View style={styles.recommendation}>
                      <View style={styles.recommendationHeader}>
                        <MaterialCommunityIcons name="calendar-remove" size={22} color={COLORS.primary} />
                        <Text style={styles.recommendationTitle}>Cancelación de Viaje</Text>
                      </View>
                      <Text style={styles.recommendationDetails}>
                        {selectedDestination.weatherRisk === 'low' ? 
                          'Cobertura básica de cancelación es suficiente.' :
                          'Se recomienda cobertura extendida de cancelación por motivos climáticos.'}
                      </Text>
                    </View>
                    
                    <View style={styles.recommendation}>
                      <View style={styles.recommendationHeader}>
                        <MaterialCommunityIcons name="account-alert" size={22} color={COLORS.primary} />
                        <Text style={styles.recommendationTitle}>Evacuación y Repatriación</Text>
                      </View>
                      <Text style={styles.recommendationDetails}>
                        {selectedDestination.travelAdvisoryLevel <= 1 && selectedDestination.weatherRisk === 'low' ? 
                          'Cobertura estándar es suficiente.' :
                          'Se recomienda cobertura alta para evacuación de emergencia y repatriación.'}
                      </Text>
                    </View>
                    
                    <Button 
                      mode="contained" 
                      onPress={() => navigation.navigate('InsurancePlans')}
                      style={styles.viewPlansButton}
                    >
                      Ver Seguros Recomendados
                    </Button>
                  </Card.Content>
                </Card>
              </>
            )}
            
            {/* Bottom spacing */}
            <View style={styles.bottomSpacer} />
          </ScrollView>
        </Animated.View>
      ) : (
        <View style={styles.noSelectionContainer}>
          <MaterialCommunityIcons name="map-search" size={60} color={COLORS.gray} />
          <Text style={styles.noSelectionText}>
            Selecciona un destino para ver su análisis de riesgos
          </Text>
        </View>
      )}
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: COLORS.background,
  },
  loadingText: {
    marginTop: 10,
    color: COLORS.textSecondary,
    fontSize: 16,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
    backgroundColor: COLORS.background,
  },
  errorTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: COLORS.error,
    marginTop: 10,
  },
  errorText: {
    textAlign: 'center',
    color: COLORS.textSecondary,
    marginVertical: 15,
  },
  errorButton: {
    backgroundColor: COLORS.primary,
    paddingHorizontal: 20,
  },
  header: {
    paddingHorizontal: 15,
    paddingTop: Platform.OS === 'ios' ? 10 : 20,
    paddingBottom: 15,
    backgroundColor: COLORS.white,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  headerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    marginBottom: 15,
  },
  backButton: {
    padding: 5,
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.text,
  },
  searchContainer: {
    marginBottom: 5,
  },
  searchbar: {
    elevation: 0,
    backgroundColor: COLORS.background,
    borderWidth: 1,
    borderColor: COLORS.border,
    height: 40,
  },
  destinationsContainer: {
    padding: 15,
    backgroundColor: COLORS.white,
    borderBottomWidth: 1,
    borderBottomColor: COLORS.border,
  },
  destinationCard: {
    width: 140,
    height: 120,
    marginRight: 10,
    borderRadius: 12,
    overflow: 'hidden',
    elevation: 2,
  },
  selectedDestinationCard: {
    borderWidth: 2,
    borderColor: COLORS.primary,
  },
  destinationImage: {
    width: '100%',
    height: '100%',
    justifyContent: 'space-between',
    padding: 8,
  },
  riskBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 3,
    paddingHorizontal: 8,
    borderRadius: 10,
    alignSelf: 'flex-start',
  },
  riskText: {
    fontSize: 10,
    color: COLORS.white,
    marginLeft: 3,
  },
  destinationOverlay: {
    backgroundColor: 'rgba(0,0,0,0.3)',
    padding: 5,
    borderRadius: 5,
  },
  destinationName: {
    fontSize: 14,
    fontWeight: 'bold',
    color: COLORS.white,
  },
  destinationCountry: {
    fontSize: 12,
    color: COLORS.white + 'DD',
  },
  detailsContainer: {
    flex: 1,
    backgroundColor: COLORS.background,
  },
  detailsScrollContent: {
    padding: 15,
  },
  tabsContainer: {
    flexDirection: 'row',
    backgroundColor: COLORS.white,
    borderRadius: 25,
    marginBottom: 15,
    padding: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  tabButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    borderRadius: 20,
  },
  activeTabButton: {
    backgroundColor: COLORS.primaryLight + '30',
  },
  tabButtonText: {
    marginLeft: 5,
    fontSize: 14,
    color: COLORS.gray,
  },
  activeTabText: {
    color: COLORS.primary,
    fontWeight: '500',
  },
  weatherCard: {
    marginBottom: 15,
    borderRadius: 12,
  },
  weatherHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  weatherTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.text,
  },
  weatherSubtitle: {
    fontSize: 14,
    color: COLORS.textSecondary,
  },
  weatherIconContainer: {
    alignItems: 'center',
  },
  temperatureText: {
    fontSize: 18,
    fontWeight: 'bold',
    marginTop: 5,
  },
  weatherMetrics: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 15,
  },
  weatherMetric: {
    alignItems: 'center',
    flex: 1,
  },
  metricLabel: {
    fontSize: 12,
    color: COLORS.textSecondary,
    marginTop: 5,
    marginBottom: 3,
  },
  metricValue: {
    fontSize: 14,
    fontWeight: 'bold',
    color: COLORS.text,
  },
  divider: {
    marginVertical: 15,
  },
  riskIndicatorContainer: {
    marginBottom: 5,
  },
  riskIndicatorTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.text,
    marginBottom: 10,
  },
  riskIndicator: {
    marginBottom: 10,
  },
  riskProgressBar: {
    height: 8,
    borderRadius: 4,
    backgroundColor: COLORS.border,
  },
  riskLabels: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 5,
  },
  riskLabel: {
    fontSize: 12,
    color: COLORS.textSecondary,
  },
  riskDescription: {
    fontSize: 14,
    color: COLORS.text,
    lineHeight: 20,
  },
  forecastCard: {
    marginBottom: 15,
    borderRadius: 12,
  },
  forecastTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.text,
    marginBottom: 15,
  },
  forecastContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  forecastDay: {
    alignItems: 'center',
  },
  forecastDayText: {
    fontSize: 12,
    color: COLORS.textSecondary,
    marginBottom: 5,
  },
  forecastTemp: {
    fontSize: 14,
    fontWeight: 'bold',
    color: COLORS.text,
    marginTop: 5,
  },
  recommendationsCard: {
    marginBottom: 15,
    borderRadius: 12,
  },
  recommendationsTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.text,
    marginBottom: 15,
  },
  recommendationItem: {
    flexDirection: 'row',
    marginBottom: 15,
  },
  recommendationContent: {
    marginLeft: 10,
    flex: 1,
  },
  recommendationLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: COLORS.text,
    marginBottom: 3,
  },
  recommendationText: {
    fontSize: 14,
    color: COLORS.textSecondary,
    lineHeight: 20,
  },
  advisoryCard: {
    marginBottom: 15,
    borderRadius: 12,
  },
  advisoryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  advisoryInfo: {
    flex: 1,
  },
  advisoryTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: COLORS.text,
  },
  advisorySubtitle: {
    fontSize: 14,
    color: COLORS.textSecondary,
  },
  advisoryBadge: {
    paddingVertical: 5,
    paddingHorizontal: 10,
    borderRadius: 15,
    alignItems: 'center',
  },
  advisoryLevel: {
    fontSize: 12,
    fontWeight: 'bold',
    color: COLORS.white,
  },
  advisoryText: {
    fontSize: 14,
    color: COLORS.text,
    lineHeight: 20,
    marginBottom: 15,
  },
  advisoryLevelsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  levelIndicator: {
    width: 70,
    alignItems: 'center',
    paddingVertical: 5,
    borderRadius: 5,
  },
  levelNumber: {
    fontSize: 14,
    fontWeight: 'bold',
    color: COLORS.white,
  },
  levelText: {
    fontSize: 10,
    color: COLORS.white,
  },
  riskFactorsCard: {
    marginBottom: 15,
    borderRadius: 12,
  },
  riskFactorsTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.text,
    marginBottom: 15,
  },
  riskFactor: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 15,
  },
  riskFactorHeader: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  riskFactorName: {
    fontSize: 14,
    color: COLORS.text,
    marginLeft: 8,
  },
  riskFactorValue: {
    alignItems: 'flex-end',
  },
  riskFactorBadge: {
    paddingVertical: 3,
    paddingHorizontal: 10,
    borderRadius: 15,
  },
  riskFactorBadgeText: {
    fontSize: 12,
    fontWeight: '500',
    color: COLORS.white,
  },
  insuranceRecommendationsCard: {
    marginBottom: 15,
    borderRadius: 12,
  },
  insuranceTitle: {
    fontSize: 16,
    fontWeight: '500',
    color: COLORS.text,
  },
  insuranceSubtitle: {
    fontSize: 14,
    color: COLORS.textSecondary,
    marginTop: 3,
  },
  recommendation: {
    marginBottom: 15,
  },
  recommendationHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 5,
  },
  recommendationTitle: {
    fontSize: 14,
    fontWeight: '500',
    color: COLORS.text,
    marginLeft: 8,
  },
  recommendationDetails: {
    fontSize: 14,
    color: COLORS.textSecondary,
    lineHeight: 20,
    paddingLeft: 30,
  },
  viewPlansButton: {
    backgroundColor: COLORS.primary,
    marginTop: 10,
    borderRadius: 25,
  },
  noSelectionContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 30,
  },
  noSelectionText: {
    fontSize: 16,
    color: COLORS.textSecondary,
    textAlign: 'center',
    marginTop: 15,
  },
  bottomSpacer: {
    height: 40,
  },
});

export default WeatherRiskScreen;