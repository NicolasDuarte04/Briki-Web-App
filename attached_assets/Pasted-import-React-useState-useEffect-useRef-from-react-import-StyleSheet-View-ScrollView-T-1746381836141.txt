import React, { useState, useEffect, useRef } from 'react';
import { StyleSheet, View, ScrollView, TouchableOpacity, SafeAreaView, Platform, ActivityIndicator } from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { ThemedText } from '../components/ThemedText';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withSpring, 
  withTiming,
  withSequence,
  withDelay,
  FadeIn,
  FadeInDown,
  FadeInUp
} from 'react-native-reanimated';
import { Ionicons, FontAwesome5 } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';
import { StatusBar } from 'expo-status-bar';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { LinearGradient } from 'expo-linear-gradient';

// Import plans from the centralized data file with relative import
import { insurancePlans } from './data/insurance-plans';

// Create AnimatedTouchable using Animated.createAnimatedComponent instead of importing createAnimatedComponent directly
const AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);

export default function AvailablePlansScreen() {
  const params = useLocalSearchParams();
  const { fromCountry, toCountry, departureDate, returnDate, travelers, primaryAge, hasMedicalConditions, coveragePriorities } = params;

  const insets = useSafeAreaInsets();
  const scrollViewRef = useRef(null);

  const fadeAnim = useSharedValue(0);
  const scaleAnim = useSharedValue(0.95);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Simulate loading state
    const timer = setTimeout(() => {
      setIsLoading(false);
      fadeAnim.value = withTiming(1, { duration: 500 });
      scaleAnim.value = withSpring(1, { damping: 7 });
    }, 600);

    return () => clearTimeout(timer);
  }, []);

  const animatedStyle = useAnimatedStyle(() => {
    return {
      opacity: fadeAnim.value,
      transform: [{ scale: scaleAnim.value }]
    };
  });

  const [selectedPlans, setSelectedPlans] = useState([]);
  const buttonScale = useSharedValue(1);

  // Calculate trip duration in days
  const departureObj = departureDate ? new Date(departureDate) : new Date();
  const returnObj = returnDate ? new Date(returnDate) : new Date();
  const tripDuration = Math.ceil((returnObj - departureObj) / (1000 * 60 * 60 * 24));

  const togglePlanSelection = async (planId) => {
    try {
      if (Platform.OS !== 'web') {
        await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      }

      buttonScale.value = withSequence(
        withTiming(0.95, { duration: 100 }),
        withTiming(1, { duration: 100 })
      );

      setSelectedPlans(prev => {
        if (prev.includes(planId)) {
          return prev.filter(id => id !== planId);
        }
        // Limit selection to maximum 3 plans
        if (prev.length >= 3) return prev;
        return [...prev, planId];
      });
    } catch (error) {
      console.log('Haptics error:', error);
    }
  };

  const handleComparePlans = async () => {
    if (selectedPlans.length < 2) {
      return; // Don't proceed if fewer than 2 plans selected
    }

    try {
      if (Platform.OS !== 'web') {
        await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      }

      router.push({
        pathname: '/compare-plans',
        params: {
          planIds: selectedPlans.join(','),
          fromCountry: fromCountry || 'Origin',
          toCountry: toCountry || 'Destination',
          tripDuration: tripDuration.toString()
        }
      });
    } catch (error) {
      console.log('Navigation error:', error);
    }
  };

  const handleBackPress = () => {
    router.back();
  };

  const formatCurrency = (amount) => {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };

  const getTagStyles = (tag) => {
    switch(tag) {
      case 'Best Value':
        return {
          container: styles.bestValueTag,
          text: { color: '#34C759' }
        };
      case 'Popular':
        return {
          container: styles.popularTag,
          text: { color: '#4B76E5' }
        };
      case 'Economy':
        return {
          container: styles.economyTag,
          text: { color: '#F8B400' }
        };
      default:
        return {
          container: {},
          text: { color: '#333333' }
        };
    }
  };

  const renderCoverageItem = (key, value, isHighPriority, idx) => {
    const isNotIncluded = value === "Not Included";

    return (
      <View key={`coverage-${key}-${idx}`} style={styles.coverageItem}>
        <Ionicons 
          name={
            isNotIncluded 
              ? "close-circle" 
              : isHighPriority 
                ? "checkmark-circle" 
                : "checkmark-circle-outline"
          } 
          size={16} 
          color={
            isNotIncluded 
              ? "#FF3B30" 
              : isHighPriority 
                ? "#34C759" 
                : "#4CAF50"
          } 
        />
        <View style={styles.coverageTextContainer}>
          <ThemedText style={styles.coverageLabel}>{key}</ThemedText>
          <ThemedText style={[
            styles.coverageValue,
            isNotIncluded && styles.coverageNotIncluded,
            isHighPriority && styles.coverageHighPriority
          ]}>
            {typeof value === 'number' ? `$${formatCurrency(value)}` : value}
          </ThemedText>
        </View>
      </View>
    );
  };

  if (isLoading) {
    return (
      <SafeAreaView style={styles.container}>
        <StatusBar style="dark" />
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#4B76E5" />
          <ThemedText style={styles.loadingText}>Finding the best plans for you...</ThemedText>
        </View>
      </SafeAreaView>
    );
  }

  return (
    <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
      <StatusBar style="dark" />

      {/* Header with background gradient */}
      <View style={styles.headerBackground}>
        <LinearGradient
          colors={['rgba(75, 118, 229, 0.08)', 'rgba(255, 255, 255, 0)']}
          style={styles.headerGradient}
        />
      </View>

      <View style={styles.headerContainer}>
        <TouchableOpacity 
          style={styles.backButton}
          onPress={handleBackPress}
          accessibilityRole="button"
          accessibilityLabel="Go back to trip details"
        >
          <Ionicons name="chevron-back" size={24} color="#4B76E5" />
        </TouchableOpacity>
        <Animated.View 
          entering={FadeInUp.delay(100).duration(400)}
          style={styles.header}>
          <ThemedText style={styles.title}>Available Plans</ThemedText>
          <ThemedText style={styles.subtitle}>
            {travelers} {parseInt(travelers) === 1 ? 'Traveler' : 'Travelers'} â€¢ {fromCountry} to {toCountry}
          </ThemedText>
        </Animated.View>
      </View>

      <ScrollView 
        ref={scrollViewRef}
        style={styles.scrollView} 
        contentContainerStyle={[styles.scrollContent, { paddingBottom: insets.bottom + 100 }]}
        keyboardShouldPersistTaps="handled"
        bounces={true}
        showsVerticalScrollIndicator={false}
      >
        <Animated.View 
          entering={FadeInDown.delay(200).duration(400)}
          style={styles.infoCard}>
          <Ionicons name="information-circle-outline" size={22} color="#4B76E5" />
          <ThemedText style={styles.infoText}>
            Plan prices shown are per person for a {tripDuration}-day trip
          </ThemedText>
        </Animated.View>

        <View style={styles.plansContainer}>
          {insurancePlans.map((plan, index) => {
            const tagStyles = plan.tag ? getTagStyles(plan.tag) : {};
            const isSelected = selectedPlans.includes(plan.id);
            const priorities = coveragePriorities ? coveragePriorities.split(',') : [];

            return (
              <Animated.View 
                key={`plan-${plan.id}`} 
                entering={FadeInDown.delay(300 + index * 100).springify()}
                style={[
                  styles.planCard,
                  isSelected && styles.selectedPlanCard,
                ]}>
                <View style={styles.planCardContent}>
                  <View style={styles.planHeader}>
                    <View style={styles.providerSection}>
                      <ThemedText style={styles.providerName}>{plan.provider}</ThemedText>
                      <View style={styles.ratingContainer}>
                        <Ionicons name="star" size={16} color="#FFB800" />
                        <ThemedText style={styles.rating}>{plan.rating.toFixed(1)}</ThemedText>
                      </View>
                    </View>

                    {plan.tag && (
                      <View style={[styles.tagContainer, tagStyles.container]}>
                        <ThemedText style={[styles.tagText, tagStyles.text]}>{plan.tag}</ThemedText>
                      </View>
                    )}
                  </View>

                  <View style={styles.divider} />

                  <View style={styles.coverageContainer}>
                    <View style={styles.coverageGrid}>
                      {Object.entries(plan.coverage).map(([key, value], idx) => {
                        // Determine if this is a high priority coverage based on user selection
                        const isHighPriority = 
                          (key === "Medical Expenses" && priorities.includes('medical')) ||
                          (key === "Trip Cancellation" && priorities.includes('cancellation')) ||
                          (key === "Baggage Loss" && priorities.includes('baggage')) ||
                          (key === "Trip Delay" && priorities.includes('delay'));

                        return renderCoverageItem(key, value, isHighPriority, idx);
                      })}
                    </View>
                  </View>

                  <View style={styles.planFooter}>
                    <View style={styles.priceContainer}>
                      <ThemedText style={styles.price}>${formatCurrency(plan.price)}</ThemedText>
                      <ThemedText style={styles.priceSubtext}>per person</ThemedText>
                    </View>

                    <View style={styles.buttonContainer}>
                      <AnimatedTouchable
                        style={styles.buyButton}
                        entering={FadeIn.delay(400 + index * 100).duration(400)}
                        onPress={() => {
                          try {
                            if (Platform.OS !== 'web') {
                              Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
                            }
                            router.push({
                              pathname: '/checkout',
                              params: { 
                                plan: JSON.stringify(plan),
                                travelers: travelers,
                                tripDuration: tripDuration.toString()
                              }
                            });
                          } catch (error) {
                            console.log('Navigation error:', error);
                          }
                        }}
                        accessibilityRole="button"
                        accessibilityLabel={`Select ${plan.provider} plan for $${plan.price}`}
                        activeOpacity={0.7}>
                        <LinearGradient
                          colors={['#4B76E5', '#3D68D8']}
                          start={{ x: 0, y: 0 }}
                          end={{ x: 1, y: 0 }}
                          style={styles.buttonGradient}
                        >
                          <ThemedText style={styles.buttonText}>Buy Now</ThemedText>
                        </LinearGradient>
                      </AnimatedTouchable>

                      <TouchableOpacity
                        style={[
                          styles.compareCheckbox,
                          isSelected && styles.compareCheckboxSelected
                        ]}
                        onPress={() => togglePlanSelection(plan.id)}
                        accessibilityRole="checkbox"
                        accessibilityState={{ checked: isSelected }}
                        accessibilityLabel={`Compare ${plan.provider} plan`}
                      >
                        {isSelected && (
                          <Ionicons name="checkmark" size={18} color="#FFFFFF" />
                        )}
                      </TouchableOpacity>
                    </View>
                  </View>
                </View>
              </Animated.View>
            );
          })}
        </View>
      </ScrollView>

      {/* Fixed Compare Button */}
      <Animated.View 
        style={[
          styles.compareButtonContainer,
          { paddingBottom: insets.bottom || 16 }
        ]}
        entering={FadeInUp.delay(500).duration(400)}
      >
        <AnimatedTouchable
          style={[
            styles.compareButton,
            selectedPlans.length < 2 && styles.disabledCompareButton
          ]}
          disabled={selectedPlans.length < 2}
          onPress={handleComparePlans}
          accessibilityRole="button"
          accessibilityLabel="Compare selected plans"
          accessibilityState={{ disabled: selectedPlans.length < 2 }}
        >
          <LinearGradient
            colors={selectedPlans.length < 2 ? ['#CCCCCC', '#BBBBBB'] : ['#4B76E5', '#3D68D8']}
            start={{ x: 0, y: 0 }}
            end={{ x: 1, y: 0 }}
            style={styles.compareButtonGradient}
          >
            <Ionicons 
              name="git-compare-outline" 
              size={20} 
              color="#FFFFFF" 
              style={styles.compareIcon}
            />
            <ThemedText style={styles.compareButtonText}>
              Compare {selectedPlans.length > 0 ? `(${selectedPlans.length})` : ''}
            </ThemedText>
          </LinearGradient>
        </AnimatedTouchable>
      </Animated.View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F8FA',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
  headerBackground: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: 180,
    zIndex: -1,
  },
  headerGradient: {
    width: '100%',
    height: '100%',
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 16,
    paddingBottom: 12,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
    alignItems: 'center',
    justifyContent: 'center',
    marginRight: 12,
  },
  header: {
    flex: 1,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 4,
    color: '#1A1A1A',
  },
  subtitle: {
    fontSize: 15,
    color: '#666666',
    fontWeight: '400',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingHorizontal: 20,
    paddingTop: 8,
    gap: 16,
  },
  infoCard: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(75, 118, 229, 0.08)',
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 12,
    marginBottom: 4,
  },
  infoText: {
    fontSize: 14,
    color: '#4B76E5',
    marginLeft: 10,
  },
  plansContainer: {
    gap: 16,
  },
  planCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#E5E5EA',
    shadowColor: '#000000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.08,
    shadowRadius: 10,
    elevation: 3,
  },
  selectedPlanCard: {
    borderColor: '#4B76E5',
    borderWidth: 2,
  },
  planCardContent: {
    padding: 16,
  },
  planHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  providerSection: {
    flex: 1,
  },
  providerName: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1A1A1A',
    marginBottom: 4,
  },
  ratingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  rating: {
    marginLeft: 4,
    fontSize: 14,
    fontWeight: '600',
    color: '#666666',
  },
  tagContainer: {
    paddingHorizontal: 10,
    paddingVertical: 6,
    borderRadius: 30,
    backgroundColor: 'rgba(248, 180, 0, 0.1)',
    marginLeft: 8,
  },
  bestValueTag: {
    backgroundColor: 'rgba(52, 199, 89, 0.1)',
  },
  popularTag: {
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
  },
  economyTag: {
    backgroundColor: 'rgba(248, 180, 0, 0.1)',
  },
  tagText: {
    fontSize: 12,
    fontWeight: '600',
  },
  divider: {
    height: 1,
    backgroundColor: '#E5E5EA',
    marginBottom: 16,
  },
  coverageContainer: {
    marginBottom: 16,
  },
  coverageGrid: {
    gap: 12,
  },
  coverageItem: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  coverageTextContainer: {
    marginLeft: 8,
    flex: 1,
  },
  coverageLabel: {
    fontSize: 14,
    color: '#666666',
  },
  coverageValue: {
    fontSize: 16,
    color: '#1A1A1A',
    fontWeight: '600',
  },
  coverageNotIncluded: {
    color: '#FF3B30',
  },
  coverageHighPriority: {
    color: '#34C759',
  },
  planFooter: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  priceContainer: {
    flexDirection: 'column',
  },
  price: {
    fontSize: 24,
    color: '#4B76E5',
    fontWeight: '700',
  },
  priceSubtext: {
    fontSize: 12,
    color: '#666666',
  },
  buttonContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  buyButton: {
    borderRadius: 12,
    overflow: 'hidden',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  buttonGradient: {
    paddingVertical: 12,
    paddingHorizontal: 16,
    minWidth: 100,
    alignItems: 'center',
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  compareCheckbox: {
    width: 32,
    height: 32,
    borderRadius: 6,
    backgroundColor: '#F2F2F7',
    borderWidth: 1,
    borderColor: '#D1D1D6',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 12,
  },
  compareCheckboxSelected: {
    backgroundColor: '#4B76E5',
    borderColor: '#4B76E5',
  },
  compareButtonContainer: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    paddingHorizontal: 20,
    paddingTop: 16,
    backgroundColor: 'rgba(248, 248, 250, 0.9)',
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
    backdropFilter: 'blur(10px)',
  },
  compareButton: {
    borderRadius: 12,
    overflow: 'hidden',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.2,
    shadowRadius: 4,
    elevation: 3,
  },
  disabledCompareButton: {
    opacity: 0.7,
  },
  compareButtonGradient: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 16,
  },
  compareIcon: {
    marginRight: 8,
  },
  compareButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});