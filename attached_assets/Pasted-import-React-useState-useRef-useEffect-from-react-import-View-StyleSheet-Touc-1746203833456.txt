import React, { useState, useRef, useEffect } from 'react';
import { 
  View, 
  StyleSheet, 
  TouchableOpacity, 
  ScrollView, 
  SafeAreaView, 
  ActivityIndicator, 
  TextInput, 
  KeyboardAvoidingView, 
  Platform,
  Dimensions
} from 'react-native';
import { router, useLocalSearchParams } from 'expo-router';
import { ThemedText } from '@/components/ThemedText';
import { Ionicons } from '@expo/vector-icons';
import { colors, fonts } from './constants/Styles';
import Animated, { 
  useSharedValue, 
  useAnimatedStyle, 
  withSpring, 
  withTiming, 
  withSequence, 
  FadeInUp,
  SlideInRight,
  SlideInUp,
  Easing,
  runOnJS,
  cancelAnimation
} from 'react-native-reanimated';
import * as Haptics from 'expo-haptics';
import { StatusBar } from 'expo-status-bar';
import { LinearGradient } from 'expo-linear-gradient';
import { useSafeAreaInsets } from 'react-native-safe-area-context';

const { width } = Dimensions.get('window');
const AnimatedTouchable = Animated.createAnimatedComponent(TouchableOpacity);

export default function CheckoutScreen() {
  const params = useLocalSearchParams();
  const selectedPlan = JSON.parse(params.plan as string);
  const travelers = params.travelers ? parseInt(params.travelers as string) : 1;
  const tripDuration = params.tripDuration ? params.tripDuration : '7';
  const insets = useSafeAreaInsets();

  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    phone: '',
    dateOfBirth: '',
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const [showSuccessOverlay, setShowSuccessOverlay] = useState(false);

  const scrollViewRef = useRef(null);

  // Animation values
  const buttonScale = useSharedValue(1);
  const errorShake = useSharedValue(0);
  const successScale = useSharedValue(0);
  const successOpacity = useSharedValue(0);
  const formOpacity = useSharedValue(0);

  // Field focus states for highlighting
  const [focusedField, setFocusedField] = useState(null);

  // Format currency with commas
  const formatCurrency = (amount) => {
    return amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  };

  // Total price calculation
  const totalPrice = selectedPlan.price * travelers;

  useEffect(() => {
    // Fade in form elements sequentially
    formOpacity.value = withTiming(1, { duration: 600 });
  }, []);

  const buttonStyle = useAnimatedStyle(() => ({
    transform: [{ scale: buttonScale.value }]
  }));

  const errorStyle = useAnimatedStyle(() => ({
    transform: [{ translateX: errorShake.value }]
  }));

  const successStyle = useAnimatedStyle(() => ({
    opacity: successOpacity.value,
    transform: [{ scale: successScale.value }]
  }));

  const formStyle = useAnimatedStyle(() => ({
    opacity: formOpacity.value
  }));

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));

    // Clear error when typing
    if (error) setError('');
  };

  const isFormValid = () => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const phoneRegex = /^\+?[\d\s-]{10,}$/;
    const dateRegex = /^(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01])\/\d{4}$/;

    return (
      formData.fullName.length > 2 &&
      emailRegex.test(formData.email) &&
      phoneRegex.test(formData.phone) &&
      dateRegex.test(formData.dateOfBirth)
    );
  };

  // Error shake animation
  const triggerErrorShake = () => {
    errorShake.value = withSequence(
      withTiming(-10, { duration: 50 }),
      withTiming(10, { duration: 50 }),
      withTiming(-10, { duration: 50 }),
      withTiming(10, { duration: 50 }),
      withTiming(0, { duration: 50 }),
    );
  };

  // Success animation
  const showSuccess = () => {
    setShowSuccessOverlay(true);
    successScale.value = withTiming(1, { duration: 400, easing: Easing.out(Easing.back(1.5)) });
    successOpacity.value = withTiming(1, { duration: 400 });

    // Route to success page after animation
    setTimeout(() => {
      router.push({
        pathname: '/payment-success',
        params: { planId: selectedPlan.id },
      });
    }, 1800);
  };

  const handlePayment = async () => {
    if (!isFormValid()) {
      triggerErrorShake();
      setError('Please fill all fields correctly');
      await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
      return;
    }

    buttonScale.value = withSequence(
      withTiming(0.95, { duration: 100 }),
      withTiming(1, { duration: 100 })
    );

    await Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
    setIsLoading(true);
    setError('');

    try {
      await new Promise(resolve => setTimeout(resolve, 1500));
      // Show success animation before navigation
      showSuccess();
    } catch (err) {
      setError('Payment failed. Please try again.');
      triggerErrorShake();
      await Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <SafeAreaView style={[styles.container, { paddingTop: Platform.OS === 'android' ? insets.top : 0 }]}>
      <StatusBar style="dark" />
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'} 
        style={{ flex: 1 }}>
        <Animated.View style={formStyle}>
          <ScrollView 
            ref={scrollViewRef}
            style={styles.scrollView}
            contentContainerStyle={styles.scrollContent}
            showsVerticalScrollIndicator={false}
          >
            <View style={styles.headerContainer}>
              <TouchableOpacity 
                style={styles.backButton}
                onPress={() => router.back()}
                accessibilityRole="button"
                accessibilityLabel="Go back to plans"
              >
                <Ionicons name="chevron-back" size={24} color="#4B76E5" />
              </TouchableOpacity>
              <View style={styles.header}>
                <ThemedText style={styles.title}>Checkout</ThemedText>
                <ThemedText style={styles.subtitle}>Complete your purchase</ThemedText>
              </View>
            </View>

            <Animated.View 
              entering={FadeInUp.delay(100).springify()}
              style={styles.planSummary}
            >
              <View style={styles.planHeader}>
                <View>
                  <ThemedText style={styles.providerName}>{selectedPlan.provider}</ThemedText>
                  <View style={styles.tripDetails}>
                    <Ionicons name="calendar-outline" size={14} color="#666666" />
                    <ThemedText style={styles.tripDetailsText}>{tripDuration} days</ThemedText>
                    <Ionicons name="people-outline" size={14} color="#666666" />
                    <ThemedText style={styles.tripDetailsText}>{travelers} traveler{travelers !== 1 ? 's' : ''}</ThemedText>
                  </View>
                </View>

                {selectedPlan.tag && (
                  <View style={[
                    styles.tagContainer,
                    selectedPlan.tag === 'Best Value' && styles.bestValueTag,
                    selectedPlan.tag === 'Popular' && styles.popularTag
                  ]}>
                    <ThemedText style={styles.tagText}>{selectedPlan.tag}</ThemedText>
                  </View>
                )}
              </View>

              <View style={styles.priceContainer}>
                <ThemedText style={styles.priceLabel}>Total price:</ThemedText>
                <ThemedText style={styles.price}>${formatCurrency(totalPrice)}</ThemedText>
              </View>

              <View style={styles.divider} />

              <View style={styles.coverageList}>
                {Object.entries(selectedPlan.coverage).map(([key, value], index) => (
                  <View key={key} style={styles.coverageItem}>
                    <Ionicons 
                      name={value === "Not Included" ? "close-circle" : "checkmark-circle"} 
                      size={16} 
                      color={value === "Not Included" ? "#FF3B30" : "#34C759"} 
                    />
                    <ThemedText style={styles.coverageText}>
                      {key}: {typeof value === 'number' ? `$${formatCurrency(value)}` : value.toString()}
                    </ThemedText>
                  </View>
                ))}
              </View>
            </Animated.View>

            <Animated.View 
              entering={FadeInUp.delay(200).springify()}
              style={styles.form}
            >
              <ThemedText style={styles.formTitle}>Traveler Information</ThemedText>

              <View style={styles.inputGroup}>
                <ThemedText style={styles.label}>Full Name</ThemedText>
                <View style={[
                  styles.inputContainer,
                  focusedField === 'fullName' && styles.inputContainerFocused,
                  error && !formData.fullName && styles.inputContainerError
                ]}>
                  <Ionicons name="person-outline" size={18} color={focusedField === 'fullName' ? "#4B76E5" : "#A0A0A0"} style={styles.inputIcon} />
                  <TextInput
                    style={styles.input}
                    value={formData.fullName}
                    onChangeText={(value) => handleInputChange('fullName', value)}
                    placeholder="Enter your full name"
                    placeholderTextColor="#A0A0A0"
                    returnKeyType="next"
                    onFocus={() => setFocusedField('fullName')}
                    onBlur={() => setFocusedField(null)}
                    autoFocus={false}
                  />
                </View>
              </View>

              <View style={styles.inputGroup}>
                <ThemedText style={styles.label}>Email</ThemedText>
                <View style={[
                  styles.inputContainer,
                  focusedField === 'email' && styles.inputContainerFocused,
                  error && !formData.email.match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/) && styles.inputContainerError
                ]}>
                  <Ionicons name="mail-outline" size={18} color={focusedField === 'email' ? "#4B76E5" : "#A0A0A0"} style={styles.inputIcon} />
                  <TextInput
                    style={styles.input}
                    value={formData.email}
                    onChangeText={(value) => handleInputChange('email', value)}
                    placeholder="Enter your email"
                    placeholderTextColor="#A0A0A0"
                    keyboardType="email-address"
                    autoCapitalize="none"
                    returnKeyType="next"
                    onFocus={() => setFocusedField('email')}
                    onBlur={() => setFocusedField(null)}
                  />
                </View>
              </View>

              <View style={styles.inputGroup}>
                <ThemedText style={styles.label}>Phone Number</ThemedText>
                <View style={[
                  styles.inputContainer,
                  focusedField === 'phone' && styles.inputContainerFocused,
                  error && !formData.phone.match(/^\+?[\d\s-]{10,}$/) && styles.inputContainerError
                ]}>
                  <Ionicons name="call-outline" size={18} color={focusedField === 'phone' ? "#4B76E5" : "#A0A0A0"} style={styles.inputIcon} />
                  <TextInput
                    style={styles.input}
                    value={formData.phone}
                    onChangeText={(value) => handleInputChange('phone', value)}
                    placeholder="Enter your phone number"
                    placeholderTextColor="#A0A0A0"
                    keyboardType="phone-pad"
                    returnKeyType="next"
                    onFocus={() => setFocusedField('phone')}
                    onBlur={() => setFocusedField(null)}
                  />
                </View>
              </View>

              <View style={styles.inputGroup}>
                <ThemedText style={styles.label}>Date of Birth</ThemedText>
                <View style={[
                  styles.inputContainer,
                  focusedField === 'dateOfBirth' && styles.inputContainerFocused,
                  error && !formData.dateOfBirth.match(/^(0[1-9]|1[0-2])\/(0[1-9]|[12]\d|3[01])\/\d{4}$/) && styles.inputContainerError
                ]}>
                  <Ionicons name="calendar-outline" size={18} color={focusedField === 'dateOfBirth' ? "#4B76E5" : "#A0A0A0"} style={styles.inputIcon} />
                  <TextInput
                    style={styles.input}
                    value={formData.dateOfBirth}
                    onChangeText={(value) => handleInputChange('dateOfBirth', value)}
                    placeholder="MM/DD/YYYY"
                    placeholderTextColor="#A0A0A0"
                    returnKeyType="done"
                    onFocus={() => setFocusedField('dateOfBirth')}
                    onBlur={() => setFocusedField(null)}
                  />
                </View>
              </View>
            </Animated.View>

            <Animated.View style={[styles.errorContainer, errorStyle]}>
              {error ? (
                <View style={styles.errorBox}>
                  <Ionicons name="alert-circle" size={18} color="#FF3B30" />
                  <ThemedText style={styles.errorText}>{error}</ThemedText>
                </View>
              ) : null}
            </Animated.View>

            <View style={styles.extraSpace} />
          </ScrollView>
        </Animated.View>

        <Animated.View 
          entering={SlideInUp.delay(300).springify()}
          style={[styles.footer, { paddingBottom: Math.max(16, insets.bottom) }]}
        >
          <AnimatedTouchable
            onPress={handlePayment}
            activeOpacity={0.9}
            disabled={isLoading}
            accessibilityLabel="Pay Now"
            accessibilityRole="button"
            style={buttonStyle}
          >
            <LinearGradient
              colors={isFormValid() ? ['#4B76E5', '#3D68D8'] : ['#A0B8F3', '#8CA8E9']}
              start={{ x: 0, y: 0 }}
              end={{ x: 1, y: 0 }}
              style={[
                styles.payButton,
                !isFormValid() && styles.payButtonDisabled,
              ]}
            >
              {isLoading ? (
                <ActivityIndicator color="#FFFFFF" size="small" />
              ) : (
                <>
                  <ThemedText style={styles.payButtonText}>Pay ${formatCurrency(totalPrice)}</ThemedText>
                  <Ionicons name="shield-checkmark" size={20} color="#FFFFFF" style={styles.payButtonIcon} />
                </>
              )}
            </LinearGradient>
          </AnimatedTouchable>

          <ThemedText style={styles.securePaymentText}>
            <Ionicons name="lock-closed" size={12} color="#666666" /> Secure payment
          </ThemedText>
        </Animated.View>
      </KeyboardAvoidingView>

      {/* Success Overlay */}
      {showSuccessOverlay && (
        <Animated.View style={[styles.successOverlay, successStyle]}>
          <View style={styles.successContent}>
            <View style={styles.successIconContainer}>
              <Ionicons name="checkmark" size={40} color="#FFFFFF" />
            </View>
            <ThemedText style={styles.successTitle}>Payment Successful!</ThemedText>
            <ThemedText style={styles.successText}>Your insurance is being processed</ThemedText>
          </View>
        </Animated.View>
      )}
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F8FA',
  },
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 50,
  },
  headerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingTop: 16,
    paddingBottom: 8,
    backgroundColor: '#F8F8FA',
    zIndex: 10,
  },
  backButton: {
    padding: 8,
    marginRight: 10,
    borderRadius: 20,
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
  },
  header: {
    flex: 1,
  },
  title: {
    fontSize: 28,
    fontWeight: '700',
    marginBottom: 4,
    color: '#000000',
  },
  subtitle: {
    fontSize: 14,
    color: '#666666',
    fontWeight: '400',
  },
  formTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1A1A1A',
    marginBottom: 20,
  },
  planSummary: {
    backgroundColor: '#FFFFFF',
    borderRadius: 16,
    margin: 20,
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#E5E5EA',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.06,
    shadowRadius: 8,
    elevation: 2,
  },
  planHeader: {
    padding: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
  },
  tripDetails: {
    flexDirection: 'row',
    alignItems: 'center',
    marginTop: 6,
  },
  tripDetailsText: {
    fontSize: 14,
    color: '#666666',
    marginRight: 12,
    marginLeft: 4,
  },
  providerName: {
    fontSize: 20,
    fontWeight: '600',
    color: '#1A1A1A',
  },
  priceContainer: {
    flexDirection: 'row',
    alignItems: 'baseline',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
    paddingBottom: 16,
  },
  priceLabel: {
    fontSize: 16,
    color: '#666666',
  },
  price: {
    fontSize: 24,
    color: '#4B76E5',
    fontWeight: '700',
  },
  divider: {
    height: 1,
    backgroundColor: '#E5E5EA',
  },
  tagContainer: {
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 12,
    backgroundColor: 'rgba(75, 118, 229, 0.1)',
  },
  bestValueTag: {
    backgroundColor: 'rgba(52, 199, 89, 0.15)',
  },
  popularTag: {
    backgroundColor: 'rgba(75, 118, 229, 0.15)',
  },
  tagText: {
    fontSize: 12,
    fontWeight: '600',
    color: '#333333',
  },
  coverageList: {
    padding: 16,
    gap: 10,
  },
  coverageItem: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  coverageText: {
    fontSize: 15,
    color: '#333333',
    flex: 1,
  },
  form: {
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  inputGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    color: '#666666',
    marginBottom: 8,
    fontWeight: '500',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#E5E5EA',
    borderRadius: 12,
    backgroundColor: '#FFFFFF',
    height: 50,
    paddingHorizontal: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  inputContainerFocused: {
    borderColor: '#4B76E5',
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  inputContainerError: {
    borderColor: '#FF3B30',
    backgroundColor: 'rgba(255, 59, 48, 0.05)',
  },
  inputIcon: {
    marginRight: 8,
  },
  input: {
    flex: 1,
    fontSize: 16,
    color: '#000000',
    paddingVertical: 12,
  },
  errorContainer: {
    paddingHorizontal: 20,
    marginBottom: 16,
    alignItems: 'center',
  },
  errorBox: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'rgba(255, 59, 48, 0.1)',
    paddingVertical: 10,
    paddingHorizontal: 16,
    borderRadius: 8,
    width: '100%',
  },
  errorText: {
    color: '#FF3B30',
    marginLeft: 8,
    fontSize: 14,
    flex: 1,
  },
  extraSpace: {
    height: 100,
  },
  footer: {
    paddingHorizontal: 20,
    paddingTop: 16,
    paddingBottom: 20,
    borderTopWidth: 1,
    borderTopColor: '#E5E5EA',
    backgroundColor: '#FFFFFF',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.05,
    shadowRadius: 6,
    elevation: 4,
  },
  payButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 16,
    borderRadius: 16,
    shadowColor: '#4B76E5',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 4,
  },
  payButtonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
    textAlign: 'center',
  },
  payButtonIcon: {
    marginLeft: 8,
  },
  payButtonDisabled: {
    opacity: 0.8,
  },
  securePaymentText: {
    color: '#666666',
    fontSize: 12,
    textAlign: 'center',
    marginTop: 8,
  },
  successOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    alignItems: 'center',
    justifyContent: 'center',
    zIndex: 1000,
  },
  successContent: {
    alignItems: 'center',
    justifyContent: 'center',
    padding: 30,
  },
  successIconContainer: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#34C759',
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 24,
    shadowColor: '#34C759',
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 6,
  },
  successTitle: {
    fontSize: 24,
    fontWeight: '700',
    color: '#000000',
    marginBottom: 8,
  },
  successText: {
    fontSize: 16,
    color: '#666666',
    textAlign: 'center',
  },
});